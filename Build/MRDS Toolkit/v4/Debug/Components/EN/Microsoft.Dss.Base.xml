<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Dss.Base</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Dss.Core.Attributes.EmbeddedResourceAttribute">
            <summary>
            Used to automatically register embedded assembly resources
            utilized in HTTP or DSSP operations (for example XSLT documents).
            </summary>
            <remarks>
            When used at the assembly level, causes resources to be moved to the DSS Proxy.
            In this case, an empty resourceName will migrate all resources, and a comma seperated list 
            will migrate specific resources.  Each resource may optionally begin with the '*' wildcard.
            Eg: "drive.png,*.xslt"
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.EmbeddedResourceAttribute.#ctor(System.String)">
            <summary>
            Overloaded. Intializes a new instance of the <see cref="T:Microsoft.Dss.Core.Attributes.EmbeddedResourceAttribute"/> class
            </summary>
            <param name="resourceName">Name identifying the embedded assembly resource. It must be qualified with the namespace</param>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.EmbeddedResourceAttribute.ResourceName">
            <summary>
            Name identifying the partner
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.InitialStatePartnerAttribute">
            <summary>
            The initial state partner is a special partner that contains the state used
            to initialize this service. When applying this attribute to a field it
            will be initialized to the current state of the partner
            identified by this attribute.
            </summary>
            <remarks>
            This attribute is optional
            </remarks>
            <seealso cref="T:Microsoft.Dss.Core.Attributes.PartnerAttribute"/>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.InitialStatePartnerAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.InitialStatePartnerAttribute.Optional">
            <summary>
            True if this partner is optional for the service to start successfully
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.InitialStatePartnerAttribute.ServiceUri">
            <summary>
            The default location of the persisted state.
            May be an absolute URI or relative to localhost:/mountpoint/
            which maps to the root of the Microsoft Robotics Developer Studio installation directory.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.InitialStatePartnerAttribute.PartnerName">
            <summary>
            XML Qualified Name identifying the partner
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.ServiceStateAttribute">
            <summary>
            This attribute should be placed on the service class field that stores service state.
            It makes the state instance visible to the DSS runtime so additional functionality
            can be exposed
            </summary>
            <remarks>
            This attribute is optional
            </remarks>
            <seealso cref="T:Microsoft.Dss.Core.Attributes.PartnerAttribute"/>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.ServiceStateAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ServiceStateAttribute.StateTransform">
            <summary>
            Resource name of XML Transform applied on the service state on HTTP Get
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.PartnerCreationPolicy">
            <summary>
            Enumeration specifying partner service creation policy
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.PartnerCreationPolicy.UsePartnerListEntry">
            <summary>
            Use an existing instance of the proper service type, from the local directory.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.PartnerCreationPolicy.UseExisting">
            <summary>
            Use an existing instance of the proper service type, from the local directory.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.PartnerCreationPolicy.UseExistingOrCreate">
            <summary>
            Use an existing instance of the proper service type, from the local directory. If no instance
            is available, create one
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.PartnerCreationPolicy.CreateAlways">
            <summary>
            Always create a new instance of the service
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.DssServiceDeclaration">
            <summary>
            Valid Dss Service Types
            Usage: [assembly: ServiceDeclaration(DssServiceDeclaration.ServiceBehavior)]
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.DssServiceDeclaration.NonDssService">
            <summary>
            Not a Dss Service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.DssServiceDeclaration.ServiceBehavior">
            <summary>
            Assembly contains service behavior declarations including  
            the port types used to describe message patterns and types
            Replaces [ServiceBehaviorDeclaration]
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.DssServiceDeclaration.DataContract">
            <summary>
            Assembly contains data contract declarations. 
            Replaces [ServiceDataDeclaration]
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy">
            <summary>
            Assembly is a generated Dss Proxy
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform">
            <summary>
            Assembly is a generated Dss Transform
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.DataContractAttribute">
            <summary>
            Define a DataContract class
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataContractAttribute.Name">
            <summary>
            Class Name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataContractAttribute.Namespace">
            <summary>
            CLR Namespace
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataContractAttribute.ExcludeFromProxy">
            <summary>
            Gets or sets a value that indicates whether the type should be excluded from the proxy
            <remarks>
            This will cause clients to reference the assembly in which the type is defined. 
            If the type is a class or struct it must implement IDssSerializable.
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.DataMemberAttribute">
            <summary>
            Declares a Data Member in a Data Contract class.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataMemberAttribute.Namespace">
            <summary>
            The DataMember Namespace
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataMemberAttribute.XmlOmitDefaultValue">
            <summary>
            Emit the default value
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataMemberAttribute.IsRequired">
            <summary>
            Is Required
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataMemberAttribute.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataMemberAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataMemberAttribute.XmlAttribute">
            <summary>
            Specifies that the XmlSerializer must serialize the class member as an XML attribute
            </summary>
            <remarks>XmlText, XmlInlineList, and XmlAttribute are Mutually Exclusive</remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataMemberAttribute.XmlText">
            <summary>
            Specifies that the XmlSerializer must serialize the class member as the Text Body
            </summary>
            <remarks>XmlText, XmlInlineList, and XmlAttribute are Mutually Exclusive</remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataMemberAttribute.XmlInlineList">
            <summary>
            Specifies that the XmlSerializer must serialize the class member as an in-line list
            </summary>
            <remarks>XmlText, XmlInlineList, and XmlAttribute are Mutually Exclusive</remarks>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute">
            <summary>
            Use with [DataContract] to cause an initializer constructor to
            be created for every [DataMember]
            Use with [DataMember] to control the order of each parameter.
            <remarks>Order not supplied = class creation order</remarks>
            <remarks>Order  0 = class creation order</remarks>
            <remarks>Order -1 = Exclude</remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute.Order">
            <summary>
            Constructor parameter order.  
            <remarks>0 is default order.</remarks>
            <remarks>-1 - Exclude from constructor.</remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.SubscriptionManagerPartnerAttribute">
            <summary>
            Declares a specific partnership to the DSS Subscription Manager Service
            </summary>
            <remarks>A subscription manager instance will be created private to this service which is the most common usage</remarks>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.PartnerAttribute">
            <summary>
            The PartnerAttribute can be used to declare the partners a service 
            communicates with at compile time. When applying this attribute to a field of a type derived from IPort
            it will be initialized to refer to a partner identified by this attribute.
            </summary>
            <remarks>
            This attribute is optional
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.PartnerAttribute.#ctor(System.String)">
            <summary>
            Overloaded. Intializes a new instance of the <see cref="T:Microsoft.Dss.Core.Attributes.PartnerAttribute"/> class
            </summary>
            <param name="name">Name identifying the partner. This can be an XML qualified name</param>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.PartnerAttribute.ToString">
            <summary>
            String description of this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.PartnerAttribute.Name">
            <summary>
            Name identifying the partner
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.PartnerAttribute.Contract">
            <summary>
            Contract URI identifying the type of the partner
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.PartnerAttribute.CreationPolicy">
            <summary>
            Policy for creating partners
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.PartnerAttribute.Optional">
            <summary>
            True if this partner is optional for the service to start successfully
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.PartnerAttribute.ServiceDirectory">
            <summary>
            Uri of Service Directory to use
            </summary>
            <remarks>Used when a remote node directory should be searched for partner services</remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.SubscriptionManagerPartnerAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.SubscriptionManagerPartnerAttribute.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name">Name identifying the partner. This can be an XML qualified name</param>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.SubscriptionManagerPartnerAttribute.Equals(System.Object)">
            <summary>
            Returns true of the parameter is of the same type and has the same Name property as this instance
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.SubscriptionManagerPartnerAttribute.GetHashCode">
            <summary>
            If the name is valid, it returns the hashcode of the partner name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.ServicePortAttribute">
            <summary>
            The ServicePort attribute decorates the main port where inbound messages will 
            be delivered. The activation processes will reflect on the service for this 
            port and use it when binding to the forwarder path. The Dssp forwarder 
            reflects on the port generic types to determine what Dssp actions 
            are valid on this service.
            </summary>
            <remarks>
            This attribute is required
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.ServicePortAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dss.Core.Attributes.ServicePortAttribute"/> class
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.ServicePortAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dss.Core.Attributes.ServicePortAttribute"/> class
            </summary>
            <param name="servicePrefix">Path component of URI indicating a default name of service</param>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ServicePortAttribute.ServicePrefix">
            <summary>
            Path component of URI indicating a default name of service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ServicePortAttribute.AllowMultipleInstances">
            <summary>
            Indicates whether the service name should be made unique 
            or not. If <c>NotAPrefix</c> is false
            then a GUID is appended to the <see cref="P:Microsoft.Dss.Core.Attributes.ServicePortAttribute.ServicePrefix"/>
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.AlternateServicePortAttribute">
            <summary>
            The AlternateServicePort attribute decorates the alternate contract port(s)
            where inbound messages will be delivered to an alternate contract. 
            </summary>
            <remarks>
            The activation processes will reflect on the service for this 
            port and use it when binding to the forwarder subpath. The Dssp forwarder 
            reflects on the port generic types to determine what Dssp actions 
            are valid on this service.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.AlternateServicePortAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.AlternateServicePortAttribute.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="servicePrefix">Service URI prefix</param>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.AlternateServicePortAttribute.AlternateContract">
            <summary>
            Name identifying the alternate contract which a service exposes
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.ResourceGroupAttribute">
            <summary>
            Resource groups can be used as common resource pool for a set of services
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.ResourceGroupAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dss.Core.Attributes.ResourceGroupAttribute"/> class
            </summary>
            <param name="name">Name identifying the resource group</param>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ResourceGroupAttribute.Name">
            <summary>
            Name identifying the resource group
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.ActivationSettingsAttribute">
            <summary>
            Attribute is used to specify the execution behavior and 
            optionally what constructor type should be used.
            </summary>
            <remarks>
            This attribute is optional
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ActivationSettingsAttribute.ShareDispatcher">
            <summary>
            Inidicates whether multiple service instances can be pooled or not
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ActivationSettingsAttribute.ExecutionUnitsPerDispatcher">
            <summary>
            Indicates the number of execution units allocated to the dispatcher
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.ContractAttribute">
            <summary>
            This attribute indicates the contract URI of a service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.ContractAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dss.Core.Attributes.ContractAttribute"/> class
            </summary>
            <param name="contract">Contract identifier in the form of an absolute URI</param>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ContractAttribute.Contract">
            <summary>
            Contract identifier in the form of an absolute URI
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute">
            <summary>
            This attribute is used to declare every type of Dss Assembly,
            including proxy and transform assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute.#ctor(Microsoft.Dss.Core.Attributes.DssServiceDeclaration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute.ServiceType">
            <summary>
            The declared Dss Service Type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute.SourceAssemblyKey">
            <summary>
            The source assembly full name for a proxy or transform
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.Transform">
            <summary>
            This delegate is for the transform code: proxy to source and vice versa.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.DssServiceDescriptionAttribute">
            <summary>
            Descriptions are human-readable strings and URIs that aid in documenting and clasifying an associated service.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.DssServiceDescriptionAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.DssServiceDescriptionAttribute.#ctor(System.String)">
            <summary>
            Default constructor that requires the information URI as a string
            </summary>
            <param name="descriptionUri">The URI that points to more information about the service in the form of a string</param>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DssServiceDescriptionAttribute.ServiceInformationUri">
            <summary>
            URI pointing to location of more information about the service (can be html, RDF, etc.)
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.DssCategoryAttribute">
            <summary>
            Categories are URIs that can be used to classify service contracts. By associating
            categories with a service it becomes possible to query across a set of services and
            determine which categories they belong.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.DssCategoryAttribute.#ctor(System.String)">
            <summary>
            Default constructor requires the category string
            </summary>
            <param name="category">The category in the form of a URI to associate with the service.</param>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.DssCategoryAttribute.Category">
            <summary>
            Name identifying the category
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.AlternateContractAttribute">
            <summary>
            Indicates that this service exposes an alternate contract.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.AlternateContractAttribute.#ctor(System.String)">
            <summary>
            Default constructor requires the contract string
            </summary>
            <param name="contract">The alternate contract in the form of a URI that this service exposes.</param>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.AlternateContractAttribute.Contract">
            <summary>
            Name identifying the alternate contract which a service exposes
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.ServiceHandlerBehavior">
            <summary>
            Dss service handler behavior regarding concurrency
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.ServiceHandlerBehavior.Default">
            <summary>
            Uses the default semantic definition of the verb to decide whether
            the handler is considered to be concurrent, exclusive or teardown
            </summary>
            <remarks>
            <para>The verbs are placed into groups as described in the following table.</para>
            <list type="table">
            <listheader><term>Verb</term><description>Concurrency group</description></listheader>
            <item><term>Delete</term><description>Exclusive</description></item>
            <item><term>Drop</term><description>Teardown</description></item>
            <item><term>Get</term><description>Concurrent</description></item>
            <item><term>Insert</term><description>Exclusive</description></item>
            <item><term>Lookup</term><description>Concurrent</description></item>
            <item><term>Query</term><description>Concurrent</description></item>
            <item><term>Replace</term><description>Exclusive</description></item>
            <item><term>Submit</term><description>Exclusive</description></item>
            <item><term>Subscribe</term><description>Concurrent</description></item>
            <item><term>Update</term><description>Exclusive</description></item>
            <item><term>Upsert</term><description>Exclusive</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.ServiceHandlerBehavior.Concurrent">
            <summary>
            Marks a Dssp operation handler as being concurrent to itself 
            and other similarly marked handlers
            <remarks>Set only on handlers that do not modify state</remarks>
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.ServiceHandlerBehavior.Exclusive">
            <summary>
            Marks a Dssp operation handler as being exclusive to itself 
            and all other handlers marked with the Concurrent and Exclusive attributes 
            <remarks>
            Set only on handlers that modify state. The attribute synchronizes access
            only between handlers that have used the ConcurrentServiceHandler and 
            ExclusiveServiceHandler attributes
            </remarks>
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.ServiceHandlerBehavior.Teardown">
            <summary>
            Marks a Dssp operation handler as a one time, exclusive tear down handler that
            will cause the service to shutdown
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Attributes.ServiceHandlerBehavior.Independent">
            <summary>
            Marks a Dssp operation handler as completely independent of all other handlers
            It will execute concurrently to all other handlers (exclusive and concurrent) including the teardown handler
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.ServiceTypeRegistrationRequiredAttribute">
            <summary>
            When used in a proxy assembly this attribute indicates that the service assembly contains
            data contract types that are use custom serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.ServiceTypeRegistrationRequiredAttribute.#ctor">
            <summary>
            Indicates that the proxy assembly was created from a service assembly that contains
            data contract types that are use custom serialization.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Attributes.ServiceHandlerAttribute">
            <summary>
            Specifies concurrency behavior for a Dssp operation handler
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.ServiceHandlerAttribute.#ctor">
            <summary>
            Mark the method as handling a DSSP message, using the default semantics of the
            message to specify concurrency behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Attributes.ServiceHandlerAttribute.#ctor(Microsoft.Dss.Core.Attributes.ServiceHandlerBehavior)">
            <summary>
            Mark the method as handling a DSSP message, using specified concurrency behavior.
            </summary>
            <param name="behavior">Specifies concurrency behavior</param>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ServiceHandlerAttribute.PortFieldName">
            <summary>
            Field name of DSSP operations port the handler will attach
            </summary>
            <remarks>Use only for ports other than the main port. Fields for alternate contract ports should be specified using
            this named parameter
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ServiceHandlerAttribute.Behavior">
            <summary>
            Service handler behavior
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ServiceHandlerAttribute.Interval">
            <summary>
            Interval in seconds for a periodic handler. After each interval a default construction of the handler
            parameter will be posted on the port associated with the handler
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Attributes.ServiceHandlerAttribute.QueueDepthLimit">
            <summary>
            Maximum number of items in dss operation queue before inbound messages are automatically discarded with fault
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Permissions.DssNetworkPermissionAttribute">
            <summary>
            Specifies permission to send messages to other nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermissionAttribute"/> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"/> value.
            </summary>
            <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"/> values.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermissionAttribute.CreatePermission">
            <summary>
            Creates and returns a new instance of the <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> class.
            </summary>
            <returns>A <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> that corresponds to the security declaration.</returns>
        </member>
        <member name="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission">
            <summary>
            Controls rights to send messages to other nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermission.#ctor(System.Security.Permissions.PermissionState)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> class that either allows access to send messages to other nodes or disallows it.
            </summary>
            <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"/> values.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermission.Copy">
            <summary>
            Creates an identical copy of the current permission instance.
            </summary>
            <returns>A new instance of the <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> class that is an identical copy of the current instance. </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermission.IsUnrestricted">
            <summary>
            Checks the overall permission state of the object.
            </summary>
            <returns><value>true</value> if the <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance was created with <see cref="F:System.Security.Permissions.PermissionState.Unrestricted"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermission.Intersect(System.Security.IPermission)">
            <summary>
            Creates a permission instance that is the intersection of the current permission instance and the specified permission instance. 
            </summary>
            <param name="target">The <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance to intersect with the current instance.</param>
            <returns>
            A <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance that represents the intersection of the 
            current <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance with the specified <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> 
            instance, or a null reference if the intersection is empty. If both the current instance and <paramref name="target"/> are 
            unrestricted, this method returns a new <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance that is unrestricted; 
            otherwise, it returns a null reference 
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermission.IsSubsetOf(System.Security.IPermission)">
            <summary>
            Determines whether the current permission instance is a subset of the specified permission instance. 
            </summary>
            <param name="target">The second <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance to be tested for the subset relationship.</param>
            <returns><value>false</value> if the current instance is unrestricted and <paramref name="target"/> is either a null 
            reference or unrestricted; otherwise, <value>true</value>. </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermission.Union(System.Security.IPermission)">
            <summary>
            Creates a permission instance that is the union of the current permission instance and the specified permission instance.
            </summary>
            <param name="target">The <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance to combine with the current instance.</param>
            <returns>A <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance that represents the union of the current <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/>
            instance with the specified <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance. If <paramref name="target"/> is a null reference, 
            this method returns a copy of the current instance. If the current instance or <paramref name="target"/> is unrestricted, this method 
            returns a <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance that is unrestricted; otherwise, it returns a <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/>
            instance that is restricted</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermission.FromXml(System.Security.SecurityElement)">
            <summary>
            Reconstructs a <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance from an XML encoding.
            </summary>
            <param name="securityElement">The XML encoding to use to reconstruct the <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.Permissions.DssNetworkPermission.ToXml">
            <summary>
            Creates an XML encoding of a <see cref="T:Microsoft.Dss.Core.Permissions.DssNetworkPermission"/> instance and its current state.
            </summary>
            <returns>A <see cref="T:System.Security.SecurityElement"/> instance that contains an XML-encoded representation of the security object, including state information.</returns>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractManager.ManifestDescription">
            <summary>
            Summary information on a Dss manifest
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractManager.ManifestDescription.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractManager.ManifestDescription.#ctor(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
            <summary>
            Initialization constructor
            </summary>
            <param name="fileName"></param>
            <param name="contract"></param>
            <param name="comment"></param>
            <param name="recordName"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractManager.ManifestDescription.Equals(System.Object)">
            <summary>
            True if current instance is the same as supplied parameter
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractManager.ManifestDescription.GetHashCode">
            <summary>
            Instance hash code derived from file name hash code and recordname hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractManager.ManifestDescription.GetDescriptions(System.String)">
            <summary>
            Enumerates all manifest descriptions for the services that are started up by a manifest.
            </summary>
            <param name="file">path to the manifest</param>
            <returns>manifest enumeration</returns>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractManager.ManifestDescription.GetDescriptions(System.String,System.IO.Stream)">
            <summary>
            Enumerates all manifest descriptions for the services that are started up by a manifest.
            </summary>
            <param name="file">the file to use in the manifest description</param>
            <param name="data">manifest data</param>
            <returns>manifest enumeration</returns>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractManager.ManifestDescription.Comment">
            <summary>
            Comment 
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractManager.ManifestDescription.RecordName">
            <summary>
            Record name.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractManager.ManifestDescription.Contract">
            <summary>
            Service contract identifier
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractManager.ManifestDescription.FileName">
            <summary>
            Manifest file name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractManager.ManifestDescription.FileNameWithoutDirectory">
            <summary>
            File name without directory path
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractManager.ManifestDescription.Directory">
            <summary>
            File system directory where manifest file is located
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractManager.ManifestDescription.HasComment">
            <summary>
            True if manifest has proper comment
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractManager.ManifestDescription.FriendlyName">
            <summary>
            Friendly name for manifest
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractManager.ManifestTable">
            <summary>
            Dictionary of parsed manifests found in a local file system directory
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractManager.ManifestTable.#ctor(System.String)">
            <summary>
            Constructs a dictionary of service records found in all manifests in the specified directory,
            categorized by contract identifier 
            </summary>
            <param name="rootDir"></param>
        </member>
        <member name="T:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping">
            <summary>
            Dss Infrastructure Use. Contract to service assembly table entry
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.IDssSerializable">
            <summary>
            Interface for DSS Serialization and Cloning
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.IDssSerializable.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.IDssSerializable.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialize
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.IDssSerializable.Clone">
            <summary>
            Deep Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.IDssSerializable.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy [DataMember] fields to target
            </summary>
            <remarks>
            target must be inheritable from this type.
            </remarks>
            <example>
            virtual void CopyTo(IDssSerializable target)
            {
                RealType typedTarget = target as RealType;
                if (typedTarget == null)
                    throw new ArgumentException(string.Format("CopyTo({0}) requires type {0}", this.GetType().FullName));
                typedTarget.Field1 = this.Field1;
            }
            </example>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.Contract">
            <summary>
            Contract identifier correlated with assemblies in this entry
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.ServiceAssemblyLocation">
            <summary>
            Service implementation assembly for contract or Proxy assembly if implementation not available
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.ServiceProxyAssemblyLocation">
            <summary>
            Service implementation assembly for contract or Proxy assembly if implementation not available
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.ServiceTransformAssemblyLocation">
            <summary>
            Service implementation assembly for contract or Proxy assembly if implementation not available
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping.AssemblyLocationsForContractAsAlternate">
            <summary>
            Assemblies with service classes that implement this contract as an alternate
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap">
            <summary>
            Dictionary of contract identifiers to assembly file names
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.Add(System.String,Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping)">
            <summary>
            Add contract entry
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.TryGetValue(System.String,Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping@)">
            <summary>
            TryGet
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.TryGetValueWithSameProxyAssembly(System.String,Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping@)">
            <summary>
            Searches for a contract mapping that contains the same proxy assembly file name as the supplied proxy file path
            </summary>
            <param name="proxyLocationAsKey">Proxy assembly file path</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.TryGetValueWithSameAssembly(System.String,Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping@)">
            <summary>
            Searches for a contract mapping that contains the same assembly file name as the supplied file path
            </summary>
            <param name="assemblyLocationAsKey">assembly file path</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.FindAlternateContractImplementations(System.String)">
            <summary>
            Returns all mapping entries that contain service types that implement the supplied contract as an alternate
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.PrepareForSerialization">
            <summary>
            Must be called before Serialize to properly match transforms with mapping entries
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.Item(System.String)">
            <summary>
            Indexer
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap.Values">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ServiceAssemblyReflection.CacheProcessingResultPort">
            <summary>
            Results of processing the cache
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractCacheManager">
            <summary>
            Manages the cache that ties contract identifiers with service implementation assemblies
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractCacheManager.Process(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Process contract cache file. Create if not present, update otherwise
            </summary>
            <param name="cacheFile">Cache file path</param>
            <param name="directories">List of file directories to search for service assemblies</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractCacheManager.Refresh(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Enumerates all services assemblies in the given directory list and updates the cache file
            </summary>
            <param name="cacheFile"></param>
            <param name="directories"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractCacheManager.LoadCache(System.String)">
            <summary>
            Retrieve a persisted DssServiceList
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractCacheManager.SaveCache(Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap,System.String,Microsoft.Ccr.Core.Handler{System.String})">
            <summary>
            Persist the contract to assembly dictionary to a file.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssemblyMapBuilder">
            <summary>
            Dss Infrastructure Use. Utility class for enumerating service contract identifiers from assemblies
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssemblyMapBuilder.EnumerateServicesFromDirectory(System.String,System.Collections.Generic.List{System.IO.DirectoryInfo},Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap)">
            <summary>
            Searches a local file system directory for assemblies with DSS service implementations
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssemblyMapBuilder.EnumerateAssembliesFromDirectory(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.IO.DirectoryInfo},System.Boolean)">
            <summary>
            Add all *.dll in specified fileSpec to the files list.
            </summary>
            <param name="path">A file or directory</param>
            <param name="files">Files are added to this list</param>
            <param name="knownDirectories">Directories already enumerated</param>
            <param name="includeSubdirs"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssemblyMapBuilder.FindServiceContracts(System.String,System.Collections.Generic.List{System.String},Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap)">
            <summary>
            Looks for DSS service contract classes within files
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssemblyMapBuilder.FindServiceContract(System.String,Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMap)">
            <summary>
            Search assembly for both a contract class (which means the assembly defines a unique contract)
            and for service implementations of alternate contracts
            </summary>
            <param name="dllFile"></param>
            <param name="table"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssemblyMapBuilder.FindServiceContracts(System.String,System.Collections.Generic.ICollection{System.String},Microsoft.Ccr.Core.Handler{System.String})">
            <summary>
            Searches a list of directories for assemblies with DSS contract definitions and/or implementations
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Core.IDssCombinedOperationsPort">
            <summary>
            Interface which identifies the Combined Operations Port for a service.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.IDssCombinedOperationsPort.OperationPorts">
            <summary>
            A dictionary containing the contract and IPortSet for each
            operation port in a Combined Operations port.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Core.DssOperationsPortMetadata">
            <summary>
            A PortSet and it's corresponding contract
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DssOperationsPortMetadata.#ctor(Microsoft.Ccr.Core.IPortSet,System.String,System.String,System.String)">
            <summary>
            A PortSet and it's corresponding contract
            </summary>
            <param name="portSet"></param>
            <param name="contract"></param>
            <param name="fieldName"></param>
            <param name="suffix"></param>
        </member>
        <member name="F:Microsoft.Dss.Core.DssOperationsPortMetadata.PortSet">
            <summary>
            A PortSet
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssOperationsPortMetadata.Contract">
            <summary>
            A Dss Contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssOperationsPortMetadata.FieldName">
            <summary>
            The PortSet Field Name
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssOperationsPortMetadata.Suffix">
            <summary>
            The service partner suffix for this instance of an alternate contract
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DssOperationsPortMetadata.ToString">
            <summary>
            To String
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Core.DssCombinedOperationsPort">
            <summary>
            Base implementation of a Combined Operations Port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DssCombinedOperationsPort.Initialize(Microsoft.Dss.Core.DssOperationsPortMetadata[])">
            <summary>
            Base implementation of a Combined Operations Port
            </summary>
            <param name="operationPorts"></param>
        </member>
        <member name="P:Microsoft.Dss.Core.DssCombinedOperationsPort.OperationPorts">
            <summary>
            Operation Ports
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DssApplicationSettings">
            <summary>
            Dss Internal Use. Key/value pairs for CLR host configuration file used for DSS host executable
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_LocalFileAccess">
            <summary>
            Determines Dss node access to local file system. If writes are disabled no cache updates or other disk writes will occur
            from Dss core services
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_LocalFileAccessRead">
            <summary>
            Read only access to local file system
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_LocalFileAccessReadWrite">
            <summary>
            Read only access to local file system
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_DssHttpPort">
            <summary>
            Dss Http Port
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_DssTcpPort">
            <summary>
            Dss Tcp Port
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_DssMessageLoggingPath">
            <summary>
            Dss Message Logging output path
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_DssHostName">
            <summary>
            Dss Hostname used for all transport uri resolution
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_DssDefaultRuntimeResources">
            <summary>
            Dss Forwarder message capture key
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_DsspTimeScale">
            <summary>
            Dss Forwarder message capture key
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_ForwarderMessageCapture">
            <summary>
            Dss Forwarder message capture key
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_ForwarderDsspTimeoutTracking">
            <summary>
            Dss Forwarder message capture key
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_BinarySerialization">
            <summary>
            Transport binary serialization enable/disable
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_ForwarderMessageHandlingCaptureInbound">
            <summary>
            All inbound messages are logged to disk
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_ForwarderMessageHandlingCaptureOutbound">
            <summary>
            All outbound messages are logged to disk
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_ForwarderMessageHandlingCaptureInboundOutbound">
            <summary>
            All inbound and outbound messages are logged to disk
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_ForwarderMessageHandlingCaptureInboundOutboundWhenDiagnosticHeaderPresent">
            <summary>
            Inbound and outboundservice operations with the DSS diagnostic header present are are logged to disk
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_ForwarderMessageHandlingCaptureInboundWhenDiagnosticHeaderPresent">
            <summary>
            Only inbound service operations with the DSS diagnostic header present are are logged to disk
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_ForwarderMessageHandlingCaptureOutboundWhenDiagnosticHeaderPresent">
            <summary>
            Only outbound service operations with the DSS diagnostic header present are are logged to disk
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_BinarySerializationAllTransports">
            <summary>
            All transports must binary serialize
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Value_BinarySerializationDisabled">
            <summary>
            Only non http transports must binary serialize
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_MaxPendingHttpRequests">
            <summary>
            Maximum number of outstanding requests allowed on outbound HTTP connections
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssApplicationSettings.Key_AllowUnsecuredRemoteAccess">
            <summary>
            Whether the node will use the fully qualified domain name. If this value is false, just 
            localhost is used.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DssCategoryPrefixes">
            <summary>
            Category prefix strings used by published categories.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCategoryPrefixes.Root">
            <summary>
            Specifies the root prefix of all Microsoft service categories.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCategoryPrefixes.Dss">
            <summary>
            Specifies the prefix of all core DSS categories.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCategoryPrefixes.Robotics">
            <summary>
            Specifies the prefix of all robotics categories.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCategoryPrefixes.Simulation">
            <summary>
            Specifies the prefix of all simulation categories.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DssCategories">
            <summary>
            Microsoft Robotics published categories.  
            These categories are available for use by any Dss Service.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCategories.Infrastructure">
            <summary>
            Indicates this is a core Dss service.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCategories.GenericContract">
            <summary>
            Indicates the category of generic contracts.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCategories.Sample">
            <summary>
            Indicates the category of Dss sample services.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCategories.Tutorial">
            <summary>
            Indicates the category of Dss tutorial services.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCategories.Test">
            <summary>
            Indicates the category of Dss test services.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ServiceEnvironment">
            <summary>
            Holds important state, specific to the service instance, for accessing local node resources and services
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceEnvironment.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceEnvironment.#ctor(Microsoft.Ccr.Core.DispatcherQueue,Microsoft.Ccr.Core.DispatcherQueue,System.Collections.Generic.Dictionary{System.String,Microsoft.Ccr.Core.IPort},System.Collections.Generic.Dictionary{System.String,Microsoft.Ccr.Core.IPort},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            clone constructor
            </summary>
            <param name="taskQueue">The DispatcherQueue to use for this service environment.</param>
            <param name="coreTaskQueue">The Core DispatcherQueue to use for this service environment.</param>
            <param name="transportTable">A dictionary of uri scheme keys and transport ports</param>
            <param name="internalServiceTable">A dictionary with core services available to this service.</param>
            <param name="serviceUriTable">A dictionary with other Dss services available to this service.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceEnvironment.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns>The shallow copy.</returns>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceEnvironment.TaskQueue">
            <summary>
            DispatcherQueue instance used for scheduling tasks
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceEnvironment.CoreTaskQueue">
            <summary>
            DispatcherQueue instance used for scheduling tasks on the core task queue
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceEnvironment.InternalServicePortTable">
            <summary>
            Ports to local infrastructure services with no public URI
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceEnvironment.ServiceUriTable">
            <summary>
            URIs to core Dss infrastructure services for the local node
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceEnvironment.TransportTable">
            <summary>
            Uri scheme/TransportPort dictionary
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DiagnosticsProbeRaw">
            <summary>
            Request for raw diagnostic information, formatted as a single string.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DiagnosticsProbeRaw.#ctor(System.IO.StreamWriter,System.Boolean)">
            <summary>
            Initialization constructor
            </summary>
            <param name="writer">Stream writer to write represenation to.</param>
            <param name="applyStyle">Indicates whether an XSLT stylesheet should be applied to representation</param>
        </member>
        <member name="P:Microsoft.Dss.Core.DiagnosticsProbeRaw.Writer">
            <summary>
            StreamWriter instance used for output
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DiagnosticsProbeRaw.ApplyStyle">
            <summary>
            Indicates whether an XSLT stylesheet should be applied to representation
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DiagnosticsProbeRaw.Result">
            <summary>
            Result port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DiagnosticsProbe">
            <summary>
            Request for resource manager diagnostic information
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DiagnosticsProbe.Result">
            <summary>
            Result port set
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ResourceManagerPort">
            <summary>
            Resource Manager Port Set
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ConfigureTimeScale">
            <summary>
            Sets the timescale factor used for dispatcher queue timer calculations
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ConfigureTimeScale.#ctor(System.Double)">
            <summary>
            Initialization constructor
            </summary>
            <param name="factor">Timescale factor</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ConfigureTimeScale.TimeScale">
            <summary>
            Factor multiplied with TimeSpan values to compute absolute time duration
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ConfigureTimeScale.ResultPort">
            <summary>
            Result PortSet
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.AllocateExecutionResource">
            <summary>
            Request for allocation of a CCR dispatcher and a dispatcher queue
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.AllocateExecutionResource.#ctor(System.Int32,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="executionUnits">Number of workers (threads)</param>
            <param name="resourceTag">Resource Group name</param>
        </member>
        <member name="M:Microsoft.Dss.Core.AllocateExecutionResource.#ctor(System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="poolResource">Allow re-use of the allocated resource</param>
            <param name="executionUnits">Number of workers (threads)</param>
            <param name="resourceTag">Resource Group name</param>
            <param name="owner">Dispatcher name</param>
        </member>
        <member name="P:Microsoft.Dss.Core.AllocateExecutionResource.ResourceGroup">
            <summary>
            Resource group name for this dispatcher
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.AllocateExecutionResource.Owner">
            <summary>
            Dispatcher owner, also used as the CCR dispatcher name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.AllocateExecutionResource.ExecutionUnits">
            <summary>
            Number of dispatcher worker units (threads)
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.AllocateExecutionResource.PoolResources">
            <summary>
            Allow other services to share this resource
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.AllocateExecutionResource.Result">
            <summary>
            Result PortSet
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ExecutionAllocationResult">
            <summary>
            Result for <see cref="T:Microsoft.Dss.Core.AllocateExecutionResource"/>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ExecutionAllocationResult.#ctor(Microsoft.Ccr.Core.DispatcherQueue)">
            <summary>
            Initialization constructor
            </summary>
            <param name="dispatcherQueue">Dispatcher Queue</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ExecutionAllocationResult.TaskQueue">
            <summary>
            Dispatcher Queue allocated
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.FreeExecutionResource">
            <summary>
            Request to free a previous allocated execution resource
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.FreeExecutionResource.#ctor(Microsoft.Ccr.Core.DispatcherQueue)">
            <summary>
            Initialization constructor
            </summary>
            <param name="dispatcherQueue">DispatcherQueue to dispose.</param>
        </member>
        <member name="P:Microsoft.Dss.Core.FreeExecutionResource.DispatcherQueue">
            <summary>
            Dispatcher queue to free
            <remarks>If this dispatcher queue is the last one associated with a dispatcher, the dispatcher will be automatically disposed</remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.CloneHelper">
            <summary>
            Cloning Helper
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.CloneHelper.CloneXmlQualifiedName(System.Xml.XmlQualifiedName)">
            <summary>
            Clone XmlQualifiedName
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.XmlSerializationHelper">
            <summary>
            Xml Serialization Helper
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.XmlSerializationHelper.CreateXmlSerializer(System.Type,System.Type[])">
            <summary>
            Create an Xml Serializer
            </summary>
            <param name="type"></param>
            <param name="extraTypes"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.BinarySerializationHelper">
            <summary>
            Helper methods for binary serialization
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DsspBinaryFileExtension">
            <summary>
            DSS binary file extension used for serialized IDssSerializable instances, serialized
            using the serialization method in this class
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeFromStream(System.IO.Stream)">
            <summary>
            Deserializes a binary serialized IDssSerializable type.
            </summary>
            <param name="stream">Stream with binary serialized instance</param>
            <returns>An instance of the expected IDssSerializavle type</returns>
            <remarks>
            A Dss binary serialized container contains the assembly name, writen with BinaryWriter.Write(string)
            followed by the full type name, written with BinaryWriter.Write(string), followed
            by the binary serialized instance
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeToStream(System.IO.Stream,Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Serializes an instance of an IDssSerializable type to a stream, first writing a type description header to aid
            deserialization
            </summary>
            <param name="stream"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeQualifiedName(System.IO.BinaryReader)">
            <summary>
            Qname deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeQualifiedName(System.Xml.XmlQualifiedName,System.IO.BinaryWriter)">
            <summary>
            Qname serialize
            </summary>
            <param name="qname"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(System.DateTime,System.IO.BinaryWriter)">
            <summary>
            Serialize DateTime respecting UTC, Local, and Unspecified formats
            </summary>
            <param name="dateTime"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(System.IO.BinaryReader)">
            <summary>
            Deserialize DateTime respecting UTC, Local, and Unspecified formats
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(System.IO.BinaryReader,System.Type)">
            <summary>
            Deserialize from the binary reader stream
            </summary>
            <param name="reader"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(System.IO.BinaryWriter,System.Object)">
            <summary>
            Serialize into the binary writer stream
            </summary>
            <param name="writer"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.BinaryDeserialize(System.IO.BinaryReader,System.Type,System.Object)">
            <summary>
            Deserialize the specified type from reader
            </summary>
            <param name="reader"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.BinarySerializationHelper.BinarySerialize(System.IO.BinaryWriter,System.Type,System.Object)">
            <summary>
            Deserialize the specified type from reader
            </summary>
            <param name="writer"></param>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.SerializerPort">
            <summary>
            Serializer service Port Set
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.SerializationRequestBase">
            <summary>
            Common class for serialization requests
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.SerializationRequestBase.StandardEncoding">
            <summary>
            Encoding used for all service serialization requests
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.SerializationRequestBase.WriterSettingsWithoutXmlDeclaration">
            <summary>
            XmlWriter settings used for all service serialization requests
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.SerializationRequestBase.#cctor">
            <summary>
            Static default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.SerializationRequestBase.#ctor(System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="instance">Instance object to serialize.</param>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.SerializationRequestBase.Namespaces">
            <summary>
            Namespace table to use for this serialization request
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.SerializationRequestBase.ConvertToProxy">
            <summary>
            Set to true for instances that should be converted to proxy
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.SerializationRequestBase.Instance">
            <summary>
            Object being serialized
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.SerializeToXmlNode">
            <summary>
            Request to serialize object to a XmlNode instance
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.SerializeToXmlNode.#ctor(System.Object,Microsoft.Ccr.Core.PortSet{System.Xml.XmlNode,System.Exception})">
            <summary>
            Initialization constructor
            </summary>
            <param name="instance">Instance object to serialize.</param>
            <param name="resultPort">Port on which result of serialization (success or failure) is posted.</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.SerializeToXmlNode.#ctor(System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="instance">Instance object to serialize.</param>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.SerializeToXmlNode.ResultPort">
            <summary>
            Result Port Set
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.SerializeToXmlWriter">
            <summary>
            Request for serializing to an XmlWriter instance
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.SerializeToXmlWriter.#ctor(System.Object,System.Xml.XmlWriter)">
            <summary>
            Initialization constructor
            </summary>
            <param name="instance"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.SerializeToXmlWriter.#ctor(System.Object,System.Xml.XmlWriter,Microsoft.Ccr.Core.PortSet{System.Xml.XmlWriter,System.Exception})">
            <summary>
            Initialization constructor
            </summary>
            <param name="instance"></param>
            <param name="writer"></param>
            <param name="resultPort">Port on which result of serialization (success or failure) is posted.</param>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.SerializeToXmlWriter.ResultPort">
            <summary>
            Result Port Set
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.SerializeToXmlWriter.Writer">
            <summary>
            XmlWriter instance used for serialization output
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.SerializeToXmlWriter.Stream">
            <summary>
            Target stream used to initialize XmlWriter instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.DeserializeRequestBase">
            <summary>
            Common class for deserialization requests
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.#ctor(System.IO.Stream)">
            <summary>
            Initialization constructor
            </summary>
            <param name="stream">Source stream</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="xml">String with XML data</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.#ctor(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Initialization constructor
            </summary>
            <param name="node">XML DOM node that contains XML data</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.#ctor(System.Xml.XmlReader)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Source reader</param>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.Node">
            <summary>
            Xml node
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.Stream">
            <summary>
            Source stream
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.Xml">
            <summary>
            Source XML
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.Reader">
            <summary>
            Source reader
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.BaseResultPort">
            <summary>
            Result port
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.IsGeneric">
            <summary>
            False if specific type requested
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.DeserializeRequestBase.RequiresServiceType">
            <summary>
            True if serializer must convert to service type from proxy type
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.Deserialize`1">
            <summary>
            Request for strongly typed deserialization
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize`1.#ctor(System.IO.Stream)">
            <summary>
            Initialization constructor
            </summary>
            <param name="stream">Source stream</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize`1.#ctor(System.IO.MemoryStream)">
            <summary>
            Initialization constructor
            </summary>
            <param name="memoryStream">Source stream</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize`1.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="xml">Source XML</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize`1.#ctor(System.String,Microsoft.Ccr.Core.PortSet{`0,System.Exception})">
            <summary>
            Initialization constructor
            </summary>
            <param name="xml">Source XML</param>
            <param name="resultPort">Port on which result of deserialization (success or failure) is posted.</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize`1.#ctor(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Initialization constructor
            </summary>
            <param name="node">Source XML node</param>    
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize`1.#ctor(System.Xml.XmlReader)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Source reader</param>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.Deserialize`1.ResultPort">
            <summary>
            Result PortSet
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.Deserialize`1.BaseResultPort">
            <summary>
            Result as IPort
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.Deserialize`1.IsGeneric">
            <summary>
            False if specific type requested
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.Deserialize`1.RequiresServiceType">
            <summary>
            True if serializer must convert to service type from proxy type
            </summary>        
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.Deserialize">
            <summary>
            Request to deserialize into an untyped object instance
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize.#ctor(System.IO.Stream)">
            <summary>
            Initialization constructor
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize.#ctor(System.IO.MemoryStream)">
            <summary>
            Initialization constructor
            </summary>
            <param name="memoryStream"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="xml">String containing XML to deserialize.</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize.#ctor(System.String,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Services.Serializer.DeserializeResult,System.Exception})">
            <summary>
            Initialization constructor
            </summary>
            <param name="xml">String containing XML to deserialize.</param>
            <param name="resultPort">Port on which result of deserialization (success or failure) is posted.</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize.#ctor(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Initialization constructor
            </summary>
            <param name="node">XML Node to deserialize</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize.#ctor(System.Xml.XPath.IXPathNavigable,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Services.Serializer.DeserializeResult,System.Exception})">
            <summary>
            Initialization constructor
            </summary>
            <param name="node">XML Node to deserialize</param>
            <param name="resultPort">Port on which result of deserialization (success or failure) is posted.</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.Deserialize.#ctor(System.Xml.XmlReader)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.Deserialize.ResultPort">
            <summary>
            Result Port Set
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.Deserialize.IsGeneric">
            <summary>
            False if strong type deserialization requested
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.Deserialize.RequiresServiceType">
            <summary>
            True if conversion to service type required
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.Deserialize.BaseResultPort">
            <summary>
            Result as IPort
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.DeserializeResult">
            <summary>
            Deserialize success result
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DeserializeResult.#ctor(System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.DeserializeResult.Instance">
            <summary>
            Object that was succesfully deserialized
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.PathCreationPhaseTwo">
            <summary>
            Message sent to all forwarders in the forward path indicating
            second phase of initialization can start
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.PathCreationPhaseTwo.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType,System.Object,Microsoft.Ccr.Core.IPort)">
            <summary>
            Constructor
            </summary>
            <param name="serviceInfo">Service information</param>
            <param name="path">Internal use only</param>
            <param name="servicePort">Service main operation port</param>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.PathCreationPhaseTwo.ServiceInfo">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.PathCreationPhaseTwo.PathContext">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.PathCreationPhaseTwo.ServicePort">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.PathCreationPhaseTwo.ResultPort">
            <summary>
            Result PortSet for second phase
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort`1">
            <summary>
            Common response PortSet with one type argument for the success response type
            </summary>
            <typeparam name="RESPONSE">Type of success response</typeparam>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.ServicePartnerMetadata">
            <summary>
            Dss Infrastructure Use. Reflection data on service partner attributes
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServicePartnerMetadata.#ctor(System.Boolean,System.Reflection.FieldInfo)">
            <summary>
            Initialization constructor
            </summary>
            <param name="optional"></param>
            <param name="fieldInfo"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServicePartnerMetadata.Optional">
            <summary>
            True if partner is optional, allowing to service startup to succeed even if partner binding fails
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServicePartnerMetadata.FieldInfo">
            <summary>
            Reflection data on partner attribute
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.ServicePortFieldMetadata">
            <summary>
            Dss Infrastructure Use. Tuple of reflection info on service port field members and their attributes
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServicePortFieldMetadata.Contract">
            <summary>
            Service contract for port field. This can be null for main service ports
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServicePortFieldMetadata.PortAttribute">
            <summary>
            Port attribute instance
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServicePortFieldMetadata.PortFieldInfo">
            <summary>
            Reflection information on port field
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.ServiceMetadataEntry">
            <summary>
            Dss Infrastructure Use. Reflection information on service attributes
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceMetadataEntry.EmbeddedResourceAttributes">
            <summary>
            Service embedded resource attribute instances
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceMetadataEntry.ServicePort">
            <summary>
            Service main port attribute instance
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceMetadataEntry.InitialStatePartner">
            <summary>
            Initial state partner attribute instance
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceMetadataEntry.ServiceState">
            <summary>
            Reflection metadata on service state field annotated with <see cref="T:Microsoft.Dss.Core.Attributes.ServiceStateAttribute"/>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceMetadataEntry.PartnerPorts">
            <summary>
            Collection of all partner attributes and reflection data for each one
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceMetadataEntry.AlternatePortList">
            <summary>
            Collection of alternate port fields
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspServiceCreationPort">
            <summary>
            PortSet used for first phase of service start.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspOperationQueuingPolicy">
            <summary>
            Operation policy for queuing requests on service ports
            </summary>
            <remarks>Default behavior is to queue inbound operations with no constraints. 
            If no handler is attached for a given operation type this can lead to memory resource leaks, and the port queues growing without bounds.
            The policy is used to specify runtime behavior, so queue depths can be constrained, and replies can automatically be sent without ever invoking service code</remarks>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspOperationQueuingPolicy.None">
            <summary>
            No policy 
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspOperationQueuingPolicy.Default">
            <summary>
            Operations are queued with a default upper bound on queue depth and discard with fault
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspOperationQueuingPolicy.ConstrainDepth">
            <summary>
            Policy is enforced using an upper bound on queue depth
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspOperationQueuingPolicy.DiscardWithFault">
            <summary>
            Fault responses will automatically be sent, when the upper bound is reached
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspOperationQueuingPolicy.IgnoreWhenReceiversAttached">
            <summary>
            If there are no receivers attached to the port, no queueing policy is applied (no depth limit is enforced)
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration">
            <summary>
            Advanced configuration of operation ports used for inbound messages
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.DefaultQueueDepthLimit">
            <summary>
            Default queue depth limit on all operation ports configured for inbound messages
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.QueuingPolicy">
            <summary>
            Queuing policy
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.QueueDepthLimitsPerOperationType">
            <summary>
            Maximum queue depth for each operation type in the operations port. Valid when the ConstrainDepth flag is used
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.PortInstanceToQueueDepth">
            <summary>
            Used to quickly lookup a depth limit for a given port within the dssp operations PortSet
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspOperationQueuingPolicy,Microsoft.Ccr.Core.IPortSet,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initialization constructor
            </summary>
            <param name="policy">Queuing policy flags</param>
            <param name="dsspOperationPort">Service operation port</param>
            <param name="queueDepthLimitsPerOperationTypeName">Table of DsspOeration type names from the DsspOperation port set, and their respective queue depth limits</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspOperationQueuingPolicy,Microsoft.Ccr.Core.IPort,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="policy">Queuing policy flags</param>
            <param name="dsspOperationPort">Dssp operation port instance for this port configuration</param>
            <param name="queueDepthLimit">Maximum queue depth for all operations in the operation port</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.IDsspSubscribeOperation">
            <summary>
            Required for all implementations of the Dssp Subscribe operation type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.IDsspSubscribeOperation.NotificationPort">
            <summary>
            Notification target port
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.IDsspSubscribeOperation.NotificationPortConfiguration">
            <summary>
            Notification port configuration
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.IDsspSubscribeOperation.NotificationShutdownPort">
            <summary>
            Notification shutdown port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.IDsspUnknownResponseOperation">
            <summary>
            Required for all DsspOperations where the response type is unknown at the time of the request
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.IDsspUnknownResponseOperation.ExpectedResponse">
            <summary>
            Type of response instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspOperation">
            <summary>
            Common base class for all Dssp Operation types. 
            Dss infrastructure uses information in this type to forward messages between services
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.CopyHeaders(Microsoft.Dss.ServiceModel.Dssp.DsspOperation)">
            <summary>
            Shallow copy of headers from the source operation
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.#ctor(System.String,System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="action"></param>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.#ctor(System.String,System.Object,Microsoft.Ccr.Core.IPort)">
            <summary>
            Initialization constructor
            </summary>
            <param name="action"></param>
            <param name="body">Request body.</param>
            <param name="response"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.AddHeader(System.Object)">
            <summary>
            Adds a SOAP Header instance
            </summary>
            <param name="header">Serializable header</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.GetHeader(System.Type)">
            <summary>
            Retrieve a SOAP header instance, if present. Return null otherwise
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.ReplaceHeader(System.Type,System.Object)">
            <summary>
            Replace a SOAP header instance, if present. Add it otherwise
            </summary>
            <param name="type"></param>
            <param name="header">SOAP Header instance</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.GetHeader``1">
            <summary>
            Retrieve a SOAP header instance, if present. Return null otherwise
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.RemoveHeader``1">
            <summary>
            Remove a SOAP header instance, if present
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.ConvertToNotification">
            <summary>
            Converts request to an outbound notification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.ConvertToNotification(Microsoft.Dss.ServiceModel.Dssp.NotificationHeader)">
            <summary>
            Converts request to an outbound notification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.Clone">
            <summary>
            Used when an outbound forwarder is not ready and we have to enqueue a copy of the 
            request.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.Action">
            <summary>
            Dssp Action
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.Body">
            <summary>
            Operation Body 
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.RetryCount">
            <summary>
            Retry count for outbound request. Its not guaranteed to work across all transports
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.DefaultShortTimeSpan">
            <summary>
            Default short operation timespan
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.DefaultLongTimeSpan">
            <summary>
            Default long operation timespan
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.TimeSpan">
            <summary>
            Expected Timespan of this operation. If no response is received within the specified time, the runtime will respond with a timeout Fault.
            </summary>
            <remarks>If Set Dss will track timeout and issue a fault on the response port when timeout occurs.</remarks>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.Causalities">
            <summary>
            If true, the forwarders will capture the current causalities and will automatically
            propagate to them errors that occur while processing this outbound request.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.ResponsePort">
            <summary>
            Operation response port.
            </summary>
            <remarks>Set this field to null if this operation instance does not require a response</remarks>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.HasHeaders">
            <summary>
            Checks if the operation has Soap headers attached
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.Headers">
            <summary>
            Serializable Soap header collection.
            </summary>        
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.SourceUri">
            <summary>
            Gets the source uri of the service that sent the message. Can be null.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation.Timestamp">
            <summary>
            Gets the time the message was sent. Will be equal to Timestamp.MinValue if not set.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspOperation`2">
            <summary>
            Strongly typed <see cref="T:Microsoft.Dss.ServiceModel.Dssp.DsspOperation"/>
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation`2.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation`2.#ctor(System.String,`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="action"></param>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspOperation`2.#ctor(System.String,`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="action"></param>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation`2.Body">
            <summary>
            Operation Body
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspOperation`2.ResponsePort">
            <summary>
            Response PortSet
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Create`2">
            <summary>
            Create operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Create`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Create`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Create`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Delete`2">
            <summary>
            Delete operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Delete`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Delete`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Delete`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Drop`2">
            <summary>
            Drop operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Drop`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Drop`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Drop`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Get`2">
            <summary>
            Get operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Get`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Get`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Get`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Insert`2">
            <summary>
            Insert operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Insert`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Insert`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Insert`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Lookup`2">
            <summary>
            Lookup operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Lookup`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Lookup`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Lookup`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Query`2">
            <summary>
            Query operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Query`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Query`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Query`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Replace`2">
            <summary>
            Replace operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Replace`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Replace`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Replace`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Submit`2">
            <summary>
            Submit operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Submit`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Submit`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Submit`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Subscribe`2">
            <summary>
            Subscribe operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Subscribe`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Subscribe`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Subscribe`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Subscribe`2.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.Subscribe`2.NotificationPort">
            <summary>
            Port to use for receiving notifications from service this Subscribe targets
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.Subscribe`2.NotificationShutdownPort">
            <summary>
            Port used for shutting down the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.Subscribe`2.NotificationPortConfiguration">
            <summary>
            Optional. Advanced configuration options for notification port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Subscribe`3">
            <summary>
            Subscribe operation with strongly typed notification target port
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <typeparam name="TNotification"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Subscribe`3.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Subscribe`3.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Subscribe`3.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Subscribe`3.#ctor(`0,`1,`2)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
            <param name="notificationPort"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Update`2">
            <summary>
            Update operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Update`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Update`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Update`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Upsert`2">
            <summary>
            Upsert operation
            </summary>
            <typeparam name="TBody"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Upsert`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Upsert`2.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.Upsert`2.#ctor(`0,`1)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.Services.FileStore.FileStoreCreate">
            <summary>
            Creates a file store internal service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.FileStore.FileStoreCreate.#ctor(System.Uri,Microsoft.Dss.Services.FileStore.FileStorePort)">
            <summary>
            Constructor
            </summary>
            <param name="path"></param>
            <param name="storePort"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.FileStore.FileStoreCreate.Path">
            <summary>
            local file path, must be a child of InstancePaths
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.FileStore.FileStoreCreate.StorePort">
            <summary>
            Port instance that will be used to communicate with FileStore process
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.FileStore.FileStoreCreate.ResultPort">
            <summary>
            Result PortSet
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.FileStore.FileStoreConstructorPort">
            <summary>
            Port for interacting with File Store Constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.FileStore.WriteFromMemory">
            <summary>
            Writes to the store use the supplied stream
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.FileStore.WriteFromMemory.#ctor(System.IO.MemoryStream)">
            <summary>
            Initialization constructor
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.FileStore.WriteFromMemory.Stream">
            <summary>
            Source stream
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.FileStore.WriteFromMemory.WriteLengthAsHeader">
            <summary>
            If true, a 8 byte header with the data length is written before the stream contents
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.FileStore.WriteFromMemory.Length">
            <summary>
            Data length
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.FileStore.WriteObject">
            <summary>
            Writes to the store by serializing the supplied object
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.FileStore.WriteObject.#ctor(System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.FileStore.WriteObject.Data">
            <summary>
            Object to serialize to the store
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.FileStore.Flush">
            <summary>
            flushes the store
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.FileStore.FileStorePort">
            <summary>
            Port for interacting with File Store Constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Contracts">
            <summary>
            Dss internal only. Contract identifiers for Dss internal services
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.CommonPrefix">
            <summary>
            Dss internal use. Contract identifier prefix for Dss core services
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.BaseUriResolver">
            <summary>
            Uri Resolver 
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.ResourceManager">
            <summary>
            Resource Manager 
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.WinForms">
            <summary>
            Winforms Service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.WinFormsException">
            <summary>
            Winforms Service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.Serializer">
            <summary>
            Serializer
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.InternalConstructor">
            <summary>
            Internal Service Constructor
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.FileStoreConstructor">
            <summary>
            File Store
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.SerializerForwarder">
            <summary>
            SOAP Serialization forwarder
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.SoapDsspForwarder">
            <summary>
            DSSP Forwarder
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.DiagnosticsForwarder">
            <summary>
            Diagnostics Forwarder
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.SecurityForwarder">
            <summary>
            Security Forwarder
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.DsspSecurity">
            <summary>
            Key Manager
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.Dss">
            <summary>
            Common Dss service contract identifier
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Contracts.VersionInformation">
            <summary>
            Version information file
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.TS">
            <summary>
            Common TraceSwitch types for logging of trace messages.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.TS.DssPrefix">
            <summary>
            Common prefix
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.TS.Core">
            <summary>
            Trace group for all internal services and core runtime components
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.TS.Services">
            <summary>
            Trace group for all Dss services
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.TS.Transports">
            <summary>
            Trace group for all transports
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.TS.Forwarders">
            <summary>
            Trace group for all message forwarders
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.TS.Test">
            <summary>
            Trace flag for test services
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DssCoreLogCategories">
            <summary> Dss Core Logging categories </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCoreLogCategories.ExceptionWritingServiceStatePathsFile">
            <summary> Exception occured writing service state paths file </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCoreLogCategories.ExceptionLoadingContractDirectoryStateFile">
            <summary> Exception occured loading contract directory state file </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssCoreLogCategories.ExceptionValidatingServiceSearchPaths">
            <summary> Exception occured validating service search paths </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LayoutPaths">
            <summary>
            Initialized with local file system paths to common Dss file system directories
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.BinDir">
            <summary>
            Sub-directory with core runtime components
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.CFBinDir">
            <summary>
            Sub-directory with CF runtime components
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.CFDeployRootDir">
            <summary>
            Root directory for a DSS node when deployed on a CE device
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.CFDeployBinDir">
            <summary>
            Sub-directory with CF runtime components when deployed on a CE device
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.ServiceDir">
            <summary>
            Sub-directory with all service assemblies
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.ConfigDir">
            <summary>
            Dss service configuration directory
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.StoreDir">
            <summary>
            Sub-directory for various media, HTML transforms and other misc. documents
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.StyleDir">
            <summary>
            Store Sub-directory for HTML style sheets
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.LogDir">
            <summary>
            Store Sub-directory for all message logs
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.TransformDir">
            <summary>
            Store Sub-directory for HTML and XML transforms
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.MediaDir">
            <summary>
            Store Sub-directory for media files
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.CacheDir">
            <summary>
            Store Sub-directory for runtime cache files
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.SchemaDir">
            <summary>
            Sub-directory for schema files
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.SampleDir">
            <summary>
            Sub-directory for sample source code and configuration files
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.ServiceSearchPaths">
            <summary>
            Contract directory state file
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LayoutPaths.LicenseDir">
            <summary>
            Sub-directory for licenses.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.LayoutPaths.FindRootPath(System.String@)">
            <summary>
            Find the root DSS directory from a file or directory reference.
            </summary>
            <param name="path">When successful, path updated to point to the root DSS directory</param>
            <returns>true if the path is valid</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.LayoutPaths.NormalizeDirectory(System.String,System.String)">
            <summary>
            Return a normalized directory name
            </summary>
            <param name="directory"></param>
            <param name="root"></param>
            <returns>null when invalid</returns>
        </member>
        <member name="P:Microsoft.Dss.Core.LayoutPaths.ContractDirectoryCache">
            <summary>
            File path of contract directory cache
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.LayoutPaths.HostSpecifiedRootDir">
            <summary>
            Optional. Fully qualified root path set by the Dss host executable
            </summary>
            <remarks>If set this directory becomes the RootDir for the node. 
            It is only read once before runtime initialization.</remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.LayoutPaths.RootDir">
            <summary>
            Root directory for Dss node
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.LayoutPaths.LocalBinPath">
            <summary>
            Fully qualified local bin path
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ServicePaths">
            <summary>
            URI prefix definitions for HTTP mappings of local file system directory. Path components 
            are relative to URI of the current node.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.MountPoint">
            <summary>
            Root prefix mapped to root installation directory
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.Store">
            <summary>
            Prefix mapped to Store file system sub-directory
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.Styles">
            <summary>
            Prefix mapped to Store\Styles file system sub-directory
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.Transforms">
            <summary>
            Prefix mapped to Store\Transforms file system sub-directory
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.InstanceDirectory">
            <summary>
            Prefix for Service Instance Directory (core Dss service)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.Constructor">
            <summary>
            Prefix for Service Instance Directory (core Dss service)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.NodeDirectory">
            <summary>
            Prefix for DSS Node Instance Directory
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.ContractDirectory">
            <summary>
            Prefix for Service Contract Directory (core Dss service)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.ControlPanel">
            <summary>
            Prefix for Control Panel Service (core Dss service)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.ConsoleOutput">
            <summary>
            Prefix for Console Output Service (core Dss service)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DefaultTarget">
            <summary>
            Prefix for Default Target Service (core Dss service). Handles all requests to unknown URIs
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.RuntimeDiagnostics">
            <summary>
            Prefix for Runtime Diagnostics service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.ResourceManagerDiagnostics">
            <summary>
            Prefix for raw resource manager statistics
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.EmbeddedResources">
            <summary>
            Prefix for service assembly embedded resources manager
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DssRuntimeEmbeddedResourcesPrefix">
            <summary>
            Prefix for core Dss embedded resources
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DssTestEmbeddedResourcesPrefix">
            <summary>
            Prefix for Dss test embedded resources
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.ManifestLoaderClient">
            <summary>
            Prefix for Manifest Loader Client service (core Dss Service)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.RawRepresentationPostfix">
            <summary>
            Postfix for URIs requesting raw XML represenatations of services
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DssServiceInstanceSuffix">
            <summary>
            Suffix appended to all service instance uris, used by dss runtime for per-instance helper services
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DssServiceInstanceContractSuffix">
            <summary>
            Suffix appended to all service instance uris, providing list of main and alternate contracts for the service by contract.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DssServiceInstancePartnerManagerSuffix">
            <summary>
            Suffix appended to all service instance uris, providing list of partners for the service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DssServiceInstanceContractSummarySuffix">
            <summary>
            Suffix appended to all service instance uris, providing list of partners for the service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DssServiceInstanceInfoSuffix">
            <summary>
            Suffix appended to all service instance uris, providing the same result as a DSSP Lookup
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DssServiceInstanceSubscriptionManagerSuffix">
            <summary>
            Suffix appended to service instance uris with a subscription manager partner
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.DssServiceInstanceNotificationTargetSuffix">
            <summary>
            Suffix appended to a notification target on the behalf of a service that issues a
            Subscribe DsspOperation
            </summary>
            <remarks>
            The lifetime of the notification target service is managed by the Dss runtime
            through the subscribe operation configuration
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.ServicePaths.HasRawRepresentationPostfix(System.Uri)">
            <summary>
            Inspects a URI for whether it ends with the RawRepresentationPostfix
            </summary>
            <param name="address">URI to inspect</param>
            <returns>True if address ends with the RawRepresentationPostfix</returns>
        </member>
        <member name="F:Microsoft.Dss.Core.ServicePaths.ContractDirectoryState">
            <summary>
            Prefix for Contract Directory state file
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Schemes">
            <summary>
            URI schemes supported by Dss
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Schemes.Http">
            <summary>
            Support for the "http" URI scheme
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Schemes.Https">
            <summary>
            Support for the "https" URI scheme
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Schemes.DsspTcp">
            <summary>
            Support for the "dssp.tcp" URI scheme 
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Schemes.DsspUdp">
            <summary>
            Support for the "dssp.tcp" URI scheme 
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DssRuntimeAssemblyNames">
            <summary>
            Common assembly names and locations
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.CcrCoreName">
            <summary>
            Assembly name of Microsoft.Ccr.Core
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.CcrCoreLocation">
            <summary>
            Assembly location of Microsoft.Ccr.Core
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.CcrAdaptersIOName">
            <summary>
            Assembly name of Microsoft.Ccr.Adapters.IO
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.CcrAdaptersIOLocation">
            <summary>
            Assembly location of Microsoft.Ccr.Adapters.IO
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.CcrAdaptersWinFormsName">
            <summary>
            Assembly name of Microsoft.Ccr.Adapters.WinForms
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.CcrAdaptersWinFormsLocation">
            <summary>
            Assembly location of Microsoft.Ccr.Adapters.WinForms
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssBaseName">
            <summary>
            Assembly name of Microsoft.Dss.Base
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssBaseLocation">
            <summary>
            Assembly location of Microsoft.Dss.Base
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssToolsName">
            <summary>
            Assembly name of Microsoft.Dss.Tools
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssToolsLocation">
            <summary>
            Assembly location of Microsoft.Dss.Tools
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssRuntimeName">
            <summary>
            Assembly name of Microsoft.Dss.Runtime
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssRuntimeLocation">
            <summary>
            Assembly location of Microsoft.Dss.Runtime
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssRuntimeProxyName">
            <summary>
            Assembly name of Microsoft.Dss.Runtime.Proxy
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssRuntimeProxyLocation">
            <summary>
            Assembly location of Microsoft.Dss.Runtime.Proxy
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssRuntimeTransformName">
            <summary>
            Assembly name of Microsoft.Dss.Runtime.Transform
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssRuntimeTransformLocation">
            <summary>
            Assembly location of Microsoft.Dss.Runtime.Transform
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssTestName">
            <summary>
            Assembly name of Microsoft.Dss.Test
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssTestLocation">
            <summary>
            Assembly location of Microsoft.Dss.Test
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssTestProxyName">
            <summary>
            Assembly name of Microsoft.Dss.Test.Proxy
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssTestProxyLocation">
            <summary>
            Assembly location of Microsoft.Dss.Test.Proxy
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssTestTransformName">
            <summary>
            Assembly name of Microsoft.Dss.Test.Transform
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssTestTransformLocation">
            <summary>
            Assembly location of Microsoft.Dss.Test.Transform
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssEnvironmentName">
            <summary>
            Assembly name of Microsoft.Dss.Environment
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.DssEnvironmentLocation">
            <summary>
            Assembly location of Microsoft.Dss.Environment
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.ProxySuffix">
            <summary>
            Assembly name suffix for DSS proxy assemblies
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.TransformSuffix">
            <summary>
            Assembly name suffix for DSS transform assemblies
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.GlobalAssemblyCachePath">
            <summary>
            Root GAC directory path
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeAssemblyNames.PublicKeyKeyDirectory">
            <summary>
            Runtime public key token derived directory for assemblies in te GAC
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeAssemblyNames.CheckIfTransformOrProxy(System.String)">
            <summary>
            True if file path contains the transform or proxy filename suffix
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeAssemblyNames.CheckIfProxy(System.String)">
            <summary>
            True if file path contains proxy filename suffix
            </summary>
            <param name="filePath">lower case valid file path</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeAssemblyNames.CheckIfTransform(System.String)">
            <summary>
            True if file path contains transform filename suffix
            </summary>
            <param name="filePath">lower case valid file path</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeAssemblyNames.GetServiceAssemblySearchPaths">
            <summary>
            Gets the directories in which the dss runtime searches for services
            </summary>
            <returns>service directories</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeAssemblyNames.GetServiceAssemblySearchPaths(System.String)">
            <summary>
            Gets the directories in which the dss runtime searches for service
            <remarks>
            This method is useful for tools that have to enumerate services that are not in their own
            installation, e.g. visual studio wizards etc
            </remarks>
            </summary>
            <param name="installDir">the dss installation directory</param>
            <returns>service directories</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeAssemblyNames.LoadAndValidateServiceSearchPaths(System.Collections.Generic.List{System.String}@)">
            <summary>
            Reads and validate the XML file that contains which directories to
            search for service binaries. We dont deserialize to speedup load times. We instead use an XML reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeAssemblyNames.LoadAndValidateServiceSearchPaths(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Reads and validate the XML file that contains which directories to
            search for service binaries. We dont deserialize to speedup load times. We instead use an XML reader.
            This makes this code fragile so any changes to ContractDirectory.State must be reflected here
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeAssemblyNames.ValidateServiceSearchPaths(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Prepare state
            <remarks>
            1. Initialize _state if it is null
            2. Initialize LocalSearch and RemoteSearch if they are null
            3. Add BinPath and ServicePath if they are not already in the list
            4. If running remotely, add the remote path if not already in RemoteSearch
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Transforms.TransformBase">
            <summary>
            Dss internal use. Holds conversion tables for converting proxy types to service types 
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(System.Type,Microsoft.Dss.Core.Attributes.Transform)">
            <summary>
            Add a source type transform to proxy
            </summary>
            <param name="sourceType"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(System.Type,Microsoft.Dss.Core.Attributes.Transform)">
            <summary>
            Add a proxy type transform back to source
            </summary>
            <param name="proxyType"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Transforms.TransformBase.ProxyToSourceTransform(System.Type)">
            <summary>
            Get the Proxy To Source Transform for proxyType
            </summary>
            <param name="proxyType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Transforms.TransformBase.SourceToProxyTransform(System.Type)">
            <summary>
            Get the Source To Proxy Transform for sourceType
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpRequestType">
            <summary>
            Http request wrapper
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttp.HttpRequestType.Context">
            <summary>
            HttpListener context
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttp.HttpRequestType.IsLocal">
            <summary>
            Is this request from the machine on which the node is running.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpResponseType">
            <summary>
            Http response wrapper
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpResponseType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpResponseType.#ctor(System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpResponseType.#ctor(System.Net.HttpStatusCode,System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="statusCode"></param>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpResponseType.#ctor(System.Net.HttpStatusCode,System.Object,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="statusCode"></param>
            <param name="body">Request body.</param>
            <param name="xslTransform"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpResponseType.#ctor(System.Net.HttpStatusCode,System.Object,System.String,System.Boolean)">
            <summary>
            Initialization constructor
            </summary>
            <param name="statusCode"></param>
            <param name="body">Request body.</param>
            <param name="xslTransform"></param>
            <param name="serverTransform">Server Translation</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpResponseType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttp.HttpResponseType.ServerTransform">
            <summary>
            Xslt applied from server
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttp.HttpResponseType.Body">
            <summary>
            Structured response instance
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttp.HttpResponseType.XslTransform">
            <summary>
            Xslt to apply on response
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttp.HttpResponseType.StatusCode">
            <summary>
            Http status code to use for response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.DsspHttpOperations">
            <summary>
            DsspHttp operations port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpGetRequestType">
            <summary>
            DsspHttp Get request body
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpGet">
            <summary>
            Inbound HttpGet. Dss Internal Use.
            </summary>
            <remarks>
            Operation is instantiated within the infrastructure in response to external HTTP requests
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpGet.#ctor(Microsoft.Dss.Core.DsspHttp.HttpGetRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Core.DsspHttp.HttpResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpGet.#ctor(Microsoft.Dss.Core.DsspHttp.HttpGetRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpGet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType">
            <summary>
            Dss Internal Use. DsspHttp Query request body
            </summary>    
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType.Query">
            <summary>
            Query collection extracted from http request URL
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpQuery">
            <summary>
            Dss Internal Use. DsspHttp Query
            </summary>
            <remarks>
            Operation is instantiated within the infrastructure in response to external HTTP requests
            </remarks> 
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpQuery.#ctor(Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Core.DsspHttp.HttpResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpQuery.#ctor(Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpDeleteRequestType">
            <summary>
            Dss Internal Use. DsspHttp Delete request body
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpDelete">
            <summary>
            Dss Internal Use. DsspHttp Delete
            </summary>
            <remarks>
            Operation is instantiated within the infrastructure in response to external HTTP requests
            </remarks> 
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpDelete.#ctor(Microsoft.Dss.Core.DsspHttp.HttpDeleteRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Core.DsspHttp.HttpResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpDelete.#ctor(Microsoft.Dss.Core.DsspHttp.HttpDeleteRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpDelete.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpPutRequestType">
            <summary>
            Dss Internal Use. DsspHttp Put request body
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpPut">
            <summary>
            Dss Internal Use. DsspHttp Put
            </summary>
            <remarks>
            Operation is instantiated within the infrastructure in response to external HTTP requests
            </remarks> 
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpPut.#ctor(Microsoft.Dss.Core.DsspHttp.HttpPutRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Core.DsspHttp.HttpResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpPut.#ctor(Microsoft.Dss.Core.DsspHttp.HttpPutRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpPut.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpPostRequestType">
            <summary>
            Dss Internal Use. DsspHttp Post request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DsspHttp.HttpPostRequestType.SoapActionFormParameterName">
            <summary>
            Post form parameter name indicating post contains a Dssp action value
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DsspHttp.HttpPostRequestType.DsspOperationBodyTypeParameterName">
            <summary>
            Post form parameter name associated with a type name for the body of the dssp operation
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpPost">
            <summary>
            Dss Internal Use. DsspHttp Post
            </summary>
            <remarks>
            Operation is instantiated within the infrastructure in response to external HTTP requests
            </remarks> 
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpPost.#ctor(Microsoft.Dss.Core.DsspHttp.HttpPostRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Core.DsspHttp.HttpResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpPost.#ctor(Microsoft.Dss.Core.DsspHttp.HttpPostRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpPost.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpOptionsRequestType">
            <summary>
            Dss Internal Use. DsspHttp Option request body
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttp.HttpOptions">
            <summary>
            Dss Internal Use. DsspHttp Options
            </summary>
            <remarks>
            Operation is instantiated within the infrastructure in response to external HTTP requests
            </remarks> 
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpOptions.#ctor(Microsoft.Dss.Core.DsspHttp.HttpOptionsRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Core.DsspHttp.HttpResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpOptions.#ctor(Microsoft.Dss.Core.DsspHttp.HttpOptionsRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttp.HttpOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup">
            <summary>
            Default Dssp Lookup
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup.#ctor(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.LookupResponse,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup.#ctor(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup.#ctor">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop">
            <summary>
            Default Dssp Drop
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop.#ctor(Microsoft.Dss.ServiceModel.Dssp.DropRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop.#ctor(Microsoft.Dss.ServiceModel.Dssp.DropRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop.Instance">
            <summary>
            Standard Drop Message
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultGet">
            <summary>
            Default Dssp Get
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultGet.#ctor(System.Type,Microsoft.Ccr.Core.PortSet{W3C.Soap.Fault,System.Object})">
            <summary>
            Initialization constructor
            </summary>
            <param name="responseType"></param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultGet.#ctor(Microsoft.Dss.ServiceModel.Dssp.GetRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="requestType"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultGet.#ctor(System.Type)">
            <summary>
            Initialization constructor
            </summary>
            <param name="responseType"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultGet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultGet.ExpectedResponse">
            <summary>
            Required. Indicates to Dss infrastructure what the expected type of the Get is, so it can convert as appropriate to proxy or service type
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultCreate">
            <summary>
            Default Dssp Create
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultCreate.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.CreateResponse,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultCreate.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultCreate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultReplace">
            <summary>
            Dssp Default Replace
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultReplace.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultReplace.#ctor(System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultReplace.#ctor(System.Object,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultInsert">
            <summary>
            Dssp Default Insert
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultInsert.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultInsert.#ctor(System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultInsert.#ctor(System.Object,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultUpdate">
            <summary>
            Dssp Default Update
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultUpdate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultUpdate.#ctor(System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultUpdate.#ctor(System.Object,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDelete">
            <summary>
            Dssp Default Delete
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDelete.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDelete.#ctor(System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDelete.#ctor(System.Object,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body.</param>
            <param name="responsePort">Port on which the response (success or failure) is to be sent.</param>
        </member>
        <member name="T:Microsoft.Dss.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.CmdUtil_ProcessIsStillRunningException">
            <summary>
              Looks up a localized string similar to The process is still running.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrContractMismatch">
            <summary>
              Looks up a localized string similar to {0} class has contract {1} while its service has contract {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrDataContractMustBePublic">
            <summary>
              Looks up a localized string similar to DataContract class {0} must be public!.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrDssCategoryMustBeUri">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; cannot be used as category identifier. It is not a valid URI..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrDssServicesMayNotContainWriteablePublicStaticMembers">
            <summary>
              Looks up a localized string similar to Dss Services may not contain writeable public static members: {0}.{1}.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrInvalidContractIdentifier">
            <summary>
              Looks up a localized string similar to Missing Contract() class with public const string Identifier..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrMismatchedDataContract">
             <summary>
               Looks up a localized string similar to Mismatched DssContract on [DataContract] attribute of: {0}
                DataContract namespace = &quot;{2}&quot;,
                Class namespace   = &quot;{1}&quot;
            .
             </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrNonGenericPortsetsNotSupportedInVB">
            <summary>
              Looks up a localized string similar to *** Error: Non-Generic PortSet&apos;s are not supported in Visual Basic..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrObsoleteDataContract_NamespaceParm">
            <summary>
              Looks up a localized string similar to {0} Namespace parameter on [DataContract] is obsolete..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.Error_DssHostCantRunFromRaw">
            <summary>
              Looks up a localized string similar to DssHost may not be run from the intermediate build directory!.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrProgrammaticDsspHttpRequestsNotSupported">
            <summary>
              Looks up a localized string similar to HttpRequest operations are for internal use only and can only originate from outside the node, from a non DSS component.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrSearchingByCategoryNotImplemented">
            <summary>
              Looks up a localized string similar to Searching by Category is not implemented!.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrServicePortOnWrongClass">
            <summary>
              Looks up a localized string similar to *** [ServicePort] applied to the wrong class! .
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrTargetLanguageNotSupported">
            <summary>
              Looks up a localized string similar to Target programming language not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrUnableToLoadAssembly">
            <summary>
              Looks up a localized string similar to Unable to load assembly .
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrUnableToLoadPublicFieldType">
            <summary>
              Looks up a localized string similar to Unable to load public Field type {0} in {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrUnableToLoadPublicPropertyType">
            <summary>
              Looks up a localized string similar to Unable to load public Property type {0} in {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrUnableToLoadServiceSummaryFromProxy">
            <summary>
              Looks up a localized string similar to *** Error: Could not load service Summary from proxy..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.ErrUnableToRemoveDuplicateAssembly">
            <summary>
              Looks up a localized string similar to Unable to remove a duplicate assembly which also exists in the bin directory.  This assembly may have been copied by a project reference with the Copy Local property set to &apos;True&apos;.  Set Copy Local to &apos;False&apos;.  Assembly: .
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.FileSchemeNotSupportedException">
            <summary>
              Looks up a localized string similar to Uri scheme for files is not supported. This can be caused when attempting to access files outside the scope of the mount point service.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.InfoSkipProcessingNamespace">
            <summary>
              Looks up a localized string similar to skip {0} in non-Dss namespace {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.NoServiceSummariesFound">
            <summary>
              Looks up a localized string similar to The assembly does not contain DSS Service Summaries.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.PublishAttribute_InvalidGroup">
            <summary>
              Looks up a localized string similar to [Publish(Group = &quot;{0}&quot;)] is an invalid group..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.SubcribeMissingNotificationPortException">
            <summary>
              Looks up a localized string similar to Subscribe Operation must have a valid NotificationTargetPort instance.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.TransportForUriSchemeNotFoundException">
            <summary>
              Looks up a localized string similar to Transport not found in local ServiceEnvironment instance, for scheme:.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.UnableToFindRootDirectory">
            <summary>
              Looks up a localized string similar to Unable to find DSS root directory\n. If DssEnvironment is hosted from within an AppDomain, or an unmanaged environment, then HostRootDir MUST be specified in the runtime configuration..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Properties.Resources.UnableToResolveAssemblyToLocation">
            <summary>
              Looks up a localized string similar to Unable to resolve assembly {0} to location {1}.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Manifest.Contract">
            <summary>
            Contract class with service identifier
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Manifest.Contract.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Manifest.ServiceRecordType">
            <summary>
            Service creation record
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType">
            <summary>
            Service instance information. 
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="contract"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="contract"></param>
            <param name="service"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To ServiceInfoType
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.Deserialize(System.IO.BinaryReader)">
            <summary>
            BInary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.ToPartner(System.Xml.XmlQualifiedName)">
            <summary>
            Creates a partner information instance from the current service info instance, using the supplied name
            </summary>
            <param name="qualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.HttpUri">
            <summary>
            (Obsolete) Return the http uri for this ServiceInfoType
            </summary>
            <returns>null when no http Uri is available</returns>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.Contract">
            <summary>
            Service contract identifier
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.Service">
            <summary>
            Service instance URI
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.AliasList">
            <summary>
            List of service instance URIs, one per transport service is bound to
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.PartnerList">
            <summary>
            List of partners
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType.HttpServiceAlias">
            <summary>
            Searches the AliasList for an HTTP or HTTPS service alias. Returns null if one is not present
            </summary>
            <remarks>The property does not cache the result from previous invokations so avoid calling it repeatedly</remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.Manifest.ServiceRecordType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To ServiceRecordType
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Manifest.ServiceRecordType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Manifest.ServiceRecordType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Manifest.ServiceRecordType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.Dss.Core.Manifest.ServiceRecordType.Name">
            <summary>
            Local name of this record used for partner pairing
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Manifest.ManifestType">
            <summary>
            Dss Service Manifest, used for instantiating services
            </summary>
            <remarks>Manifest instances can be read as serialized XML documents on node startup or send as messages to the ManifestLoaderClient</remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.Manifest.ManifestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Manifest.ManifestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Manifest.ManifestType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Manifest.ManifestType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To ManifestType
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Core.Manifest.ManifestType.CreateServiceList">
            <summary>
            List of services to create
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Schemas.PartnerListManager.Contract">
            <summary>
            Contract with identifier for Partner List Manager
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Schemas.PartnerListManager.Contract.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Schemas.PartnerListManager.QueryRequestType">
            <summary>
            Query request
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Schemas.PartnerListManager.QueryRequestType.CopyTo(Microsoft.Dss.Schemas.PartnerListManager.QueryRequestType)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Schemas.PartnerListManager.QueryRequestType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Schemas.PartnerListManager.QueryRequestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialize QueryRequestType
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Schemas.PartnerListManager.QueryRequestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialize QueryRequestType
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Schemas.PartnerListManager.QueryRequestType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To QueryRequestType
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Schemas.PartnerListManager.QueryRequestType.Name">
            <summary>
            Partner name to look for
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Schemas.PartnerListManager.QueryResponseType">
            <summary>
            Query response with partner that met query criteria
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Schemas.PartnerListManager.QueryResponseType.Partner">
            <summary>
            Partner information
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Schemas.PartnerListManager.UpdateRequestType">
            <summary>
            Update request
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Schemas.PartnerListManager.UpdateRequestType.Partner">
            <summary>
            Partners to update service state with
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Schemas.PartnerListManager.SubscribeRequestType">
            <summary>
            Subscribe request
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType">
            <summary>
            Subscribe request body type. Required base type for subscribe requests
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber">Service URI of subscriber</param>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.Subscriber">
            <summary>
            Service URI of subscriber
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.Expiration">
            <summary>
            Expiration of subscription request
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.NotificationCount">
            <summary>
            Number of notifications published before subscription is dropped
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.TypeFilter">
            <summary>
            Types to filter subscription on. The subscriber only receives notifications 
            with this body type. An empty list implies all notifications.
            </summary>
            <remarks>
            Types are specified as the concatenation of the Dssp Action (as an XML qualified name) 
            and the Dssp Body Type (as an XML qualified name), seperated with a "+"
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To SubscribeRequestType
            </summary>
            <param name="target"></param>
        </member>
        <member name="F:Microsoft.Dss.Schemas.PartnerListManager.SubscribeRequestType.Name">
            <summary>
            List of qualified partner names to subcribe for
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Schemas.PartnerListManager.SubscribeRequestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Schemas.PartnerListManager.SubscribeRequestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Schemas.PartnerListManager.SubscribeRequestType.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Schemas.PartnerListManager.SubscribeRequestType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:W3C.Soap.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:W3C.Soap.Contract.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="T:W3C.Soap.Header">
            <summary>
            Soap header
            </summary>
        </member>
        <member name="M:W3C.Soap.Header.CopyTo(W3C.Soap.Header)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.Header.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.Header.Any">
            <summary>
            Any content
            </summary>
        </member>
        <member name="T:W3C.Soap.Body">
            <summary>
            Soap body container
            </summary>
        </member>
        <member name="M:W3C.Soap.Body.CopyTo(W3C.Soap.Body)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.Body.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.Body.Any">
            <summary>
            Any content
            </summary>
        </member>
        <member name="T:W3C.Soap.Envelope">
            <summary>
            Soap envelope
            </summary>
        </member>
        <member name="M:W3C.Soap.Envelope.CopyTo(W3C.Soap.Envelope)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.Envelope.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.Envelope.Header">
            <summary>
            Header collection 
            </summary>
        </member>
        <member name="P:W3C.Soap.Envelope.Body">
            <summary>
            Body
            </summary>
        </member>
        <member name="P:W3C.Soap.Envelope.AnyAttr">
            <summary>
            List of attributes
            </summary>
        </member>
        <member name="T:W3C.Soap.FaultCodes">
            <summary>
            Known fault codes
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.DataEncodingUnknownString">
            <summary>
            Data encoding unknown
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.MustUnderstandString">
            <summary>
            Must understand
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.ReceiverString">
            <summary>
            Receiver
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.SenderString">
            <summary>
            Sender
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.VersionMismatchString">
            <summary>
            Version mismatch
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.DataEncodingUnknown">
            <summary>
            Data encoding unknown
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.MustUnderstand">
            <summary>
            Must understand
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.Receiver">
            <summary>
            Receiver
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.Sender">
            <summary>
            Sender
            </summary>
        </member>
        <member name="F:W3C.Soap.FaultCodes.VersionMismatch">
            <summary>
            Version mismatch
            </summary>
        </member>
        <member name="T:W3C.Soap.Subcode">
            <summary>
            Subcode
            </summary>
        </member>
        <member name="M:W3C.Soap.Subcode.CopyTo(W3C.Soap.Subcode)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.Subcode.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.Subcode.Value">
            <summary>
            Sub code value
            </summary>
        </member>
        <member name="P:W3C.Soap.Subcode.SubcodeValue">
            <summary>
            Subcode
            </summary>
        </member>
        <member name="T:W3C.Soap.FaultCode">
            <summary>
            Fault code
            </summary>
        </member>
        <member name="M:W3C.Soap.FaultCode.CopyTo(W3C.Soap.FaultCode)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.FaultCode.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.FaultCode.Value">
            <summary>
            Fault value
            </summary>
        </member>
        <member name="P:W3C.Soap.FaultCode.Subcode">
            <summary>
            Subcode
            </summary>
        </member>
        <member name="T:W3C.Soap.FaultReason">
            <summary>
            Fault reasons
            </summary>
        </member>
        <member name="M:W3C.Soap.FaultReason.CopyTo(W3C.Soap.FaultReason)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.FaultReason.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.FaultReason.ToString">
            <summary>
            Display the entire ReasonText
            </summary>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.FaultReason.Text">
            <summary>
            Reason Text
            </summary>
        </member>
        <member name="T:W3C.Soap.Detail">
            <summary>
            Detail for fault
            </summary>
        </member>
        <member name="M:W3C.Soap.Detail.CopyTo(W3C.Soap.Detail)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.Detail.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.Detail.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.Detail.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.Soap.Detail.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:W3C.Soap.Detail.Any">
            <summary>
            Any content
            </summary>
        </member>
        <member name="T:W3C.Soap.Fault">
            <summary>
            Soap Fault body
            </summary>
        </member>
        <member name="M:W3C.Soap.Fault.ToException">
            <summary>
            Creates an IOException instance from the fault body
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.Fault.FromCodeSubcode(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
            <summary>
            Creates fault from code qualified names
            </summary>
            <param name="code"></param>
            <param name="subcode"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.Fault.FromCodeSubcodeReason(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName,System.String)">
            <summary>
            Creates fault from code qualified names and reason text
            </summary>
            <param name="code"></param>
            <param name="subcode"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.Fault.FromException(System.Exception)">
            <summary>
            Creates fault from exception using FaultCodes.Receiver for Code. Subcode is null
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.Fault.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To Fault
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.Fault.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.Fault.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.Fault.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.Soap.Fault.ToString">
            <summary>
            Display Fault text
            </summary>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.Fault.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="P:W3C.Soap.Fault.Reason">
            <summary>
            Reasons
            </summary>
        </member>
        <member name="P:W3C.Soap.Fault.Node">
            <summary>
            Node
            </summary>
        </member>
        <member name="P:W3C.Soap.Fault.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="P:W3C.Soap.Fault.Detail">
            <summary>
            Detail
            </summary>
        </member>
        <member name="T:W3C.Soap.SoapFaultContext">
            <summary>
            SOAP fault context, used to wrap Fault instances
            </summary>
        </member>
        <member name="M:W3C.Soap.SoapFaultContext.#ctor(System.Xml.XmlQualifiedName,System.String,System.String,System.Xml.XmlQualifiedName[],System.String,System.String,System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="code"></param>
            <param name="reason"></param>
            <param name="reasonLanguageCode"></param>
            <param name="faultCodes"></param>
            <param name="node"></param>
            <param name="role"></param>
            <param name="detail"></param>
        </member>
        <member name="M:W3C.Soap.SoapFaultContext.#ctor(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="code"></param>
            <param name="subCode"></param>
            <param name="reason"></param>
        </member>
        <member name="M:W3C.Soap.SoapFaultContext.#ctor(W3C.Soap.Fault)">
            <summary>
            Initialization constructor
            </summary>
            <param name="fault"></param>
        </member>
        <member name="M:W3C.Soap.SoapFaultContext.#ctor(System.Exception)">
            <summary>
            Initialization constructor
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:W3C.Soap.SoapFaultContext.ToString">
            <summary>
            Converts fault codes to a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.SoapFaultContext.GenerateSubcodes(System.Xml.XmlQualifiedName[])">
            <summary>
            Populates underlying soap fault with fault codes
            </summary>
            <param name="faultCodes"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.SoapFaultContext.ParseSubcodes(W3C.Soap.Subcode)">
            <summary>
            Parses fault codes into a collection, from the array in the SoapFault instance
            </summary>
            <param name="faultCodes"></param>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.SoapFaultContext.Code">
            <summary>
            Fault Code
            </summary>
        </member>
        <member name="P:W3C.Soap.SoapFaultContext.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="P:W3C.Soap.SoapFaultContext.ReasonLanguageCode">
            <summary>
            Reason language (refer to SOAP specification for valid values)
            </summary>
        </member>
        <member name="P:W3C.Soap.SoapFaultContext.FaultCodes">
            <summary>
            Fault code collection
            </summary>
        </member>
        <member name="P:W3C.Soap.SoapFaultContext.Node">
            <summary>
            Node identifier
            </summary>
        </member>
        <member name="P:W3C.Soap.SoapFaultContext.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="P:W3C.Soap.SoapFaultContext.Detail">
            <summary>
            Detail
            </summary>
        </member>
        <member name="P:W3C.Soap.SoapFaultContext.SoapFault">
            <summary>
            Instance of Soap fault contained within this context
            </summary>
        </member>
        <member name="T:W3C.Soap.ReasonText">
            <summary>
            Reason text
            </summary>
        </member>
        <member name="M:W3C.Soap.ReasonText.CopyTo(W3C.Soap.ReasonText)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.ReasonText.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.ReasonText.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:W3C.Soap.ReasonText.Lang">
            <summary>
            Language
            </summary>
        </member>
        <member name="T:W3C.Soap.NotUnderstoodType">
            <summary>
            Not understood type
            </summary>
        </member>
        <member name="M:W3C.Soap.NotUnderstoodType.CopyTo(W3C.Soap.NotUnderstoodType)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.Soap.NotUnderstoodType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:W3C.Soap.NotUnderstoodType.QualifiedName">
            <summary>
            Qualified name
            </summary>
        </member>
        <member name="T:W3C.Soap.SupportedEnvironmentType">
            <summary>
            Supported environment type
            </summary>
        </member>
        <member name="M:W3C.Soap.SupportedEnvironmentType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.SupportedEnvironmentType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.Soap.SupportedEnvironmentType.Clone">
            <summary>
            Clone SupportedEnvironmentType
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.SupportedEnvironmentType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo SupportedEnvironmentType
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:W3C.Soap.SupportedEnvironmentType.QualifiedName">
            <summary>
            Qualified name
            </summary>
        </member>
        <member name="T:W3C.Soap.UpgradeType">
            <summary>
            Upgrade
            </summary>
        </member>
        <member name="M:W3C.Soap.UpgradeType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.UpgradeType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.Soap.UpgradeType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.Soap.UpgradeType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:W3C.Soap.UpgradeType.SupportedEnvelope">
            <summary>
            Supported envelope
            </summary>
        </member>
        <member name="T:W3C.WSAddressing.AttributedUri">
            <summary>
            Used to encapsulate a Uri
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.AttributedUri.Value">
            <summary>
            Uri 
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.AttributedUri.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To AttributedUri
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.WSAddressing.AttributedUri.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.AttributedUri.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.AttributedUri.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.AttributedUri.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.AttributedUri.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:W3C.WSAddressing.ReferencePropertiesType">
            <summary>
            Reference Properties
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.ReferencePropertiesType.Any">
            <summary>
            Any content
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.ReferencePropertiesType.CopyTo(W3C.WSAddressing.ReferencePropertiesType)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.WSAddressing.ReferencePropertiesType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:W3C.WSAddressing.ReferenceParametersType">
            <summary>
            Reference parameters
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.ReferenceParametersType.Any">
            <summary>
            Any content
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.ReferenceParametersType.CopyTo(W3C.WSAddressing.ReferenceParametersType)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.WSAddressing.ReferenceParametersType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:W3C.WSAddressing.AttributedQName">
            <summary>
            Qualified name
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.AttributedQName.Value">
            <summary>
            Qualified name
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.AttributedQName.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To AttributedQName
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.WSAddressing.AttributedQName.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.AttributedQName.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.AttributedQName.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.AttributedQName.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.AttributedQName.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:W3C.WSAddressing.ServiceNameType">
            <summary>
            Service and port name
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.ServiceNameType.Value">
            <summary>
            Service URI
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.ServiceNameType.PortName">
            <summary>
            Port name
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.ServiceNameType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To ServiceNameType
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.WSAddressing.ServiceNameType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.ServiceNameType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.ServiceNameType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:W3C.WSAddressing.EndpointReferenceType">
            <summary>
            Reference to a service endpoint
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReferenceType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To EndpointReferenceType
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReferenceType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReferenceType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReferenceType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReferenceType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReferenceType.#ctor(W3C.WSAddressing.AttributedUri)">
            <summary>
            Endpoint address 
            </summary>
            <param name="address"></param>
        </member>
        <member name="P:W3C.WSAddressing.EndpointReferenceType.Address">
            <summary>
            Endpoint address
            </summary>
        </member>
        <member name="P:W3C.WSAddressing.EndpointReferenceType.ReferenceProperties">
            <summary>
            Properties for this reference
            </summary>
        </member>
        <member name="P:W3C.WSAddressing.EndpointReferenceType.ReferenceParameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="P:W3C.WSAddressing.EndpointReferenceType.PortType">
            <summary>
            Port type
            </summary>
        </member>
        <member name="P:W3C.WSAddressing.EndpointReferenceType.ServiceName">
            <summary>
            Service name
            </summary>
        </member>
        <member name="P:W3C.WSAddressing.EndpointReferenceType.AnyAttr">
            <summary>
            Any attributes
            </summary>
        </member>
        <member name="P:W3C.WSAddressing.EndpointReferenceType.Any">
            <summary>
            Any content
            </summary>
        </member>
        <member name="T:W3C.WSAddressing.Relationship">
            <summary>
            Relationship between two messages
            </summary>
            <summary>
            Relationship of this message with a previous message
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.Relationship.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.Relationship.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.Relationship.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.Relationship.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To Relationship
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.WSAddressing.Relationship.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.Relationship.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <remarks>A null relationship type indicates RelationshipTypeValues.Reply</remarks>
            <param name="value"></param>
        </member>
        <member name="M:W3C.WSAddressing.Relationship.#ctor(System.String,System.Xml.XmlQualifiedName)">
            <summary>
            Initialization constructor
            </summary>
            <param name="value"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="P:W3C.WSAddressing.Relationship.Value">
            <summary>
            Relationship
            </summary>
        </member>
        <member name="P:W3C.WSAddressing.Relationship.RelationshipType">
            <summary>
            Relationship type
            </summary>
        </member>
        <member name="T:W3C.WSAddressing.RelationshipTypeValues">
            <summary>
            Known relationships
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.RelationshipTypeValues.ReplyString">
            <summary>
            String version of Reply qualified name
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.RelationshipTypeValues.Reply">
            <summary>
            Reply message
            </summary>
        </member>
        <member name="T:W3C.WSAddressing.ReplyAfterType">
            <summary>
            Reply after header
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.ReplyAfterType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To ReplyAfterType
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.WSAddressing.ReplyAfterType.Clone">
            <summary>
            Creates a Clone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.ReplyAfterType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.ReplyAfterType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:W3C.WSAddressing.ReplyAfterType.Value">
            <summary>
            Uri
            </summary>
        </member>
        <member name="T:W3C.WSAddressing.WsAddressingFaultSubcodeValues">
            <summary>
            Well known fault subcodes
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.InvalidMessageInformationHeaderString">
            <summary>
            Invalid header string
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.MessageInformationHeaderRequiredString">
            <summary>
            Missing header string
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.DestinationUnreachableString">
            <summary>
            Destination could not be reached
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.ActionNotSupportedString">
            <summary>
            Action not supported string
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.EndpointUnavailableString">
            <summary>
            Endpoint unavailable string
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.InvalidMessageInformationHeader">
            <summary>
            Invalid header
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.MessageInformationHeaderRequired">
            <summary>
            Missing header
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.DestinationUnreachable">
            <summary>
            Destination could not be reached
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.ActionNotSupported">
            <summary>
            Action not supported
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WsAddressingFaultSubcodeValues.EndpointUnavailable">
            <summary>
            Endpoint unavailable
            </summary>
        </member>
        <member name="T:W3C.WSAddressing.EndpointReference">
            <summary>
            Endpoint reference
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReference.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReference.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReference.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.EndpointReference.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To EndpointReference
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:W3C.WSAddressing.MessageId">
            <summary>
            Message unique identifier
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.MessageId.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.MessageId.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.MessageId.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.MessageId.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To MessageId
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:W3C.WSAddressing.MessageId.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.MessageId.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:W3C.WSAddressing.To">
            <summary>
            Service target
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.To.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.To.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.To.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.To.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.To.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:W3C.WSAddressing.Action">
            <summary>
            Action URI
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.Action.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.Action.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.Action.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.Action.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.Action.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:W3C.WSAddressing.From">
            <summary>
            From service URI
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.From.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.From.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.From.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:W3C.WSAddressing.ReplyTo">
            <summary>
            Address of service for the reply
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.ReplyTo.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.ReplyTo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.ReplyTo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.ReplyTo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.ReplyTo.#ctor(W3C.WSAddressing.AttributedUri)">
            <summary>
            Initialization constructor
            </summary>
            <param name="address"></param>
        </member>
        <member name="T:W3C.WSAddressing.FaultTo">
            <summary>
            If reply is Fault, address of service to send fault to
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.FaultTo.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.FaultTo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:W3C.WSAddressing.FaultTo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:W3C.WSAddressing.FaultTo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:W3C.WSAddressing.FaultTo.#ctor(W3C.WSAddressing.AttributedUri)">
            <summary>
            Initialization constructor
            </summary>
            <param name="address"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Contract">
            <summary>
            Contains contract identifier for a service, also used as XML namespace for serialization
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Contract.Identifier">
            <summary>
            The XML Namespace URI of the service. The XML Namespace URI is a globally unique URI
            that identifies the properties of a service in terms of the content model of its
            state and its behavior.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspActions">
            <summary>
            Identifies the SOAP Actions defined by DSSP. All DSSP SOAP messages carries one
            of the Action values defined here.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.CreateRequest">
            <summary>
            The Create Request Action identifies a request for creating a new instance of a service.
            The parameters in the Create request carries the information needed to create a service.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.CreateResponse">
            <summary>
            The Create Response Action identifies a successful response to a Create Request message.
            The parameters in the Create response carries detailed information about the newly created
            service.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.DeleteRequest">
            <summary>
            The Delete Request Action identifies a request for deleting a part of the current state 
            of a service. The parameters in the request carries the detailed information about which part
            or parts to delete.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.DeleteResponse">
            <summary>
            Response to Delete Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.DropRequest">
            <summary>
            The Drop Request Action identifies a request for shutting down a service instance
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.DropResponse">
            <summary>
            Response to Drop Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.GetRequest">
            <summary>
            The Get Request Action identifies a request to retrieve the entire state of a service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.GetResponse">
            <summary>
            Response of Get Action. The body of this action must be an instance of the service state type
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.InsertRequest">
            <summary>
            The Insert Request Action identifies a request to insert aadditional resource into a service instance, augmenting its state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.InsertResponse">
            <summary>
            Response of Insert Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.LookupRequest">
            <summary>
            The Lookup Request Action identifies a request to recover metadata about the service instance.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.LookupResponse">
            <summary>
            Response of Lookup Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.NotifyRequest">
            <summary>
            The Notify Request Action identifies a request that has been converted to a notification and contains
            an additional SOAP header with the source Action that caused this notification
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.NotifyResponse">
            <summary>
            Optional Response of Notify Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.QueryRequest">
            <summary>
            Query Request Action identifies a request for a portion of the service state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.QueryResponse">
            <summary>
            Response of Query Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.ReplaceRequest">
            <summary>
            Replace Request Action identifies a request for updating the entire service state atomically (in one step)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.ReplaceResponse">
            <summary>
            Response of Replace Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.SubmitRequest">
            <summary>
            Submit Request Action identifies a request for processing that has no direct state side effects
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.SubmitResponse">
            <summary>
            Response of Submit Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.SubscribeRequest">
            <summary>
            Subscribe Request Action identifies a request for listening for state change notifications
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.SubscribeResponse">
            <summary>
            Response of Subscribe Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.UpdateRequest">
            <summary>
            Update Request Action identifies a request for changing portion of the service state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.UpdateResponse">
            <summary>
            Response of Update Action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.UpsertRequest">
            <summary>
            Upsert Request Action identifies a request updating service state if the target of the 
            modification is present on the state. If its not, the request will be equivalent to an Insert request, adding resources to the state.
            The check is done atomically with the insert or update action on the state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspActions.UpsertResponse">
            <summary>
            Response of Upsert Action
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.PartnerListType">
            <summary>
            List of Partners, also used as the state type for the Partner List Manager service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerListType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To PartnerListType
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerListType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerListType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary serialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerListType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary deserialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.PartnerListType.PartnerList">
            <summary>
            Collection of Partners
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.PartnerType">
            <summary>
            Contains information on a service partner
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerType.#ctor(System.Xml.XmlQualifiedName,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name"></param>
            <param name="contract"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerType.#ctor(System.Xml.XmlQualifiedName,System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name"></param>
            <param name="contract"></param>
            <param name="service"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.PartnerType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.PartnerType.Name">
            <summary>
            Qualified partner name 
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.PartnerType.ServiceDirectory">
            <summary>
            Service Directory to use for finding this partner (Absolute URI)
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.PartnerType.ServiceName">
            <summary>
            Name of the service record to use as partner. 
            If no ServiceName is provided Name is used to select the partner.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType">
            <summary>
            Default response for Delete
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType.Clone">
            <summary>
            Returns the global instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DropRequestType">
            <summary>
            A request to drop the service.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DropRequestType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DropRequestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DropRequestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DropRequestType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DropRequestType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType">
            <summary>
            Default response for Drop
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.GetRequestType">
            <summary>
            Required Get body type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.GetRequestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.GetRequestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.GetRequestType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.GetRequestType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.GetRequestType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType">
            <summary>
            Default response for Insert
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.LookupRequestType">
            <summary>
            Required Lookup request body type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.LookupRequestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.LookupRequestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.LookupRequestType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.LookupRequestType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.LookupRequestType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DefaultQueryResponseType">
            <summary>
            Default response for Query
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultQueryResponseType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultQueryResponseType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultQueryResponseType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultQueryResponseType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DefaultQueryResponseType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType">
            <summary>
            Default response for Replace
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType">
            <summary>
            Default response for submit
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType">
            <summary>
            Reliable subscription request body type
            </summary>
            <remarks>Use this request type when subscriptions need to be handled reliably. 
            The subscription manager service will handle reliable subscriptions so any failure to deliver notifications is discoverable and any temporary failure to reach a subscriber is dealt with a delayed retry</remarks>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber">Service URI of subscriber</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.#ctor(System.String,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber">Service URI of subscriber.</param>
            <param name="suspensionInterval">Interval to suspend notifications to a subscriber that can not be reached.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.#ctor(System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="suspensionInterval"></param>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.SuspensionInterval">
            <summary>
            Interval to suspend notifications to a subscriber that can not be reached
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.CopyTo(Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType)">
            <summary>
            Copy
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.InternalCopyTo(Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType)">
            <summary>
            Copy
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType">
            <summary>
            Default response to Subscribe. Required base type for Subscribe responses
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriptionManager"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriptionManager"></param>
            <param name="subscriber"></param>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType.SubscriptionManager">
            <summary>
            URI of subscription manager service that will be handling this subscription
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType.Subscriber">
            <summary>
            URI of subscriber service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To SubscribeResponseType
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyOnAction">
            <summary>
            Service state caching and persistance policy for a given DSSP action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyOnAction.None">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyOnAction.LastUpdateThreshold">
            <summary>
            Provide latest state and refresh cache if change occured since a specified time
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyOnAction.ApplyXmlTransform">
            <summary>
            Apply XSLT transform on the response path
            </summary>
            <remarks>Applicable on operations that get or query state through an XML enabled transport</remarks>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyOnAction.SuppressRefresh">
            <summary>
            Do not refresh state cache (if caching is enabled)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyOnAction.PersistState">
            <summary>
            If action was succesfull, persist runtime state so its available across service instances.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyHeader">
            <summary>
            SOAP header indicating service state behavior for inbound DSSP operation 
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyHeader.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyOnAction,System.DateTime)">
            <summary>
            Initialization constructor
            </summary>
            <param name="policy"></param>
            <param name="lastUpdateThreshold">Determines if cache update will occur. If last update was before this DateTime, cache refresh must happen</param>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyHeader.Policy">
            <summary>
            Service state policy in reaction to inbound operation
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyHeader.LastUpdate">
            <summary>
            Time threshold for providing either a cached version or the most recent state
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyHeader.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyHeader.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyHeader.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.ServiceStatePolicyHeader.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DiagnosticsHeader">
            <summary>
            header used for selective (Opt-in) message capture and tracing
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DiagnosticsHeader.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DiagnosticsHeader.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DiagnosticsHeader.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DiagnosticsHeader.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.NodeShutdownHeader">
            <summary>
            header present drop operations initiated for node shutdown
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NodeShutdownHeader.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NodeShutdownHeader.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NodeShutdownHeader.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NodeShutdownHeader.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader">
            <summary>
            SOAP notification header required for Notify dssp operations
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="action">Forwarded Dssp action</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.#ctor(System.String[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="keyList">Key values, expressed as an array of strings, characterizing this notification</param>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.ForwardedAction">
            <summary>
            Source Dssp operation that is the root cause of this notification
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.ClientUri">
            <summary>
            URI of notification target (subscriber)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.KeyList">
            <summary>
            List of keys used to tag this notification, so a filter can be applied on the subscription manager
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.NotificationHeader.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To NotificationHeader
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType">
            <summary>
            Default response for update
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType">
            <summary>
            Default response for Upsert
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType.Instance">
            <summary>
            Shared instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes">
            <summary>
            Dssp SOAP Fault codes
            </summary>
            <remarks>These fault codes should be used the SubCode in the SOAP fault instance, with SOAP defined faults used as the primary FaultCode</remarks>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.ResponseTimeoutString">
            <summary>
            Response timed out
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.OperationFailedString">
            <summary>
            Operation failed
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.InsufficientResourcesString">
            <summary>
            Operation failed due to insufficient resources
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.OperationCanceledString">
            <summary>
            Operation was canceled
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.ActionNotSupportedString">
            <summary>
            Operation was not supported by service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.MessageNotSupportedString">
            <summary>
            Dssp operation body type was not supported
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.DuplicateEntryString">
            <summary>
            Insert Dssp operation failed due to duplicate found in state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.UnknownEntryString">
            <summary>
            Query, Upsert or Update Dssp operation failed because entry was not found
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.QueuingLimitExceededString">
            <summary>
            Dssp operation failed because queuing policy on target port exceeded limit
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.PermissionDeniedString">
            <summary>
            Dssp operation failed because the user did not have permission for the requested action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.ResponseTimeout">
            <summary>
            Response timed out
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.OperationFailed">
            <summary>
            Operation failed
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.InsufficientResources">
            <summary>
            Operation failed due to insufficient resources
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.OperationCanceled">
            <summary>
            Operation was canceled
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.ActionNotSupported">
            <summary>
            Operation was not supported by service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.MessageNotSupported">
            <summary>
            Dssp operation body type was not supported
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.DuplicateEntry">
            <summary>
            Insert Dssp operation failed due to duplicate found in state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.UnknownEntry">
            <summary>
            Query, Upsert or Update Dssp operation failed because entry was not found
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.QueuingLimitExceeded">
            <summary>
            Dssp operation failed because queuing policy on target port exceeded limit
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.DsspFaultCodes.PermissionDenied">
            <summary>
            Dssp operation failed because the user did not have permission for the requested action
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.Partners">
            <summary>
            Qualified names for common service partner roles. Can be used to assign a semantic to partner entries
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.TargetServiceString">
            <summary>
            String representation of TargetService partnership.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.StateServiceString">
            <summary>
            String representation of StateService partnership.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.ConstructorServiceString">
            <summary>
            String representation of the ConstructorService partnership.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.PartnerListServiceString">
            <summary>
            String representation of the PartnerListService partnership.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.CreatorServiceString">
            <summary>
            String representation of the CreatorService partnership.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.SubscriptionManagerString">
            <summary>
            Used for partners that manage subscriptions for this service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.ContractDirectoryServiceString">
            <summary>
            String representation of ContractDirectoryService partnership.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.InstanceDirectoryServiceString">
            <summary>
            String representation of InstanceDirectoryService partnership.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.PrimaryContractService">
            <summary>
            This partner relationship is used by services that implement alternate contracts. Any ServiceInfoType instance for the alternate service will contain this
            partner pointing to the primary contract service instance. 
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.AlternateContractService">
            <summary>
            This partner relationship is used by services that implement alternate contracts. Any ServiceInfoType instance for the primary service will contain this
            partner pointing to the alternate contract service instance(s). 
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.TargetService">
            <summary>
            Generic partner that can be used by services to identify services that are targets of operations.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.StateService">
            <summary>
            Standard name for services that provide initial state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.ConstructorService">
            <summary>
            This partner represents the service constructor instance used for creating services in this node. It is automatically assigned when
            constructing new service instances.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.PartnerListService">
            <summary>
            This partner represents the service instance managing the partners for a service instance. It is automatically assigned when creating new
            service instances.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.CreatorService">
            <summary>
            This partner represents a service that initiated creation of this service, for example by sending a CREATE request to the constructor
            service.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.SubscriptionManager">
            <summary>
            Used for partners that manage subscriptions for this service.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.ContractDirectoryService">
            <summary>
            Partner relationship with the contract directory service for this node.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.Partners.InstanceDirectoryService">
            <summary>
            Partner relationship with the instance directory service for this node.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.MessageTimestamp">
            <summary>
            Dss internal use. SOAP Header used for request timestamps
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.Dssp.MessageTimestamp.Value">
            <summary>
            Time request was sent from the service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.MessageTimestamp.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.MessageTimestamp.#ctor(System.DateTime)">
            <summary>
            Initialization constructor
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.MessageTimestamp.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.MessageTimestamp.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.MessageTimestamp.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.MessageTimestamp.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To MessageTimestamp
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.CreateResponse">
            <summary>
            Default Response for Create
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.CreateResponse.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.CreateResponse.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="contract"></param>
            <param name="service"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.CreateResponse.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="serviceInfo"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.CreateResponse.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.CreateResponse.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.Dssp.LookupResponse">
            <summary>
            Default response for Lookup
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.LookupResponse.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.LookupResponse.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="contract"></param>
            <param name="service"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.LookupResponse.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.LookupResponse.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.Dssp.LookupResponse.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:W3C.WSAddressing.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.Contract.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="T:W3C.WSAddressing.WellKnownUris">
            <summary>
            well known Uris
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WellKnownUris.AnonymousRole">
            <summary>
            Anonymous Addressing role
            </summary>
        </member>
        <member name="F:W3C.WSAddressing.WellKnownUris.FaultAction">
            <summary>
            Fault action
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo">
            <summary>
            Represents a collection of services and their data types
            <remarks>
            An assembly service info contains all services reflected from the same assembly
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.GetTypeDeclaration(Microsoft.Dss.Core.ContractModel.DataContractReference)">
            <summary>
            Finds the declaring contract model element for a referenced type;
            </summary>
            <param name="reference">type reference</param>
            <returns>the types contract model element or null if the type is not declared in the service assembly</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.Serializer">
            <summary>
            Gets the XML serializer that can be used to serialize and deserialize an instance of <code>AssemblyServiceInfo</code>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.Assembly">
            <summary>
            Gets or sets the assembly of the service summary
            <remarks>
            This is the assembly from which the service where reflected
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.UsesProxyNamespaces">
            <summary>
            Gets or sets a value that indicates whether the namespace of the names in the service summary contain the Proxy suffix
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.ServiceContracts">
            <summary>
            Gets the services in the summary
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.DataContracts">
            <summary>
            Gets the data contracts in the summary
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.Resources">
            <summary>
            Gets the embedded resources in the assembly that are exported using the Microsoft.Dss.Core.Attributes.EmbeddedResourceAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.ServiceSummaries">
            <summary>
            Gets or sets the service summaries
            <remarks>
            The service summary is a subset of the types in the contract model but also has additional information
            about types in difference assemblies.
            This is the meta data that is included in the proxy.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyServiceInfo.ServiceTypeRegistrationRequired">
            <summary>
            Gets or sets a value that indicates whether the service assembly contains types that are excluded from
            the proxy but are used as data contracts.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.AssemblyInfo">
            <summary>
            Represents information about the assembly from which the service summary was reflected.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.AssemblyInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.FullName">
            <summary>
            Gets or sets the full name of the assembly.
            <remarks>
            Use the AssemblyName property!
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Name">
            <summary>
            Gets the short name of the assembly
            <remarks>
            This is usually the filename without the .dll extension
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.AssemblyName">
            <summary>
            Gets or sets the name of the assembly
            </summary>
            <remarks>
            This does not exist on .Net Compact Framework.
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Company">
            <summary>
            Gets or sets the company
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Product">
            <summary>
            Gets or sets the product name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Copyright">
            <summary>
            Gets or sets the copyright
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Trademark">
            <summary>
            Gets or sets the trademark
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Title">
            <summary>
            Gets or sets the title of the assembly
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.Description">
            <summary>
            Gets or sets the description of the assembly
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.AssemblyInfo.ClsCompliant">
            <summary>
            Gets or sets a value that indicates whether the assembly is CLS compliant
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.Contract">
            <summary>
            Contains the identifier of the namespace for the elements of the Dss Contract Model
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.Contract.Identifier">
            <summary>
            Identifier of the namespace for the elements of the Dss Contract Model
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ContractElement">
            <summary>
            Base class for elements of data contracts, service contracts and data members
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.CommentedElement">
            <summary>
            Base class for elements that can have xml doc comments
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.CommentedElement.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.CommentedElement.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.CommentedElement.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.CommentedElement.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.CommentedElement.Comment">
            <summary>
            Gets or sets the comment
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ContractElement.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ContractElement.CopyToContractElement(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ContractElement.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ContractElement.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ContractElement.DisplayName">
            <summary>
            Gets or sets the display name of the contract element
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ContractElement.Description">
            <summary>
            Gets or sets the description of the contract element
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ContractElement.IsBrowsable">
            <summary>
            Gets or sets a value that indicates whether the contract element is visable is design tools
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ContractElement.ClsCompliant">
            <summary>
            Gets or sets a value that indicates whether the assembly is CLS compliant
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.XmlDocComment">
            <summary>
            Contains the xml doc comment
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.XmlDocComment.op_Implicit(System.Xml.XmlNode[])~Microsoft.Dss.Core.ContractModel.XmlDocComment">
            <summary>
            Converts an XmlNode array into a XmlDocComment model element
            </summary>
            <param name="nodes">nodes of the xml doc comment</param>
            <returns>an instance of XmlDocComment containing the specified comment</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.XmlDocComment.FromXml(System.Xml.XmlNode[])">
            <summary>
            Creates a new instance of XmlDocComment from xml
            </summary>
            <param name="nodes">the xml nodes of the doc comment</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.XmlDocComment.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.XmlDocComment.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.XmlDocComment.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.XmlDocComment.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.XmlDocComment.Comment">
            <summary>
            Gets or sets the xml nodes of the doc comment
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ClsCompliantInfo">
            <summary>
            Represents information about the CLS compliance of an assembly or member
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ClsCompliantInfo.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>cloned instancce</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ClsCompliantInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ClsCompliantInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ClsCompliantInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ClsCompliantInfo.IsCompliant">
            <summary>
            Gets or sets a value that indicates whether the annotated element is cls compliant
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DataContractKind">
            <summary>
            Represents the kind of a data contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DataContractKind.ReferenceType">
            <summary>
            Data contract is a reference type (e.g. class)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DataContractKind.ValueType">
            <summary>
            Data contract is a value type (e.g. struct)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DataContractKind.AbstractReferenceType">
            <summary>
            Data contract is an abstract reference type (e.g. abstract class)
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DataContractBase">
            <summary>
            Base class for data contracts
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractBase.ShouldSerializeDeclaringContract">
            <summary>
            Gets a value that indicates whether to serialize the <code>DeclaringContract</code> property
            </summary>
            <returns>true if the property should be serialized, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractBase.ShouldSerializeTypeReference">
            <summary>
            Gets a value that indicates whether to serialize the <code>TypeReference</code> property
            </summary>
            <returns>true if the property should be serialized, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractBase.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractBase.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractBase.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractBase.Namespace">
            <summary>
            Gets the namespace of the type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractBase.Name">
            <summary>
            Gets the name of the type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractBase.FullName">
            <summary>
            Gets or sets the fully qualified type name of the data contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractBase.XmlNamespace">
            <summary>
            Gets or sets the xml namespace of the data contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractBase.DeclaringContract">
            <summary>
            Gets or sets the declaring contract of data contract.
            <remarks>
            This value is only set if the contract is different from the xml namespace
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractBase.XmlName">
            <summary>
            Gets or sets the xml name of the data contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractBase.BaseType">
            <summary>
            Gets or sets the base type of the data contract.
            <remarks>
            For <code>EnumDataContract</code> this is the underlying type and must be an integer type.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractBase.TypeReference">
            <summary>
            Gets or sets the reference that can be used to refer to the type of the data contract
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DataContractInfo">
            <summary>
            Represents a data contract
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractInfo.ShouldSerializeMembers">
            <summary>
            Gets a value that indicates whether to serialize the <code>Members</code> property
            </summary>
            <returns>true if the property should be serialized, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractInfo.Kind">
            <summary>
            Gets or sets the kind of the data contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractInfo.IsSealed">
            <summary>
            Gets or sets a value that indicates wether the type is sealed
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractInfo.Members">
            <summary>
            Gets the members of the data contract
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.EnumerationDataContractInfo">
            <summary>
            Represents an enumeration as data contract
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationDataContractInfo.ShouldSerializeValues">
            <summary>
            Gets a value that indicates whether to serialize the <code>Values</code> property
            </summary>
            <returns>true if the property should be serialized, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationDataContractInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationDataContractInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationDataContractInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationDataContractInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.EnumerationDataContractInfo.CanCombineValues">
            <summary>
            Gets a value that indicates whether the enumeration value can be used as flags
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.EnumerationDataContractInfo.Values">
            <summary>
            Gets the values of the enumeration
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DsspOperationContractInfo">
            <summary>
            Represents a DSS message type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationContractInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationContractInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationContractInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationContractInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DsspOperationContractInfo.Action">
            <summary>
            Gets or sets the action of the DSSP operation
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.PortSetContractInfo">
            <summary>
            Represents a PortSet
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.PortSetContractInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DataContractBaseCollection">
            <summary>
            Represents a list of data contracts
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractBaseCollection.#ctor">
            <summary>
            Creates a new instance of <code>DataContractCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractBaseCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.DataContractBase})">
            <summary>
            Creates a new instance of <code>DataContractCollection</code>
            </summary>
            <param name="items">the items with which to initialize the list</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DataContractReference">
            <summary>
            Represents the reference to a data type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractReference.ShouldSerializeGenericArguments">
            <summary>
            Gets a value that indicates whether to serialize the <code>GenericArguments</code> property
            </summary>
            <returns>true if the property should be serialized, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractReference.Equals(System.Object)">
            <summary>
            Compares two the current instance with another instance
            </summary>
            <param name="obj">instance to compare with</param>
            <returns>true if two instances refer to the same type, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractReference.GetHashCode">
            <summary>
            Gets the hashcode for the current instance
            </summary>
            <returns>instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractReference.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractReference.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractReference.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractReference.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractReference.Name">
            <summary>
            Gets the name of the data type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractReference.Namespace">
            <summary>
            Gets the namespace of the data type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractReference.FullName">
            <summary>
            Gets or sets the fully qualified name of the referenced type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractReference.AssemblyName">
            <summary>
            Gets or sets the name of the assembly in which the data type is defined. 
            This property is <code>null</code> if the type is in the same assembly as the reference.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractReference.DeclaringContract">
            <summary>
            Gets or sets the identifier of the DSS namespace
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractReference.ArrayRank">
            <summary>
            Gets or sets the dimension of the array if the type is an array type.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractReference.IsConvertedToProxy">
            <summary>
            Gets or sets a value that indicates whether the type reference has been automatically converted
            to its proxy type.
            <remarks>
            This information is not serialized and is only availabe when the service summary has been reflected
            directly of an assembly. It is not part of service summaries stored in proxy assemblies.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataContractReference.GenericArguments">
            <summary>
            Gets the list of type parameters if the type is a generic type
            </summary>        
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DataContractReferenceCollection">
            <summary>
            Represents a list of data contract references
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractReferenceCollection.#ctor">
            <summary>
            Creates a new instance of <code>DataContractReferenceCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataContractReferenceCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.DataContractReference})">
            <summary>
            Creates a new instance of <code>DataContractReferenceCollection</code>
            </summary>
            <param name="items">the items whith which to initialize the collection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DataMemberCollection">
            <summary>
            Represents a list of data members
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataMemberCollection.#ctor">
            <summary>
            Creates a new instance of <code>DataMemberCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataMemberCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.DataMemberInfo})">
            <summary>
            Creates a new instance of <code>DataMemberCollection</code>
            </summary>
            <param name="items">the items whith which to initialize the collection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DataMemberKind">
            <summary>
            Specifies the kind of a data member
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DataMemberKind.Property">
            <summary>
            Data member is a property
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DataMemberKind.Field">
            <summary>
            Data member is a field
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DataMemberKind.Constant">
            <summary>
            Data member is a constant
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DataMemberInfo">
            <summary>
            Represents a data member
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataMemberInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataMemberInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataMemberInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DataMemberInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.Name">
            <summary>
            Gets or sets the name of the data member
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.NameInProxy">
            <summary>
            Gets the name of the member in the proxy
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.XmlNamespace">
            <summary>
            Gets or sets the Xml namespace of the data member
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.XmlName">
            <summary>
            Gets or sets the xml name of the data member
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.MemberType">
            <summary>
            Gets or sets the type of the data member
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.IsRequired">
            <summary>
            Gets or sets a value that indicates whether the data member is required
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.IsVirtual">
            <summary>
            Gets or sets a value that indicates whether the member override virtual member of a base class
            or can be overriden by a subclass
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.Order">
            <summary>
            Gets or sets the order of the data member in the data contract
            <remarks>
            TODO: need to figure out what that things actually does
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.XmlAttribute">
            <summary>
            Gets a sets a value that indicates whether the data member is serialized as xml attribte
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.XmlInlineList">
            <summary>
            Gets a sets a value that indicates whether the data member is serialized as xml inline list
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.XmlOmitDefaultValue">
            <summary>
            Gets a sets a value that indicates whether the data member is not serialized when set to its default value
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.XmlText">
            <summary>
            Gets a sets a value that indicates whether the data member is serialized as inline text
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.XmlAnyElement">
            <summary>
            Gets or sets a value that indicates whether to treat the member as xml
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.Kind">
            <summary>
            Gets or sets the kind of the data member
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.ConstantValue">
            <summary>
            Gets or sets the value of the constant
            <remarks>
            The property is ignore if <code>Kind</code> is <code>DataMemberKind.Constant</code>
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DataMemberInfo.ConstructorParameter">
            <summary>
            Gets or sets the settings for the constructor parameter.
            <remarks>Set the property to null if the member is not a constructor parameter</remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ConstructorParameterSettings">
            <summary>
            Indicates the constructor parameter settings of a data member
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ConstructorParameterSettings.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ConstructorParameterSettings.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ConstructorParameterSettings.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ConstructorParameterSettings.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ConstructorParameterSettings.Order">
            <summary>
            Gets or sets the order of the parameter
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.EnumerationValueInfo">
            <summary>
            Represent a value in an enumeration
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationValueInfo.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationValueInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationValueInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationValueInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.EnumerationValueInfo.Name">
            <summary>
            Gets or sets the name of the enumeration value
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.EnumerationValueInfo.Value">
            <summary>
            Gets or sets the value of the enumeration value
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.EnumerationValueInfo.ClsCompliant">
            <summary>
            Gets or sets the CLS compliant info
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.EnumerationValueInfoCollection">
            <summary>
            Represents a list of enumeration values
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationValueInfoCollection.#ctor">
            <summary>
            Creates a new instance of <code>EnumerationValueInfoCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.EnumerationValueInfoCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.EnumerationValueInfo})">
            <summary>
            Creates a new instance of <code>EnumerationValueInfoCollection</code>
            </summary>
            <param name="items">the items whith which to initialize the collection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ResourceInfo">
            <summary>
            Represents an embedded resource
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ResourceInfo.CopyTo(System.IO.Stream)">
            <summary>
            Copies the content of the resource to a stream
            </summary>
            <param name="stream">stream into which to copy the resource</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ResourceInfo.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ResourceInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ResourceInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ResourceInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ResourceInfo.IsLinkedResource">
            <summary>
            Gets or sets a value that indicates whether the resource is a linked resource or an embedded resource
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ResourceInfo.Name">
            <summary>
            Gets or sets the name of the resource
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ResourceInfo.ContentAsBase64">
            <summary>
            Gets or sets the content of the embedded resource in base 64 encoding
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ResourceInfo.Content">
            <summary>
            Gets or sets the content of the embedded resource
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ResourceInfoCollection">
            <summary>
            Represents a list of resources
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ResourceInfoCollection.#ctor">
            <summary>
            Creates a new instance of <code>ResourceInfoCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ResourceInfoCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.ResourceInfo})">
            <summary>
            Creates a new instance of <code>ResourceInfoCollection</code>
            </summary>
            <param name="items">the items with which to initialize the list</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServiceInfoBase">
            <summary>
            Base class for ServiceContractInfo and ServiceSummary
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.ShouldSerializePartners">
            <summary>
            Gets a value that indicates whether to serialize the Partners property
            </summary>
            <returns>a value that indicates whether to serialize the Partners property</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.ShouldSerializeCategories">
            <summary>
            Gets a value that indicates whether to serialize the Categories property
            </summary>
            <returns>a value that indicates whether to serialize the Categories property</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.CopyServiceInfoBase(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the properties of ServiceInfoBase to the target instance
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.Namespace">
            <summary>
            Gets the namespace in which the service is defined
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.Name">
            <summary>
            Gets the name of the implementation class
            <remarks>
            If <code>HasImplementation</code> is <code>false</code>, this is the last segment of the namespace
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.FullName">
            <summary>
            Gets or sets the name of the service
            <remarks>
            I the service has an implementation class this is the fullname of the class,
            otherwise it is the namespace in which the service is defined.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.ContractIdentifier">
            <summary>
            Gets or sets the identifier of the contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.HasImplementation">
            <summary>
            Gets or sets a value that indicates whether the contract describes an abstract service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.Partners">
            <summary>
            Gets the partners of the service
            <remarks>
            This list is empty if the <code>IsAbstract</code> property is <code>true</code>
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.Categories">
            <summary>
            Gets the categories of the service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.ActivationSettings">
            <summary>
            Gets or sets the settings with which to activate an instance of the service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.InitialStatePartner">
            <summary>
            Gets or sets the configuration of the initial state partner
            <remarks>The value of the property is <code>null</code> if the service doesn't have an initial state partner</remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceInfoBase.AdditionalDescription">
            <summary>
            Gets or sets additional description for the service such as URL.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServiceContractInfo">
            <summary>
            Represents a service contract
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceContractInfo.ShouldSerializeAlternatePorts">
            <summary>
            Gets a value that indicates whether to serialize the AlternatePorts property
            </summary>
            <returns>a value that indicates whether to serialize the AlternatePorts property</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceContractInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceContractInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceContractInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceContractInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceContractInfo.OperationsPort">
            <summary>
            Gets or sets the operations port of the service
            <remarks>
            This must be an instance of <code>AlternateServicePort</code> if the main port of the service is defined by an alternate contract
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceContractInfo.AlternatePorts">
            <summary>
            Gets the alternate service ports of the service
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DssCategoryInfo">
            <summary>
            Represents a dss category
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DssCategoryInfo.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DssCategoryInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DssCategoryInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DssCategoryInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DssCategoryInfo.Identifier">
            <summary>
            Gets or sets the indentifier of the category
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DssCategoryInfoCollection">
            <summary>
            Represents a list of dss categories
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DssCategoryInfoCollection.#ctor">
            <summary>
            Creates a new instance o <code>DssCategoryInfoCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DssCategoryInfoCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.DssCategoryInfo})">
            <summary>
            Creates a new instance of <code>DssCategoryInfoCollection</code>
            </summary>
            <param name="items">the items with which to initialize the collection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServiceContractInfoCollection">
            <summary>
            Represents a list of service contracts
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceContractInfoCollection.#ctor">
            <summary>
            Creates a new instance o <code>ServiceContractCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceContractInfoCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.ServiceContractInfo})">
            <summary>
            Creates a new instance of <code>ServiceContractCollection</code>
            </summary>
            <param name="items">the items with which to initialize the collection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServicePortInfo">
            <summary>
            Represent a service port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortInfo.CopyToServicePortInfo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServicePortInfo.IsAlternatePort">
            <summary>
            Gets a value that indicates whether this instance represents an alternate port
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServicePortInfo.ContractIdentifier">
            <summary>
            Gets or sets the identifier of the alternate contract if the port is an alternate service port.
            <remarks>
            The value is <code>null</code> if the port is the main port of the service and defined in the service contract
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServicePortInfo.Prefix">
            <summary>
            Gets or sets the prefix of the service port
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServicePortInfo.PortType">
            <summary>
            Gets or sets the type of the service port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServicePortInfoCollection">
            <summary>
            Represents a list of service ports
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortInfoCollection.#ctor">
            <summary>
            Creates a new instance of <code>ServicePortInfoCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortInfoCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.ServicePortInfo})">
            <summary>
            Create a new instance of <code>ServicePortInfoCollection</code>
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.InitialStatePartnerInfo">
            <summary>
            Represents a service contract
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.InitialStatePartnerInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.InitialStatePartnerInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.InitialStatePartnerInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.InitialStatePartnerInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.InitialStatePartnerInfo.IsOptional">
            <summary>
            Gets a sets a value that indicates whether the initial state partner is optional
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.InitialStatePartnerInfo.DocumentUri">
            <summary>
            Gets or sets the uri that points to the document containing the initial state
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.PartnerInfo">
            <summary>
            Represents a partner of a service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.PartnerInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.PartnerInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.PartnerInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.PartnerInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.PartnerInfo.Name">
            <summary>
            Gets or sets the name of the partner
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.PartnerInfo.ContractIdentifier">
            <summary>
            Gets or sets the identifier of the contract that describes the service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.PartnerInfo.CreationPolicy">
            <summary>
            Gets or sets the creation policy of the partner
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.PartnerInfo.IsOptional">
            <summary>
            Gets or sets a value that indicates whether the partner is optional or not
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.PartnerInfoCollection">
            <summary>
            Represents a list of partners
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.PartnerInfoCollection.#ctor">
            <summary>
            Creates a new instance of <code>PartnerCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.PartnerInfoCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.PartnerInfo})">
            <summary>
            Creates a new instance of <code>PartnerCollections</code>
            </summary>
            <param name="items">the items with which to initialize the connection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServiceActivationInfo">
            <summary>
            Represents the activation settings for a service class
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceActivationInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceActivationInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceActivationInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceActivationInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceActivationInfo.ServiceImplementationClass">
            <summary>
            Gets or sets the name of the service implementation class
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceActivationInfo.ShareDispatcher">
            <summary>
            Gets or sets a value that indicates whether a service instance shares the dispatcher with other instance
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceActivationInfo.ExecutionUnits">
            <summary>
            Gets or sets the number of execution units for the service.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceActivationInfo.ResourceGroup">
            <summary>
            Gets or sets the name of the resource group in which the service share resources.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServiceDescriptionInfo">
            <summary>
            Represents the service description attribute
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceDescriptionInfo.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceDescriptionInfo.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceDescriptionInfo.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceDescriptionInfo.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceDescriptionInfo.ServiceInformationUri">
            <summary>
            Gets or sets the service information uri
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DsspAction">
            <summary>
            Represents a DSSP action in the service summary
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Unknown">
            <summary>
            Unknown action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Create">
            <summary>
            Create action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Delete">
            <summary>
            Delete action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Drop">
            <summary>
            Drop action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Get">
            <summary>
            Get action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Insert">
            <summary>
            Insert action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Lookup">
            <summary>
            Lookup action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Notify">
            <summary>
            Notify action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Query">
            <summary>
            Query action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Replace">
            <summary>
            Replace action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Submit">
            <summary>
            Submit action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Subscribe">
            <summary>
            Subscribe action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Update">
            <summary>
            Update action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.DsspAction.Upsert">
            <summary>
            Upsert action
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServiceSummary">
            <summary>
            Represents a summary of a service contract model
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummary.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummary.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummary.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummary.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceSummary.Assembly">
            <summary>
            Gets or sets the assembly that contains the  service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceSummary.IsService">
            <summary>
            Gets a value that indicates whether the service summary represents a service
            or is a placeholder of a data-only namespace
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceSummary.MainPort">
            <summary>
            Gets or sets the main port of the service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceSummary.AlternatePorts">
            <summary>
            Gets the alternate ports of the service
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServiceSummaryCollection">
            <summary>
            Represents a list of service summaries
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummaryCollection.#ctor">
            <summary>
            Creates a new instance o <code>ServiceSummaryCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummaryCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.ServiceSummary})">
            <summary>
            Creates a new instance of <code>ServiceSummaryCollection</code>
            </summary>
            <param name="items">the items with which to initialize the collection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ContractIdentifierCollection">
            <summary>
            Represents a list of contracts
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ContractIdentifierCollection.#ctor">
            <summary>
            Creates a new instance o <code>ContractIdentifierCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ContractIdentifierCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of <code>ContractIdentifierCollection</code>
            </summary>
            <param name="items">the items with which to initialize the collection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServiceSummaryList">
            <summary>
            Represents a service assembly summary
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.ContractModel.ServiceSummaryList.SummaryResourceNameInProxyAssembly">
            <summary>
            The resource name that is used to embedd the service summaries in the proxy assembly
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummaryList.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummaryList.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummaryList.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummaryList.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummaryList.LoadFromProxyAssembly(System.Reflection.Assembly,System.Diagnostics.TraceLevel)">
            <summary>
            Loads the service summaries from the proxy assembly resource
            </summary>
            <param name="proxy">proxy assembly from which to load summaries</param>
            <param name="verbosity">logging verbosity</param>
            <returns>the embedded service summary from the assembly</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServiceSummaryList.SaveForProxyAssembly(System.IO.Stream,Microsoft.Dss.Core.ContractModel.ServiceSummaryList)">
            <summary>
            Saves service summaries to a stream.
            <remarks>
            The summary is save in the format that is used in proxy assemblies.
            </remarks>
            </summary>
            <param name="stream">target stream</param>
            <param name="summary">summaries to save</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServiceSummaryList.Services">
            <summary>
            Gets the services in the assembly
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServicePortSummary">
            <summary>
            Represents a summary of a service port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortSummary.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortSummary.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortSummary.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortSummary.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.ServicePortSummary.Operations">
            <summary>
            Gets the operations on the port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.ServicePortSummaryCollection">
            <summary>
            Represents a list of service port summaries
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortSummaryCollection.#ctor">
            <summary>
            Creates a new instance o <code>ServicePortSummaryCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.ServicePortSummaryCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.ServicePortSummary})">
            <summary>
            Creates a new instance of <code>ServicePortSummaryCollection</code>
            </summary>
            <param name="items">the items with which to initialize the collection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DsspOperationSummary">
            <summary>
            Represents a summary of a DSSP operation
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationSummary.Clone">
            <summary>
            Creates o copy of the current instance
            </summary>
            <returns>a copy of the current instance</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationSummary.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copies the members values of the current instance to the target
            </summary>
            <param name="target">target instance</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationSummary.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the values of the members from a reader
            </summary>
            <param name="reader">the reader from which to read values</param>
            <returns>the deserialized instance
            <remarks>This is always <code>this</code> (<code>Me</code> in VB.NET)</remarks>
            </returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationSummary.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the values of the members of the current instance
            </summary>
            <param name="writer">the writer to which to write the values</param>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DsspOperationSummary.Action">
            <summary>
            Gets or sets the action of the operation
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DsspOperationSummary.OperationType">
            <summary>
            Gets or sets the type of the operation
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DsspOperationSummary.RequestType">
            <summary>
            Gets or sets the type of the request body
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ContractModel.DsspOperationSummary.ResponseTypes">
            <summary>
            Gets the reponse types
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.ContractModel.DsspOperationSummaryCollection">
            <summary>
            Represents a list of DSSP operation summaries
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationSummaryCollection.#ctor">
            <summary>
            Creates a new instance o <code>DsspOperationSummaryCollection</code>
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ContractModel.DsspOperationSummaryCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Dss.Core.ContractModel.DsspOperationSummary})">
            <summary>
            Creates a new instance of <code>DsspOperationSummaryCollection</code>
            </summary>
            <param name="items">the items with which to initialize the collection</param>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssStringHelpers">
            <summary>
            DSS specific string helper function
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStringHelpers.GetValidSuffix(System.String,System.String)">
            <summary>
            Gets a version of the suffix string that can be used in a URI
            </summary>
            <param name="suffix">base suffix</param>
            <param name="contract">contract identifier from which to derive suffix segments</param>
            <returns>suffix</returns>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssDictionary`2">
            <summary>
            A Serializable Dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To DssDictionary(TKey, TValue)
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.Clone">
            <summary>
            Clone the Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialization
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialization
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.Equals(Microsoft.Dss.Core.Utilities.DssDictionary{`0,`1})">
            <summary>
            Compare one DssDictionary to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.#ctor">
            <summary>
                Summary:
                Initializes a new instance of the System.Collections.Generic.DssDictionary_TKey,TValue_
                class that is empty, has the default initial capacity, and uses the default
                equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssDictionary_TKey,TValue_
                 class that contains elements copied from the specified System.Collections.Generic.IDictionary_TKey,TValue_
                 and uses the default equality comparer for the key type.
            
             Parameters:
               dictionary:
                 The System.Collections.Generic.IDictionary_TKey,TValue_ whose elements are
                 copied to the new System.Collections.Generic.DssDictionary_TKey,TValue_.
            
             Exceptions:
               System.ArgumentException:
                 dictionary contains one or more duplicate keys.
            
               System.ArgumentNullException:
                 dictionary is null.
             </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssDictionary_TKey,TValue_
                 class that is empty, has the default initial capacity, and uses the specified
                 System.Collections.Generic.IEqualityComparer_T_.
            
             Parameters:
               comparer:
                 The System.Collections.Generic.IEqualityComparer_T_ implementation to use
                 when comparing keys, or null to use the default System.Collections.Generic.EqualityComparer_T_
                 for the type of the key.
             </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.#ctor(System.Int32)">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssDictionary_TKey,TValue_
                 class that is empty, has the specified initial capacity, and uses the default
                 equality comparer for the key type.
                     
             Parameters:
               capacity:
                 The initial number of elements that the System.Collections.Generic.DssDictionary_TKey,TValue_ 
                 can contain.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 capacity is less than 0.
             
             </summary>
             <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssDictionary_TKey,TValue_
                 class that contains elements copied from the specified System.Collections.Generic.IDictionary_TKey,TValue_
                 and uses the specified System.Collections.Generic.IEqualityComparer_T_.
            
             Parameters:
               dictionary:
                 The System.Collections.Generic.IDictionary_TKey,TValue_ whose elements are
                 copied to the new System.Collections.Generic.DssDictionary_TKey,TValue_.
            
               comparer:
                 The System.Collections.Generic.IEqualityComparer_T_ implementation to use
                 when comparing keys, or null to use the default System.Collections.Generic.EqualityComparer_T_
                 for the type of the key.
            
             Exceptions:
               System.ArgumentException:
                 dictionary contains one or more duplicate keys.
            
               System.ArgumentNullException:
                 dictionary is null.
             </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssDictionary_TKey,TValue_
                 class that is empty, has the specified initial capacity, and uses the specified
                 System.Collections.Generic.IEqualityComparer_T_.
            
             Parameters:
               capacity:
                 The initial number of elements that the System.Collections.Generic.DssDictionary_TKey,TValue_
                 can contain.
            
               comparer:
                 The System.Collections.Generic.IEqualityComparer_T_ implementation to use
                 when comparing keys, or null to use the default System.Collections.Generic.EqualityComparer_T_
                 for the type of the key.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 capacity is less than 0.
             </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssDictionary_TKey,TValue_
                 class with serialized data.
            
             Parameters:
               context:
                 A System.Runtime.Serialization.StreamingContext structure containing the
                 source and destination of the serialized stream associated with the System.Collections.Generic.DssDictionary_TKey,TValue_.
            
               info:
                 A System.Runtime.Serialization.SerializationInfo object containing the information
                 required to serialize the System.Collections.Generic.DssDictionary_TKey,TValue_.
             </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2">
            <summary>
            A Serializable SortedDictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.RequiresDeepClone(System.Type)">
            <summary>
            Determine if a type requires deep clone
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To DssSortedDictionary(TKey, TValue)
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.Clone">
            <summary>
            Clone the SortedDictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialization
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialization
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.Equals(Microsoft.Dss.Core.Utilities.DssSortedDictionary{`0,`1})">
            <summary>
            Compare one DssSortedDictionary to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.#ctor">
            <summary>
            Summary:
                Initializes a new instance of the System.Collections.Generic.DssSortedDictionary_TKey,TValue_
                class that is empty and uses the default System.Collections.Generic.IComparer_T_
                implementation for the key type.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.#ctor(System.Int32)">
            <summary>
            Summary:
                Initializes a new instance of the System.Collections.Generic.DssSortedDictionary_TKey,TValue_
                class that is empty and uses the default System.Collections.Generic.IComparer_T_
                implementation for the key type.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssSortedDictionary_TKey,TValue_
                 class that is empty and uses the specified System.Collections.Generic.IComparer_T_
                 implementation to compare keys.
            
             Parameters:
               comparer:
                 The System.Collections.Generic.IComparer_T_ implementation to use when comparing
                 keys, or null to use the default System.Collections.Generic.Comparer_T_ for
                 the type of the key.
             </summary>
             <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssSortedDictionary_TKey,TValue_
                 class that contains elements copied from the specified System.Collections.Generic.IDictionary_TKey,TValue_
                 and uses the default System.Collections.Generic.IComparer_T_ implementation
                 for the key type.
            
             Parameters:
               dictionary:
                 The System.Collections.Generic.IDictionary_TKey,TValue_ whose elements are
                 copied to the new System.Collections.Generic.DssSortedDictionary_TKey,TValue_.
            
             Exceptions:
               System.ArgumentException:
                 dictionary contains one or more duplicate keys.
            
               System.ArgumentNullException:
                 dictionary is null.
             </summary>
             <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssSortedDictionary_TKey,TValue_
                 class that contains elements copied from the specified System.Collections.Generic.IDictionary_TKey,TValue_
                 and uses the specified System.Collections.Generic.IComparer_T_ implementation
                 to compare keys.
            
             Parameters:
               dictionary:
                 The System.Collections.Generic.IDictionary_TKey,TValue_ whose elements are
                 copied to the new System.Collections.Generic.DssSortedDictionary_TKey,TValue_.
            
               comparer:
                 The System.Collections.Generic.IComparer_T_ implementation to use when comparing
                 keys, or null to use the default System.Collections.Generic.Comparer_T_ for
                 the type of the key.
            
             Exceptions:
               System.ArgumentException:
                 dictionary contains one or more duplicate keys.
            
               System.ArgumentNullException:
                 dictionary is null.
             </summary>
             <param name="dictionary"></param>
             <param name="comparer"></param>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssSortedList`2">
            <summary>
            A Serializable SortedList
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.RequiresDeepClone(System.Type)">
            <summary>
            Determine if a type requires deep clone
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To DssSortedList(TKey, TValue)
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.Clone">
            <summary>
            Clone the SortedList
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialization
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialization
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.Equals(Microsoft.Dss.Core.Utilities.DssSortedList{`0,`1})">
            <summary>
            Compare one DssSortedList to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.#ctor">
            Summary:
                Initializes a new instance of the System.Collections.Generic.DssSortedList_TKey,TValue_
                class that is empty, has the default initial capacity, and uses the default
                System.Collections.Generic.IComparer_T_.
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssSortedList_TKey,TValue_
                 class that is empty, has the default initial capacity, and uses the specified
                 System.Collections.Generic.IComparer_T_.
            
             Parameters:
               comparer:
                 The System.Collections.Generic.IComparer_T_ implementation to use when comparing
                 keys.-or-null to use the default System.Collections.Generic.Comparer_T_ for
                 the type of the key.
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssSortedList_TKey,TValue_
                 class that contains elements copied from the specified System.Collections.Generic.IDictionary_TKey,TValue_,
                 has sufficient capacity to accommodate the number of elements copied, and
                 uses the default System.Collections.Generic.IComparer_T_.
            
             Parameters:
               dictionary:
                 The System.Collections.Generic.IDictionary_TKey,TValue_ whose elements are
                 copied to the new System.Collections.Generic.DssSortedList_TKey,TValue_.
            
             Exceptions:
               System.ArgumentException:
                 dictionary contains one or more duplicate keys.
            
               System.ArgumentNullException:
                 dictionary is null.
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.#ctor(System.Int32)">
            
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssSortedList_TKey,TValue_
                 class that is empty, has the specified initial capacity, and uses the default
                 System.Collections.Generic.IComparer_T_.
            
             Parameters:
               capacity:
                 The initial number of elements that the System.Collections.Generic.DssSortedList_TKey,TValue_
                 can contain.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 capacity is less than zero.
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssSortedList_TKey,TValue_
                 class that contains elements copied from the specified System.Collections.Generic.IDictionary_TKey,TValue_,
                 has sufficient capacity to accommodate the number of elements copied, and
                 uses the specified System.Collections.Generic.IComparer_T_.
            
             Parameters:
               dictionary:
                 The System.Collections.Generic.IDictionary_TKey,TValue_ whose elements are
                 copied to the new System.Collections.Generic.DssSortedList_TKey,TValue_.
            
               comparer:
                 The System.Collections.Generic.IComparer_T_ implementation to use when comparing
                 keys.-or-null to use the default System.Collections.Generic.Comparer_T_ for
                 the type of the key.
            
             Exceptions:
               System.ArgumentException:
                 dictionary contains one or more duplicate keys.
            
               System.ArgumentNullException:
                 dictionary is null.
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            
             Summary:
                 Initializes a new instance of the System.Collections.Generic.DssSortedList_TKey,TValue_
                 class that is empty, has the specified initial capacity, and uses the specified
                 System.Collections.Generic.IComparer_T_.
            
             Parameters:
               capacity:
                 The initial number of elements that the System.Collections.Generic.DssSortedList_TKey,TValue_
                 can contain.
            
               comparer:
                 The System.Collections.Generic.IComparer_T_ implementation to use when comparing
                 keys.-or-null to use the default System.Collections.Generic.Comparer_T_ for
                 the type of the key.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 capacity is less than zero.
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssQueue`1">
            <summary>
            A Serializable Queue
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssQueue`1.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To DssQueue(T, T)
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssQueue`1.Clone">
            <summary>
            Clone the Queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssQueue`1.EnumType">
            <summary>
            The Queue enum Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssQueue`1.Microsoft#Dss#Core#IDssSerializable#Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialization
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssQueue`1.Microsoft#Dss#Core#IDssSerializable#Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialization
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssQueue`1.Equals(Microsoft.Dss.Core.Utilities.DssQueue{`0})">
            <summary>
            Compare one DssQueue to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssQueue`1.#ctor">
            <summary>
            Summary:
                Initializes a new instance of the System.Collections.Generic.Queue_T_ class
                that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.Queue_T_ class
                 that contains elements copied from the specified collection and has sufficient
                 capacity to accommodate the number of elements copied.
            
             Parameters:
               collection:
                 The collection whose elements are copied to the new System.Collections.Generic.Queue_T_.
            
             Exceptions:
               System.ArgumentNullException:
                 collection is null.
             </summary>
             <param name="collection"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssQueue`1.#ctor(System.Int32)">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.Queue_T_ class
                 that is empty and has the specified initial capacity.
            
             Parameters:
               capacity:
                 The initial number of elements that the System.Collections.Generic.Queue_T_
                 can contain.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 capacity is less than zero.
             </summary>
             <param name="capacity"></param>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssStack`1">
            <summary>
            A Serializable Stack
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.InternalClone(Microsoft.Dss.Core.Utilities.DssStack{`0})">
            <summary>
            Clone the Stack
            </summary>
            <param name="target">null will create a new target</param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To DssStack(T, T)
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.Clone">
            <summary>
            Clone the Stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.EnumType">
            <summary>
            The Stack enum Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.Microsoft#Dss#Core#IDssSerializable#Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialization
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.Microsoft#Dss#Core#IDssSerializable#Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialization
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.Equals(Microsoft.Dss.Core.Utilities.DssStack{`0})">
            <summary>
            Compare one DssStack to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.#ctor">
            <summary>
            Summary:
                Initializes a new instance of the System.Collections.Generic.Stack_T_ class
                that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.Stack_T_ class
                 that contains elements copied from the specified collection and has sufficient
                 capacity to accommodate the number of elements copied.
            
             Parameters:
               collection:
                 The collection to copy elements from.
            
             Exceptions:
               System.ArgumentNullException:
                 collection is null.
             </summary>
             <param name="collection"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssStack`1.#ctor(System.Int32)">
             <summary>
             Summary:
                 Initializes a new instance of the System.Collections.Generic.Stack_T_ class
                 that is empty and has the specified initial capacity or the default initial
                 capacity, whichever is greater.
            
             Parameters:
               capacity:
                 The initial number of elements that the System.Collections.Generic.Stack_T_
                 can contain.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 capacity is less than zero.
             </summary>
             <param name="capacity"></param>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssUri">
            <summary>
            A Serializable Uri
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.#ctor">
            <summary>
            A Serializable Uri
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.#ctor(System.String)">
            <summary>
            A Serializable Uri
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.#ctor(System.Uri)">
            <summary>
            A Serializable Uri
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.ToUri">
            <summary>
            Convert to Uri
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.op_Implicit(Microsoft.Dss.Core.Utilities.DssUri)~System.Uri">
            <summary>
            Convert DssUri to Uri
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.op_Implicit(System.Uri)~Microsoft.Dss.Core.Utilities.DssUri">
            <summary>
            Convert Uri to DssUri
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.ToString">
            <summary>
            Returns an appropriate string representation of the current Uri
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To Dss Uri
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.Clone">
            <summary>
            Clone Dss Uri
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize Serialize
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize Deserialize
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssUri.System#IComparable#CompareTo(System.Object)">
            <summary>
            Allows comparison of this instance with another DssUri, Uri, or string.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssUri.UriValue">
            <summary>
            Uri
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.IDssArray">
            <summary>
            Allows Dss multi-dimensioned arrays to be converted to System.Array
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.IDssArray.ToArray">
            <summary>
            Convert an IDssArray to the underlying System.Array
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1">
            <summary>
            Two Dimensioned Array
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.#ctor">
            <summary>
            Two Dimensioned Array
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.#ctor(`0[0:,0:])">
            <summary>
            Two Dimensioned Array
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Two Dimensioned Array
            </summary>
            <param name="d0"></param>
            <param name="d1"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetLength(System.Int32)">
            <summary>
            Get a 32-bit integer that represents the number of elements in the specified dimension of the System.Array
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetEnumerator">
            <summary>
            Returns an IEnumerator for the System.Array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetLongLength(System.Int32)">
            <summary>
            Long Length
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetLowerBound(System.Int32)">
            <summary>
            Lower Bound
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetUpperBound(System.Int32)">
            <summary>
            Upper Bound
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetValue(System.Int32[])">
            <summary>
            Get Value
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetValue(System.Int64[])">
            <summary>
            Get Value
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetValue(System.Int32,System.Int32)">
            <summary>
            Get Value
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetValue(System.Int64,System.Int64)">
            <summary>
            Get Value
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.SetValue(System.Object,System.Int32[])">
            <summary>
            Set Value
            </summary>
            <param name="value"></param>
            <param name="indices"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.SetValue(System.Object,System.Int64[])">
            <summary>
            Set Value
            </summary>
            <param name="value"></param>
            <param name="indices"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.SetValue(System.Object,System.Int32,System.Int32)">
            <summary>
            Set Value
            </summary>
            <param name="value"></param>
            <param name="index1"></param>
            <param name="index2"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.SetValue(System.Object,System.Int64,System.Int64)">
            <summary>
            Set Value
            </summary>
            <param name="value"></param>
            <param name="index1"></param>
            <param name="index2"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.GetSchema">
            <summary>
            GetSchema
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            ReadXml
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            WriteXml
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.op_Implicit(Microsoft.Dss.Core.Utilities.DssTwoDimArray{`0})~`0[0:,0:]">
            <summary>
            Implicitly cast DssTwoDimArray to a two dimensioned array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.op_Implicit(`0[0:,0:])~Microsoft.Dss.Core.Utilities.DssTwoDimArray{`0}">
            <summary>
            Implicitly cast a two dimensioned array to DssTwoDimArray.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.ToArray">
            <summary>
            Convert a DssTwoDimArray to a System.Array
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.Array">
            <summary>
            The Two Dimensioned Array
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.Rank">
            <summary>
            Get the rank (number of dimensions) of the System.Array
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for 2-dim array
            </summary>
            <param name="ix"></param>
            <param name="iy"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.IsFixedSize">
            <summary>
            Is Fixed Size
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.IsReadOnly">
            <summary>
            Is ReadOnly
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.IsSynchronized">
            <summary>
            Is Synchronized
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssTwoDimArray`1.SyncRoot">
            <summary>
            Sync Root
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1">
            <summary>
            Three Dimensioned Array
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.#ctor">
            <summary>
            Three Dimensioned Array
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.#ctor(`0[0:,0:,0:])">
            <summary>
            Three Dimensioned Array
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Three Dimensioned Array
            </summary>
            <param name="d0"></param>
            <param name="d1"></param>
            <param name="d2"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetLength(System.Int32)">
            <summary>
            Get a 32-bit integer that represents the number of elements in the specified dimension of the System.Array
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetEnumerator">
            <summary>
            Returns an IEnumerator for the System.Array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetLongLength(System.Int32)">
            <summary>
            Long Length
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetLowerBound(System.Int32)">
            <summary>
            Lower Bound
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetUpperBound(System.Int32)">
            <summary>
            Upper Bound
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetValue(System.Int32[])">
            <summary>
            Get Value
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetValue(System.Int64[])">
            <summary>
            Get Value
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Value
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="index3"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetValue(System.Int64,System.Int64,System.Int64)">
            <summary>
            Get Value
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="index3"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.SetValue(System.Object,System.Int32[])">
            <summary>
            Set Value
            </summary>
            <param name="value"></param>
            <param name="indices"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.SetValue(System.Object,System.Int64[])">
            <summary>
            Set Value
            </summary>
            <param name="value"></param>
            <param name="indices"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.SetValue(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set Value
            </summary>
            <param name="value"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="index3"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.SetValue(System.Object,System.Int64,System.Int64,System.Int64)">
            <summary>
            Set Value
            </summary>
            <param name="value"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="index3"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.GetSchema">
            <summary>
            GetSchema
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            ReadXml
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            WriteXml
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.op_Implicit(Microsoft.Dss.Core.Utilities.DssThreeDimArray{`0})~`0[0:,0:,0:]">
            <summary>
            Implicitly cast DssThreeDimArray to a three dimensioned array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.op_Implicit(`0[0:,0:,0:])~Microsoft.Dss.Core.Utilities.DssThreeDimArray{`0}">
            <summary>
            Implicitly cast a three dimensioned array to DssThreeDimArray.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.ToArray">
            <summary>
            Convert a DssThreeDimArray to a System.Array
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.Array">
            <summary>
            The Three Dimensioned Array
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.Rank">
            <summary>
            Get the rank (number of dimensions) of the System.Array
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indexer for 3-dim array
            </summary>
            <param name="ix"></param>
            <param name="iy"></param>
            <param name="iz"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.IsFixedSize">
            <summary>
            Is Fixed Size
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.IsReadOnly">
            <summary>
            Is ReadOnly
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.IsSynchronized">
            <summary>
            Is Synchronized
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.DssThreeDimArray`1.SyncRoot">
            <summary>
            Sync Root
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssSerialization">
            <summary>
            Serialization Helpers
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.DssSerialization.DetermineCloneType(System.Type)">
            <summary>
            Determine if a type requires deep clone
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.DssSerialization.CloneType">
            <summary>
            Clone Type 
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.DssSerialization.CloneType.ValueType">
            <summary>
            Value Type requires no Cloning
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.DssSerialization.CloneType.ICloneable">
            <summary>
            ICloneable.Clone()
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.DssSerialization.CloneType.IDssSerializable">
            <summary>
            IDssSerializable.Clone()
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.CustomSerialization">
            <summary>
            Custom Serialization
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.CustomSerialization.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Custom Serialization
            </summary>
            <param name="originalNamespace"></param>
            <param name="originalName"></param>
            <param name="serializableNamespace"></param>
            <param name="serializableName"></param>
            <param name="isTemplatedList"></param>
            <param name="isTemplatedDictionary"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.CustomSerialization.CustomProxyType(System.String)">
            <summary>
            Replace a proxy type with the custom serialization type.
            </summary>
            <param name="proxyType"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.CustomSerialization.OriginalNamespace">
            <summary>
            The Namespace of the original type
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.CustomSerialization.OriginalName">
            <summary>
            The Name of the original type
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.CustomSerialization.SerializableNamespace">
            <summary>
            The Namespace of the serializable type
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.CustomSerialization.SerializableName">
            <summary>
            The Name of the serializable type
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.CustomSerialization.IsTemplatedList">
            <summary>
            Treat like a List of T
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.CustomSerialization.OverrideAddListCommand">
            <summary>
            A delegate to override the ".Add(elementName)"
            in a TemplatedList style customer serializer.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.CustomSerialization.IsTemplatedDictionary">
            <summary>
            Treat like a Dictionary of T
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.CustomSerialization.GetCustomSerialization(System.Type)">
            <summary>
            Get the Custom Serialization data for the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.CustomSerialization.GetCustomSerialization(System.String)">
            <summary>
            Get the Custom Serialization data for the specified Type.FullName.
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.CustomSerialization.HasCustomSerialization(System.Type)">
            <summary>
            Does the specified type have custom serialization?
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.CustomSerialization.HasCustomSerialization(System.String)">
            <summary>
            Does the specified Type.FullName have custom serialization?
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.CustomSerialization._customTypes">
            <summary>
            The private list of custom types
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.CustomSerialization.Init">
            <summary>
            Initialize the known DssSerializable type overrides
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.Utilities.CustomSerialization.Register(Microsoft.Dss.Core.Utilities.CustomSerialization)">
            <summary>
            Register a new custom serialization type
            </summary>
            <param name="customSerialization"></param>
            <returns>The newly added CustomSerialization class</returns>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.CustomSerialization.OriginalFullName">
            <summary>
            The Fully qualified name of the original type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.CustomSerialization.SerializableFullName">
            <summary>
            The name of the replacement type which is IDssSerializable
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.Utilities.CustomSerialization.CustomTypes">
            <summary>
            Returns a list of Custom Serializable Types
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.CustomSerialization.AddListCommand">
            <summary>
            Custom override for the ".Add(elementName)" used
            to add a new element.
            </summary>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Core.Utilities.Contract">
            <summary>
            DSS Contract for DssBase Utilities
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.Utilities.Contract.Identifier">
            <summary>
            The DSS Namespace for ContractDirectory
            </summary>
        </member>
    </members>
</doc>
