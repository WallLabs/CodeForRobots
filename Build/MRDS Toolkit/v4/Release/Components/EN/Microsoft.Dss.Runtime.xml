<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Dss.Runtime</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Dss.Core.LogGroups">
            <summary>
            Log categories for Log method calls
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LogGroups.Mount">
            <summary> Category used for mount store logs </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LogGroups.Activation">
            <summary> Category used for service creation, start </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LogGroups.Console">
            <summary> Category used to output messages to the local console </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LogGroups.PartnerManagement">
            <summary> Category used for partner enumeration logs </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.LogGroups.Security">
            <summary> Category used for security logs </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.RuntimeServices">
            <summary> Dss Runtime TS.Service Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.RuntimeCore">
            <summary> Dss Runtime TS.Core Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.Transports">
            <summary> Dss Transports Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.Forwarders">
            <summary> Dss Forwarders Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.Serializer">
            <summary> Dss Serializer Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.DataCache">
            <summary> Dss DataCache Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.DssRuntimeLoader">
            <summary> Dss Runtime Loader Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.DssPartnerManagement">
            <summary> Dss Partner Management Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.ServiceActivation">
            <summary> Dss ServiceActivation Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.LogGroups.ContractCache">
            <summary> Dss Contract Cache Categories </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DssConfigurationOptions">
            <summary>
            Message capture flags read from host configuration file
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssConfigurationOptions.CaptureInbound">
            <summary>
            Log all messages towards the service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssConfigurationOptions.CaptureOutbound">
            <summary>
            Log all message sent from a service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssConfigurationOptions.TrackTimeoutOnAllOperations">
            <summary>
            All outbound DSSP operations will be timed with the default short timeout
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssConfigurationOptions.DisableBinarySerialization">
            <summary>
            Disables binary serialization on all transports
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssConfigurationOptions.DisableDiskWrites">
            <summary>
            Disable any local disk write operations
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssConfigurationOptions.CaptureWhenDiagnosticHeaderPresent">
            <summary>
            Modifier flag allows message capture when dss diagnostic header is present
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DssRuntimeConfiguration">
            <summary>
            Runtime configuration
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DssRuntimeConfiguration.ConfigurationSystemException">
            <summary>
            If set the configuration file is most likely corrupt
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeConfiguration.EnableMessageLogging(System.String)">
            <summary>
            Sets the following configuration options to enable full logging of service messages
            CaptureInbound, CaptureOutbound, DisableBinarySerialization
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeConfiguration.CheckParameterOverrideFromConfigurationFile">
            <summary>
            Checks if configuration file parsing resulted in cached values for runtime parameters and updates
            this instance accordingly
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.InitializationCompleteEvent">
            <summary>
            Signal for initialization completion by DssRuntimeLoader
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.ShutdownCompleteEvent">
            <summary>
            Signal for shutdown completion by DssRuntimeLoader
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.Forwarders">
            <summary>
            Ordered collection of forwarder constructor delegates 
            used to build DSS service message pipelines
            </summary>
            <remarks>
            The order of the forwarder constructor delegates is important. 
            The first forwarder will be closest to the transport, the last forwarder is closest to the service
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.Transports">
            <summary>
            Dictionary of transport configuration parameters for a given Uri scheme
            </summary>
            <remarks>
            The transport configuration specifies how a transport should be initialized and contains
            a delegate to a static creation method for the transport implementation
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.NodeStart">
            <summary>
            Node start time
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.PendingDsspOperationTableSize">
            <summary>
            Initial number of entries for table of pending outbound operations, per service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.MaxPendingHttpRequests">
            <summary>
            Maximum number of pending HTTP outbound requests. 
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.PublicTcpPort">
            <summary>
            Tcp port to listen on
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.PublicHttpPort">
            <summary>
            Http port to listen on
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.HostName">
            <summary>
            Host name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.MessageLoggingPath">
            <summary>
            File system directory path to store generated log files
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.SecuritySettings">
            <summary>
            Key file
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.AllowUnsecuredRemoteAccess">
            <summary>
            Gets a value indicating whether to use a fully qualified domain name.
            </summary>
            <value>
            <c>true</c> if using a fully qualified domain name; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.HostRootDir">
            <summary>
            Root directory of host executable.
            </summary>
            <remarks>
            This defaults to the CodeBase of the entry assembly. If the entry assembly is not 
            managed code (for example when using Asp.NET) then this will be null and must be 
            set before the environment is started
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.HostConfigurationOptions">
            <summary>
            Runtime configuration options read from the host configuration file
            </summary>
            <remarks>Initialized from host configuration file</remarks>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.TimeScale">
            <summary>
            Factor multiplied by all timespan values used as timeouts in Dssp operations
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeConfiguration.DefaultRuntimeResources">
            <summary>
            XSLT resource name to use for default target results. It is invoked to present a web page for all un-resolved URIs requests 
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ForwarderPathBuilder.WirePath(Microsoft.Dss.Services.Forwarders.ForwarderPathNode[])">
            <summary>
            Full duplex connection of all nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.DsspOperationProperties">
            <summary>
            NOTE: Flags field is serialized into a single byte so highest flag value is 128
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.DsspOperationProperties.OneWay">
            <summary>
            No response is expected
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.DsspOperationProperties.Subscription">
            <summary>
            Outbound request was a Subscription operation
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.DsspOperationProperties.Local">
            <summary>
            Target of operation is a local service, within the same node
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.DsspOperationProperties.UnknownResponseType">
            <summary>
            The response type is unknown atthe time the request was sent
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.DsspOperationProperties.IsBinary">
            <summary>
            Packet is binary serializable
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ForwarderEnvelopePort">
            <summary>
            Forwarder envelope port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope">
            <summary>
            Message container for service to service communication through the DSS forwarder path
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.NotificationHeader">
            <summary>
            The DSS notification header is special cased and kept in a seperate field to minimize allocations
            in the message path. Care must taken to copy to the header collection if this header is present
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.MessageId">
            <summary>
            Request operation unique identifier, re-used in a response
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.To">
            <summary>
            Target service URI
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.From">
            <summary>
            Source service URI
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.TimeStamp">
            <summary>
            Envelope creation timestamp
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.Action">
            <summary>
            SOAP action
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.RetryCount">
            <summary>
            Low level retry count. Decremented by forwarder or transport attempting retries
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.UserIdentity">
            <summary>
            Security principal sending this message
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.ForwardTarget">
            <summary>
            Forwarder path resolved target for this envelope
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.ReverseTarget">
            <summary>
            Forwarder path response target for an outbound request
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.ResponsePort">
            <summary>
            Service level response port
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.ExpectedResponseType">
            <summary>
            For some operations the response type must be declared on the outbound request so proper transform can occur
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.OriginalRequestProperties">
            <summary>
            Flags describing the envelope
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.Causalities">
            <summary>
            Causalities captured on an outbound request and used to propagate failure, as exceptions
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.Body">
            <summary>
            SOAP Body instance
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Object})">
            <summary>
            Initialization constructor
            </summary>
            <param name="internalHeaders"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.GetInternalHeader``1">
            <summary>
            Retrieves internal header by type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.AddInternalHeader``1(``0)">
            <summary>
            Adds an internal header
            </summary>
            <typeparam name="T"></typeparam>
            <param name="header"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.ReplaceInternalHeader``1(``0)">
            <summary>
            Replaces an internal header of the same type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="header"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.AddInternalHeader(System.Object)">
            <summary>
            Add internal header (using runtime type)
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.RemoveInternalHeader``1">
            <summary>
            Remove internal header by type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.GetHeader``1">
            <summary>
            Retrieve a SOAP header. If not present returns null
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.ReplaceHeader``1(``0)">
            <summary>
            Replace SOAP header of the same type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="header"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.ReplaceHeader(System.Type,System.Object)">
            <summary>
            Replace SOAP header using runtime type
            </summary>
            <param name="headerType"></param>
            <param name="header"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.AddHeader(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Add SOAP header using runtime type
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.RemoveHeader``1">
            <summary>
            Remove SOAP header by type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary serialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.Clone">
            <summary>
            Deep Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.UnknownHeaders">
            <summary>
            List of header qualified names that we failed to deserialize
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.HasUnknownHeaders">
            <summary>
            True if at least one header failed to deserialize
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.HasHeaders">
            <summary>
            True if at least one SOAP header is present. Notification header presence must be checked seperately
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.Headers">
            <summary>
            Dictionary of SOAP headers present in the envelope. Always check the HasHeaders property before accessing collection
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.HasInternalHeaders">
            <summary>
            True if internal control headers are present
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope.InternalHeaders">
            <summary>
            Dictionary of intra-node only (non serializable) headers used to convey control information
            between forwarders
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.IForwarderControl">
            <summary>
            Interface for forwarder control messages
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.IForwarderControl.ResultPort">
            <summary>
            Result for control operation
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ForwarderShutdown">
            <summary>
            Issue by service to each forwarder instance so cleanup and shutdown of the path occurs
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderShutdown.IsNodeShutdownInProgress">
            <summary>
            True if service shutdown was initiated due to node shutdown
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarder">
            <summary>
            Resolves a fully qualified Uri to an forwarder port representing the message pipeline
            for that service. If service is remote, this is the upstream forwarder to an outbound path.
            If the service is local, the returned forwarder port is the downstream-most forwarder in the inbound
            path to the service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarder.#ctor(System.Uri)">
            <summary>
            Initialization constructor
            </summary>
            <param name="uri"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarder.Uri">
            <summary>
            Uri to resolve
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarder.ResultPort">
            <summary>
            Result port set
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarderResult">
            <summary>
            Transport resolution result in response to a <see cref="T:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarder"/> message
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarderResult.UseBinarySerialization">
            <summary>
            True if binary serialization is enabled on this forwarder path
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarderResult.IsLocal">
            <summary>
            True if resolved service is local to the node
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarderResult.RequestForwarderPort">
            <summary>
            Forwarder port for posting requests to the service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarderResult.ResolvedUri">
            <summary>
            Fully qualified resolved Uri
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ResolveUriToForwarderResult.#ctor(Microsoft.Dss.Services.Forwarders.ForwarderEnvelopePort,System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Initialization constructor
            </summary>
            <param name="port"></param>
            <param name="uri"></param>
            <param name="isLocal"></param>
            <param name="useBinarySerialization"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.DuplicateEntryFailureResult">
            <summary>
            Failure result when attempting to bind a URI suffix that is already bound on the target transport
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.DuplicateEntryFailureResult.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="status"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.AttachToPath">
            <summary>
            Request to a set of forwarders and a transport to form a Forwarder Path for a service instance
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.AttachToPath.#ctor(Microsoft.Dss.Services.Forwarders.ForwarderPathNode,Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType,Microsoft.Dss.Services.Forwarders.ForwarderPath)">
            <summary>
            Initialization constructor
            </summary>
            <param name="node"></param>
            <param name="serviceInfo"></param>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.AttachToPath.#ctor(Microsoft.Dss.Services.Forwarders.ForwarderPathNode,Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType,Microsoft.Dss.Services.Forwarders.ForwarderPath,Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration,Microsoft.Ccr.Core.IPort)">
            <summary>
            Initialization constructor
            </summary>
            <param name="node"></param>
            <param name="serviceInfo"></param>
            <param name="path"></param>
            <param name="portConfiguration"></param>
            <param name="servicePort"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.AttachToPath.Path">
            <summary>
            Other nodes in the path under creation
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.AttachToPath.Node">
            <summary>
            Current node instance for the target forwarder/transport of this message
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.AttachToPath.ServicePort">
            <summary>
            Service operations port at the upstream terminal point of the forwarder path
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.AttachToPath.ServiceInfo">
            <summary>
            Service information with bound URI addresses
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.AttachToPath.PortConfiguration">
            <summary>
            Service operations port configuration
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.AttachToPath.ResultPort">
            <summary>
            Result port set
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.DetachFromPath">
            <summary>
            Request to detach from a forwarder path. Sent when a service is being shutdown and removed from the network
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.DetachFromPath.#ctor(Microsoft.Dss.Services.Forwarders.ForwarderPathNode,Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="node"></param>
            <param name="serviceInfo"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.DetachFromPath.Node">
            <summary>
            Forwarder node instance for the target of this message
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.DetachFromPath.ServiceInfo">
            <summary>
            Service info on service instance being shutdown
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.DetachFromPath.ResultPort">
            <summary>
            Result port set
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ForwarderPathNode">
            <summary>
            Forwarder path node. Every forwarder and transport in a path must fill in the FromPort fields
            so the path can be composed. The ToPort fields are set by the path builder service once it has all
            the nodes filled in
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderPathNode.FromUpstreamPort">
            <summary>
            Port instance to listen for messages coming from the service side of the path, 
            that then need to be forwarded towards the network or target service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderPathNode.ToUpstreamPort">
            <summary>
            Port instance to forward messages that flow towards the service (inbound)
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderPathNode.FromDownstreamPort">
            <summary>
            Port instance to listen for messages coming from the transport side of the path,
            that then need to be forwarded towards the service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderPathNode.ToDownstreamPort">
            <summary>
            Port instance to forward messages that flow towards the network (outbound)
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderPathNode.ControlPort">
            <summary>
            Port used to communicate control plane configuration information to forwarder or transport,
            independent of any service initiated envelope
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderPathNode.Contract">
            <summary>
            Forwarder node identifier in the form of a URI
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ForwarderPath">
            <summary>
            Maintains a bound list of forwarder node structures that describe the message processing
            pipeline for a DSS service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderPath.#ctor(System.Collections.Generic.IList{Microsoft.Dss.Services.Forwarders.ForwarderPathNode},System.Collections.Generic.IList{Microsoft.Dss.Services.Forwarders.ForwarderPathNode})">
            <summary>
            Initialization constructor
            </summary>
            <param name="nodes"></param>
            <param name="terminals"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderPath.Terminals">
            <summary>
            End points of the forwarder path, most commonly transport nodes
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderPath.Nodes">
            <summary>
            Forwarder or intermediary nodes between a service and the terminal nodes
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderPath.InboundPathEntryNode">
            <summary>
            The entry point for the inbound path. Usually the trasport attached node
            </summary>
            <remarks>Used by the top most forwarder(the forwarder next to the service) as the advertised entry point for responses</remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ForwarderConstructor">
            <summary>
            Forwarder constructor delegate
            </summary>
            <param name="environment">Service environment available to forwarder</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ForwarderControlPort">
            <summary>
            Primary interface to a forwarder. Port set defines messages a forwarder must handle
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderControlPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderControlPort.#ctor(Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.Forwarders.AttachToPath},Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.Forwarders.DetachFromPath})">
            <summary>
            Initialization constructor
            </summary>
            <param name="portOne"></param>
            <param name="portTwo"></param>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.Dssp.DsspOperationOutboundForwarder._pendingRequests">
            <summary>
            Storage for all outbound operations from the service, before the forwarder attaches to the outbound
            path for the target URI
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.Dssp.DsspOperationOutboundForwarder.Enable(Microsoft.Dss.Services.Forwarders.Dssp.DsspForwarder,Microsoft.Dss.Services.Forwarders.ResolveUriToForwarderResult,Microsoft.Ccr.Core.DispatcherQueue)">
            <summary>
            Called when the target service uri has been resolved.
            </summary>
            <remarks>The forwarder is created in two steps. 
            1) When a service calls ServiceForwarder() on DsspServiceBase we construct it but no target uri is yet available.
               The forwarder just queues and clones outbound messages
            2) When the uri resolution is complete, we call the Enable method to allow message to flow downstream
            </remarks>
            <param name="parent"></param>
            <param name="resolutionResult"></param>
            <param name="taskQueue">CCR dispatcher queue for scheduling work items</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.Dssp.DsspOperationOutboundForwarder.OutboundHandler(Microsoft.Dss.ServiceModel.Dssp.DsspOperation,Microsoft.Dss.Services.Forwarders.ForwarderEnvelope)">
            <summary>
            This handler executes in the context of a service!!! Never block or do anything
            that is not O(1)
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.Dssp.CreateDsspOperationForwarder">
            <summary>
            Request to bind a uri to a helper process, the OutboundForwarder that will send messages to bound service instance
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.TransportConstructor">
            <summary>
            Transport constructor delegate
            </summary>
            <param name="environment">Service environment available to forwarder</param>
            <param name="configuration">Transport configuration</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.TransportPort">
            <summary>
            Port Set for communicating with DSS transport implementations
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.TransportConfiguration">
            <summary>
            Transport configuration
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportConfiguration.#ctor(System.Uri,System.Boolean,Microsoft.Dss.Services.Transports.TransportConstructor)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.TransportConfiguration.MaxOutstandingRequests">
            <summary>
            Maximum number of pending outbound requests. 
            </summary>
            <remarks>This value should be considered a hint, transports are not required to observe it</remarks>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.TransportConfiguration.CreateTransport">
            <summary>
            Delegate to static create method that initializes a new transport instance
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.TransportConfiguration.UseBinarySerialization">
            <summary>
            If true, all forwarder paths bound to this transport must serialize to binary
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.TransportConfiguration.Host">
            <summary>
            Host Uri (host and port)
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.TransportPacketHeader">
            <summary>
            Internal ForwarderEnvelope header used by the transport to transfer serialized SOAP envelope data to and from the network
            </summary>
            <remarks>On inbound operations the transport creates this header, copies the data from the network into a memory stream, 
            adds its to the InternalHeaders collection of a new <see cref="T:Microsoft.Dss.Services.Forwarders.ForwarderEnvelope"/> instance and then posts it to the 
            forwarder upstream</remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportPacketHeader.#ctor(System.Uri,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="uri">Service Uri</param>
            <param name="data">message data</param>
            <param name="offset">offset into data buffer where packet data begins</param>
            <param name="length">packet length</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportPacketHeader.#ctor(System.IO.MemoryStream,System.Uri)">
            <summary>
            Initialization constructor
            </summary>
            <param name="data">packet data</param>
            <param name="uri">Service Uri</param>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.TransportPacketHeader.Stream">
            <summary>
            Memory stream with entire DSSP message
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.TransportPacketHeader.Uri">
            <summary>
            Target service URI for this packet
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.TransportPacketHeader.Buffer">
            <summary>
            Memory stream data buffer
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.TransportPacketHeader.Length">
            <summary>
            Packet length
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.ConfigureUriResolution">
            <summary>
            Control message to transport that configures how a service URI already bound to the transport, is resolved
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.ConfigureUriResolution.#ctor(System.Uri,System.Boolean)">
            <summary>
            Initialization constructor
            </summary>
            <param name="uri"></param>
            <param name="forceRemote"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.ConfigureUriResolution.ForceRemote">
            <summary>
            If true the service Uri will appear remote in any resolution attempts
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.ConfigureUriResolution.Uri">
            <summary>
            Service Uri bound to the transport
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.ConfigureUriResolution.ResultPort">
            <summary>
            Result port set
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.ConfigureUnknownUriTarget">
            <summary>
            Transport configuration message for inbound forwarder envelopes with unknown target URIs
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.ConfigureUnknownUriTarget.DefaultTargetServiceInboundPort">
            <summary>
            Forwarder path endpoint for forwarding all envelopes with unknown URIs
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.ConfigureUnknownUriTarget.#ctor(Microsoft.Dss.Services.Forwarders.ForwarderEnvelopePort)">
            <summary>
            Initialization constructor
            </summary>
            <param name="defaultTargetServiceInboundPort"></param>
        </member>
        <member name="T:Microsoft.Dss.Core.ServiceBase">
            <summary>
            Common class for internal(not accessible outside the Dss node) service implementations
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.#ctor(Microsoft.Dss.Core.ServiceEnvironment)">
            <summary>
            Initialization constructor
            </summary>
            <param name="environment">Service environment</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.#ctor(Microsoft.Ccr.Core.DispatcherQueue)">
            <summary>
            Initialization constructor
            </summary>
            <param name="dispatcherQueue"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.#ctor(Microsoft.Dss.Core.ServiceBase)">
            <summary>
            Cloning constructor
            </summary>
            <param name="sourceInstance">ServiceBase instance to clone state from</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.UpdateEnvironment(Microsoft.Dss.Core.ExecutionAllocationResult)">
            <summary>
            Update the TaskQueue instance with the one in the supplied result
            </summary>
            <param name="result">New TaskQueue to use.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.Init">
            <summary>
            Initialization method. Assigns TaskQueue field from Environment.TaskQueue
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.ResolveUri(Microsoft.Dss.Core.ServiceEnvironment,System.Uri)">
            <summary>
            Resolves a URI to a forwarder port capable of receiving ForwarderEnvelope instances and forwarding them to the appropriate service
            </summary>
            <param name="environment">ServiceEnvironment instance with transport table</param>
            <param name="uri">Service URI</param>
            <returns>PortSet where the result of the operation is posted</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.DefaultCleanup">
            <summary>
            Registers a delegate which will trigger when a Shutdown message is posted on the CleanupPort port
            associated with this class instance
            </summary>
            <remarks>Use to coordinate cleanup among multiple pending choice/interleave contexts</remarks>
            <returns>A Receiver instance attaching an internal receiver to the CleanupPort port.</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.Cleanup(Microsoft.Ccr.Core.Handler{Microsoft.Ccr.Core.Shutdown})">
            <summary>
            Post a Shutdown message instance on the internal cleanup port and invokes the supplied delegate before the default cleanup handler
            </summary>
            <param name="cleanupCode">Delegate invoked when Shutdown is processed</param>
            <returns>A Receiver instance attaching an internal receiver to the CleanupPort port</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.ServiceBase.Cleanup(Microsoft.Ccr.Core.Handler)">
            <summary>
            Post a Shutdown message instance on the internal cleanup port and invokes the supplied delegate before the default cleanup handler
            </summary>
            <param name="cleanupCode">Delegate invoked when Shutdown is processed</param>
            <returns>A Receiver instance attaching an internal receiver to the CleanupPort port</returns>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceBase.Environment">
            <summary>
            Service environment
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceBase.ResourceManagerPort">
            <summary>
            Resource manager 
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceBase.SerializerPort">
            <summary>
            Serializer 
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceBase.WinFormsServicePort">
            <summary>
            WinForms Service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceBase.FileStoreConstructorPort">
            <summary>
            FileStore Constructor Service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.ServiceBase.CleanupPort">
            <summary>
            Default cleanup port for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.FileStore.FileStore.WriteObjectHandler(Microsoft.Dss.Services.FileStore.WriteObject)">
            <summary>
            Unreliable serialization to file stream
            </summary>
            <param name="write"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.FileStore.FileStore.WriteMemoryHandler(Microsoft.Dss.Services.FileStore.WriteFromMemory)">
            <summary>
            Unreliable write to file stream. We throw away all errors and dont indicate failure
            </summary>
            <param name="write"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.MapEntry">
            <summary>
            Transport Map entry
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.MapEntry.ForceRemote">
            <summary>
            If true, any resolution to this map entry will appear as if the service is remote
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.MapEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Transports.MapEntry.ToUpstreamPort">
            <summary>
            Upstream forwarder port for inbound envelopes
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.TransportServiceBase`1">
            <summary>
            Common implementation class for IP based transports
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.TransportServiceBase`1.MainPort">
            <summary>
            Transport port
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.TransportServiceBase`1.FromUpstreamPort">
            <summary>
            Forwarder envelope port to listen for outbound messages 
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.TransportServiceBase`1.ControlPort">
            <summary>
            Port set used for transport configuration messages
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.TransportServiceBase`1.UriScheme">
            <summary>
            Uri scheme handled by this transport
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.TransportServiceBase`1.UnknownUriTargetInboundPort">
            <summary>
            Port used to forward envelopes with unknown URIs
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.TransportServiceBase`1.Configuration">
            <summary>
            Transport configuration
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.TransportServiceBase`1.ServiceForwarderMap">
            <summary>
            Service URI to forwarder path table
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.#ctor(Microsoft.Dss.Core.ServiceEnvironment,Microsoft.Dss.Services.Transports.TransportConfiguration)">
            <summary>
            Initialization constructor
            </summary>
            <param name="env"></param>
            <param name="Config"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.Init">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.ConfigureUnknownUriTarget(Microsoft.Dss.Services.Transports.ConfigureUnknownUriTarget)">
            <summary>
            Sets the default target to forward all envelopes with target URIs that the transport failed to resolve
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.GetConnectionCacheKey(System.Uri)">
            <summary>
            Creates a connection cache key from a Uri. Default implementation concatenates targetUri.Host with targetUri.Port
            </summary>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.BuildUriFromPath(System.String)">
            <summary>
            Builds a fully qualified URI from a relative URI path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.FixupUri(System.String,System.Boolean)">
            <summary>
            Normalizes a uri to a fully qualified URI using the transports host and port
            </summary>
            <param name="uri"></param>
            <param name="nodeIsTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.ValidateAttachToPath(Microsoft.Dss.Services.Forwarders.AttachToPath,System.Uri@)">
            <summary>
            Validate AttachToPath message and post appropriate exceptions if validation fails
            </summary>
            <param name="Attach"></param>
            <param name="AbsoluteURI"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.IsNodeLocal(System.Uri)">
            <summary>
            Returns true of the uri host and port match the transports
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.IsMachineLocal(System.Uri)">
            <summary>
            Returns true of the Uri host matches the transport host
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.ConfigureUriResolution(Microsoft.Dss.Services.Forwarders.IForwarderControl)">
            <summary>
            Configures Uri resolution for a specific Uri handled by this transport
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.ResolveToForwarder(Microsoft.Dss.Services.Forwarders.ResolveUriToForwarder)">
            <summary>
            Resolves a URI to a forwarder port bound to the inbound service forwader path
            </summary>
            <param name="resolve"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.AttachToPathHandler(Microsoft.Dss.Services.Forwarders.AttachToPath)">
            <summary>
            Process request to register a service forwarder path with the transport
            </summary>
            <remarks>
            When a service is created it is assigned a URI suffix plus a set of forwarders that get messages
            to/from the service. The PathBuilder service creates all the forwarders and then sends Attach
            messages to all of them plus all the transports so the service can be bound to the network. The
            transport needs to register the service URI suffix so it can dispatch inbound network messages
            to the service.
            </remarks>
            <param name="attach"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.DetachFromPathHandler(Microsoft.Dss.Services.Forwarders.DetachFromPath)">
            <summary>
            Remove service URI registration from our table
            </summary>
            <param name="detach"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.ReportOutboundFailure(Microsoft.Dss.Services.Forwarders.ForwarderEnvelope,System.Uri,System.String)">
            <summary>
            Logs information about the failed outbound envelope and creates the proper exception header. 
            It then posts the envelope on the ReverseTarget port.
            </summary>
            <param name="msgOutbound"></param>
            <param name="Host"></param>
            <param name="strError"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.ReportFailure(System.Exception,Microsoft.Ccr.Core.Port{System.Exception})">
            <summary>
            Posts the exception to the result port
            </summary>
            <param name="exception"></param>
            <param name="resultPort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.TransportServiceBase`1.Log(System.Boolean,System.String)">
            <summary>
            Logs a transport message
            </summary>
            <param name="isTraceEnabled"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Http.HttpTransportService.Create(Microsoft.Dss.Core.ServiceEnvironment,Microsoft.Dss.Services.Transports.TransportConfiguration)">
            <summary>
            Initializes a new transport instance for the specified configuration and environment
            </summary>
            <param name="environment">Service environment</param>
            <param name="configuration">Transport configuration</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.Map`1">
            <summary>
            URI binding map. Essentially a dictionary of URIs to forwarder ports (attached to forwarder paths)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Map`1.AddEntry(System.String,`0)">
            <summary>
            Add entry
            </summary>
            <param name="key"></param>
            <param name="t"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Map`1.RemoveEntry(System.String)">
            <summary>
            Remove entry
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Map`1.ReadEntry(System.String)">
            <summary>
            Read entry
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Map`1.ReadEntryPartialMatch(System.String)">
            <summary>
            Attempt partial key match by enumerating through all the entries
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Map`1.ForAll(Microsoft.Ccr.Core.Handler{`0})">
            <summary>
            Executes delegate for each entry, sequentially
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Map`1.Contains(System.String)">
            <summary>
            Returns true if key is present in the map
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.SdpHeader">
            <summary>
            Utility class for manipulating SDP headers
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.SdpHeader.SdpFramingHeaderMaximumSize">
            <summary>
            Maximum size of DSSP binary framing header
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.SdpHeader.SdpFramingHeaderMinimumSize">
            <summary>
            Minimum size for DSSP binary framing header
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.SdpHeader.GetAlignedLength(System.Int32,System.Int32)">
            <summary>
            Aligns a length to a given alignment size
            </summary>
            <param name="length"></param>
            <param name="alignmentInBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.SdpHeader.Create(System.Int32,System.Uri,System.Int32)">
            <summary>
            Creates a SDP framing header
            </summary>
            <param name="SourcePort">Source service well known port</param>
            <param name="TargetURI">Target service URI</param>
            <param name="ReserveBytes">Bytes to reserve at the beginning of the header buffer before writing framing header data</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.SdpHeader.Parse(System.Byte[],System.Int32,System.Int32@,System.Uri@)">
            <summary>
            Parses the SDP framing header from an inbound data packet
            </summary>
            <param name="data">byte array with data, assuming framing header starts at offset 0</param>
            <param name="Port">Well known port of sender (extracted from parsed header)</param>
            <param name="offset">Offset into data array</param>
            <param name="TargetURI">Local target of this packet</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.Transports.Tcp.DsspTcpTransportService">
            <summary>
            Dssp Tcp transport
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Tcp.DsspTcpTransportService.Create(Microsoft.Dss.Core.ServiceEnvironment,Microsoft.Dss.Services.Transports.TransportConfiguration)">
            <summary>
            Initializes a new transport instance for the specified configuration and environment
            </summary>
            <param name="environment">Service environment</param>
            <param name="config">Transport configuration</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Tcp.DsspTcpTransportService.CreateInboundSockets(System.Uri@)">
            <summary>
            Return a Socket type for each available interface and stream protocol family
            matching the HostUri
            </summary>
            <param name="HostUri"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.Tcp.TcpConnectionContext.Outbound">
            <summary>
            True if this context was created in response to an outbound request
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Transports.Tcp.TcpConnectionContext.IsSendSequential">
            <summary>
            True for encrypted streams
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Transports.Tcp.TcpConnectionContext.SendComplete">
            <summary>
            Called for sequential send stream in order to reactivate the send
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.SerializerService">
            <summary>
            Performs serialization and deserialization for services.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.SerializerService.Create(Microsoft.Dss.Core.ServiceEnvironment)">
            <summary>
            Creates a new serializer and returns a port for interacting with it.
            </summary>
            <param name="Env">Environment in which to create the service.</param>
            <returns>Port for use in interacting with the service.</returns>
        </member>
        <member name="T:Microsoft.Dss.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.AlternateContractPortNotSpecifiedCorrectly">
            <summary>
              Looks up a localized string similar to AlternateContractAttribute found on the service but AlternateServicePortAttribute does not have AlternateContract specified or its a  duplicate.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.CoreServiceFailedInitializeException">
            <summary>
              Looks up a localized string similar to Core service initialization failure.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.DuplicateServiceStateAttributeException">
            <summary>
              Looks up a localized string similar to ServiceStateAttribute can only be specified once and InitialStatePartnerAttribute must be on the same field as ServiceStateAttribute.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.DuplicateSubscriberException">
            <summary>
              Looks up a localized string similar to Duplicate Subscriber.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.EmptyNotificationPortException">
            <summary>
              Looks up a localized string similar to Missing NotificationTarget port for internal subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.ErrorMultipleServiceHandlersForTheSameOperation">
            <summary>
              Looks up a localized string similar to Multiple Dssp Operation Handlers for the same operation have been detected. This will lead to non-deterministic behavior.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.FailureAttachingAlternatePorts">
            <summary>
              Looks up a localized string similar to Failure activating alternate service ports.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.InvalidContractDirectoryCache">
            <summary>
              Looks up a localized string similar to The contract directory cache file in the store is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.InvalidSecuritySettingsFile">
            <summary>
              Looks up a localized string similar to Error reading security settings file..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.InvalidSecuritySettingsFileExplain">
            <summary>
              Looks up a localized string similar to Error reading security settings file. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.MissingProxy">
             <summary>
               Looks up a localized string similar to The proxy or transform assembly for {0} could not be loaded.
            
            Make sure the assemblies are in {1}. If necessary delete the service cache file {2} and restart the node..
             </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.MountServiceUriException">
            <summary>
              Looks up a localized string similar to Unable to map Uri to the mountpoint.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.NoPermissions">
            <summary>
              Looks up a localized string similar to No permissions found for this action: {0} {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.NoPermissionsGranted">
            <summary>
              Looks up a localized string similar to No permissions found for this action (none granted).
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.NoTransportPortSpecifiedException">
            <summary>
              Looks up a localized string similar to A valid transport port was not specified.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.PathBuilderForwarderFailedException">
            <summary>
              Looks up a localized string similar to Forwarder failed to initialize.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.PermissionDenied">
            <summary>
              Looks up a localized string similar to Permission denied for this action: {0} {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.ProxyTypeNotFoundException">
            <summary>
              Looks up a localized string similar to Proxy type not found for outbound request or response. Make sure you have compiled a proxy and transform dll for the target service.Outbound type:.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.SecuritySettingsAccessDenied">
             <summary>
               Looks up a localized string similar to Access was denied to the security settings file &apos;{0}&apos;.
                The most common reason for this is multiple users trying to use the same security settings file, which is secured to one user.
            .
             </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.ServiceNotStartedException">
            <summary>
              Looks up a localized string similar to Cannot resolve URIs before service Start method is called.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.SoapSerializationBodyElementMissing">
            <summary>
              Looks up a localized string similar to &quot;Body XML element missing from SOAP envelope&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.SubcribeMissingNotificationPortException">
            <summary>
              Looks up a localized string similar to Subscribe Operation must have a valid NotificationTargetPort instance.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestCaseExceededTimeout">
            <summary>
              Looks up a localized string similar to Test case exceeded its timeout ({0} minute(s))..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestCaseSkippedDueToOtherCaseFailure">
            <summary>
              Looks up a localized string similar to Test case skipped/aborted due to failure of another case (&apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestCaseSkippedDueToSuiteInitFailure">
            <summary>
              Looks up a localized string similar to Test case skipped due to suite initialization failure..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestCaseStarting">
            <summary>
              Looks up a localized string similar to Test case starting....
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestCaseUnhandledException">
            <summary>
              Looks up a localized string similar to Test case failed to handle an exception: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestDuplicateExecutionOrder">
            <summary>
              Looks up a localized string similar to There are two test cases with the same execution order.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestInvalidExecutionOrder">
            <summary>
              Looks up a localized string similar to Execution order needs to be greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestInvalidTimeout">
            <summary>
              Looks up a localized string similar to Timeout value needs to be greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestInvalidUpsertCaseBody">
            <summary>
              Looks up a localized string similar to Body name can not be null.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestLogResultFormat">
            <summary>
              Looks up a localized string similar to [{0} - {1}] {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestMethodHasMultipleTypes">
            <summary>
              Looks up a localized string similar to A single method cannot be marked as both a test case and a suite initializer. Please remove one of these attributes..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestMultipleSuiteInitializers">
            <summary>
              Looks up a localized string similar to More than one suite initializer found. A DSS Test suite can have 0-1 initializers only..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestNumCasesSkipped">
            <summary>
              Looks up a localized string similar to  {0} test cases skipped..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestSeeProgressMessages">
            <summary>
              Looks up a localized string similar to See progress messages for details..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestStartupError">
            <summary>
              Looks up a localized string similar to Error on start, possibly because of service shutdown.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestSuiteAbortedDueCaseFailure">
            <summary>
              Looks up a localized string similar to Test suite aborted due to failure of test case (&apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestSuiteFailed">
            <summary>
              Looks up a localized string similar to Test suite failed: one or more test cases failed..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestSuiteInitializationComplete">
            <summary>
              Looks up a localized string similar to Test suite initialization complete..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestSuiteInitializationFailed">
            <summary>
              Looks up a localized string similar to Test suite initialization failed. {0} Exception Details: {1}. .
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestSuitePassed">
            <summary>
              Looks up a localized string similar to Test suite passed..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestSuiteShutdownRequested">
            <summary>
              Looks up a localized string similar to Test suite shutdown requested. Aborting all incomplete test cases..
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TestUnspecifiedTestOwner">
            <summary>
              Looks up a localized string similar to UnspecifiedTestOwner.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Properties.Resources.TypeNotFoundInSerializerTable">
            <summary>
              Looks up a localized string similar to Message type not found in dictionary of serializable types. Service Proxy DLL might not be loaded. Name:.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DssRuntimeLoader">
            <summary>
            DSS internal use. Starts DSS runtime
            </summary>
            <remarks>Applications should the DssEnvironment class to host a DSS Runtime</remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.#ctor(Microsoft.Dss.Core.DssRuntimeConfiguration)">
            <summary>
            Initialization constructor
            </summary>
            <param name="config">The DssRuntimeConfiguration that contains the configuration used to start the runtime.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.Initialize">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.InitializeByContract(System.Uri)">
            <summary>
            Initialization of core runtime plus specified service
            </summary>
            <param name="initialContract">URI of service contract for initial service to load.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.InitializeByAssembly(System.Uri)">
            <summary>
            Initialization of core runtime plus services within the specified assembly
            </summary>
            <param name="initialAssembly">URI of assembly containing initial services to load.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.WaitForInitialize(System.Boolean)">
            <summary>
            Waits for node start
            </summary>
            <param name="isShuttingDown"></param>
            <returns>False if initialization failed</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.WaitForShutdown">
            <summary>
            Blocks calling thread until shutdown completes or initialization failed
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.StartClientManifest(System.Uri[])">
            <summary>
            Start one or more services by loading the manifest
            </summary>
            <param name="manifests">URIs of manifests to load.</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.ResolveUriToPort(System.Uri)">
            <summary>
            Resolves a uri to a DSSP forwarder port so requests can be sent
            </summary>
            <param name="service">Service URI</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.CreateService(System.Type,System.String)">
            <summary>
            Create service
            </summary>
            <param name="serviceType">Service implementation type</param>
            <param name="contract">Service contract identifier</param>
            <returns>URI of newly created service.</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.CreateService(System.Type,Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Create a new service instance
            </summary>
            <param name="serviceType">Class implementing the service to be created.</param>
            <param name="serviceInfo">Additional information about service to be created</param>
            <returns>PortSet where result of the operation will be posted</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.CreateServiceInternal(System.Type,Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Used to create services implemented within DssRuntime
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.Dispose">
            <summary>
            Dispose runtime
            </summary>
            <remarks>This routine will block until shutdown is complete</remarks>
        </member>
        <member name="M:Microsoft.Dss.Core.DssRuntimeLoader.Dispose(System.Boolean)">
            <summary>
            Dispose runtime
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeLoader.UserTaskQueue">
            <summary>
            Task queue for user tasks scheduled on the core DSS dispatcher
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DssRuntimeLoader.RuntimeConfiguration">
            <summary>
            Configuration supplied at startup
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Serializer.DataCache">
            <summary>
            Dss Infrastructure use. Runtime type and assembly caching logic
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.DataCache.CommonSoapHeaderIdToTypeTable">
            <summary>
            short tables of ids to/from types for common soap headers. USed for binary serialization
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.DataCache._qualifiedNameToSerializerTable">
            <summary>
            Tables for all serializable types. Populated when proxies are loaded
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.DataCache._contractToAssemblies">
            <summary>
            List of services enumerated from disk
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.DataCache._serviceLoadCache">
            <summary>
            tracks which service contracts have already been fully loaded with all dependent assemblies
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.DataCache._contractToServiceMetadata">
            <summary>
            Cache of service summaries loaded
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.DataCache._cacheAssemblies">
            <summary>
            Cache of all assemblies we have explicitly loaded
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Serializer.DataCache._namespaces">
            <summary>
            Serialization namespaces
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.SetAssemblyLocations(Microsoft.Dss.Services.ContractDirectory.AssemblyLocations,Microsoft.Dss.Core.ServiceAssemblyReflection.ContractToAssembliesMapping,System.String)">
            <summary>
            Set the assembly locations
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.LoadAssemblyFile(System.Uri,System.Boolean,System.Boolean@)">
            <summary>
            Load and cache assembly by filename.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.LoadServiceAssemblies(System.Type)">
            <summary>
            Load necessery service assemblies given a data contract type 
            
            </summary>
            <param name="serviceType">a DataContract annotated type that does not implement IDssSerializable or is part of a proxy dll</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.LoadServiceAssemblies(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Loads a Dss service by contract. It loads all required proxy and transform assemblies for services and referenced
            other contracts
            </summary>
            <param name="createRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.LoadServiceTransform(Microsoft.Dss.Services.ContractDirectory.AssemblyLocations)">
            <summary>
            Load the transform class from the specified service combo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.GenerateMountpointAssemblyLocationUri(System.Uri,System.Type)">
            <summary>
            Creates a mountpoint based URI with the derived runtime type assembly location
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.RegisterSerializableType(System.Xml.XmlQualifiedName,System.Type)">
            <summary>
            Registers a type with the runtime so it can properly be serialized on the network
            </summary>
            <remarks>Use only for types that implement IDssSerializable directly and are not annotated with the DataContract attribute</remarks>
            <param name="qualifiedName">Xml qualified name of the type</param>
            <param name="serializableType">Type that needs to be serialized/deserialized and implements IDssSerializable</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.RegisterSerializableType(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
            <summary>
            Registers a type with the runtime so it can properly be serialized on the network
            </summary>
            <remarks>Use only for types that implement IDssSerializable directly and are not annotated with the DataContract attribute</remarks>
            <param name="qualifiedName">Xml qualified name of the type</param>
            <param name="serializableType">Type that needs to be serialized/deserialized and implements IDssSerializable</param>
            <param name="ignoreCustomAttributes">indicates to ignore name and namespace from DataContract and XmlRoot attribute</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.RegisterSerializableTypes(System.Reflection.Assembly)">
            <summary>
            Registers for serialization all types within an assembly annotated with the XmlRootAttribute
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.TransformToProxyOrClone(System.Object)">
            <summary>
            Transforms a ServiceType to a Proxy(generated) type or clones.
            Invoked by the dssp forwarder ReceiverTask attached to
            all outbound ports (ServiceForwarder ports and Request.Response ports)
            The routine will first check if this instance type is found in the 
            ServiceToProxy table. If it is, we transform. If its not, it means it must
            be a proxy type already, so we just clone. If no AssemblyEntry is found for this
            type it means no transform/proxy code was found or generated so we will clone
            it using ICloneable, if available
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Serializer.DataCache.TransformToService(System.Object)">
            <summary>
            Convert proxy type to source service.
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Services.Serializer.DataCache.ServiceSearchPaths">
            <summary>
            Directories used to enumerate service implementation and related assemblies
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.DiagnosticsForwarder">
            <summary>
            Diagnostic forwarder used to capture all inbound/outbound messages
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase">
            <summary>
            Common implementation class for DSS forwarders
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.#ctor(Microsoft.Dss.Core.ServiceEnvironment)">
            <summary>
            Initialization constructor
            </summary>
            <param name="Env"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.InitSuccess">
            <summary>
            Invoked when forwarder has succesfully attached to the path
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.HandlePathAttach(Microsoft.Dss.Services.Forwarders.AttachToPath)">
            <summary>
            Handles path attach and responds with success result
            </summary>
            <param name="Attach"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.HandlePathAttachFailure(Microsoft.Dss.Services.Forwarders.AttachToPath,System.Exception)">
            <summary>
            Responds with failure
            </summary>
            <param name="Attach"></param>
            <param name="F"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.InitFailure">
            <summary>
            Handles initialization failure
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.RegisterFromDownstreamHandler(Microsoft.Ccr.Core.Handler{Microsoft.Dss.Services.Forwarders.ForwarderEnvelope})">
            <summary>
            Registers an optimized receiver on the FromDownstreamPort
            </summary>
            <param name="inboundHandler"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.RegisterFromUpstreamHandler(Microsoft.Ccr.Core.Handler{Microsoft.Dss.Services.Forwarders.ForwarderEnvelope})">
            <summary>
            Registers an optimized receiver on the FromUpstreamPort
            </summary>
            <param name="outboundHandler"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.ForwardDownstream(Microsoft.Dss.Services.Forwarders.ForwarderEnvelope)">
            <summary>
            Forwards an envelope to the ToDownstreamPort or the envelope ForwardTarget if this is the end of the path
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.ForwardUpstream(Microsoft.Dss.Services.Forwarders.ForwarderEnvelope)">
            <summary>
            Forwards to the ToUpstreamPort
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.ReportFailure(Microsoft.Dss.Services.Forwarders.ForwarderEnvelope,System.Exception)">
            <summary>
            Spawns a task that inserts an exception as an internal header of the envelope and then posts
            the envelope on the ReverseTarget port
            </summary>
            <param name="msg"></param>
            <param name="Failure"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.LogFailure(System.Enum,Microsoft.Dss.Services.Forwarders.ForwarderEnvelope,System.Exception)">
            <summary>
            Writes a detailed log with information from the current envelope
            </summary>
            <param name="category"></param>
            <param name="envelope"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.ForwarderServiceBase.Node">
            <summary>
            Forwarder path node instance
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.DiagnosticsForwarder.Constructor">
            <summary>
            Constructor delegate
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.InlineExecutionForwarderPort">
            <summary>
            Special port derivation that forwards messages without executing tasks
            Should only be used for forward operations that are O(1) and small latency
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.SecurityForwarder">
            <summary>
            Security forwarder used to authorize messages
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.SecurityForwarder.Constructor">
            <summary>
            Constructor delegate
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Forwarders.Serializer.SerializerForwarder">
            <summary>
            Serialization forwarder. Handles binary or XML serialization depending on the path configuration
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Forwarders.Serializer.SerializerForwarder.Constructor">
            <summary>
            Constructor delegate
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.Dssp.DSSPHelpers.TryBuildResponseAction(System.String)">
            <summary>
            Tries to find the corresponding response action to a request action. 
            Returns <code>null</code> is the request action is unknown.
            </summary>
            <param name="requestAction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.Dssp.DSSPHelpers.TranslateHttpFormParametersToDsspOperation(Microsoft.Dss.Services.Forwarders.Dssp.EnvelopeToOperation,Microsoft.Dss.Services.Forwarders.ForwarderEnvelope,Microsoft.Dss.Core.DsspHttpUtilities.HttpRequestData)">
            <summary>
            Searches the parsed form data for reserved dssp name value pairs that enable form content
            to be translated to a Dssp operation
            </summary>
            <param name="table">Table of port operation types</param>
            <param name="parsedData">Processed form data</param>
            <param name="msg">inbound forwarder enveloper</param>
            <remarks>Exceptions should be logged and handled by caller</remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.Dssp.DSSPHelpers.FindMemberFromParameterKey(System.Object,System.String)">
            <summary>
            searches the type of the operation body for a public, writable member
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.Dssp.DSSPHelpers.HttpPostFormParameterToBodyFieldAssignment(System.Object,System.Reflection.MemberInfo,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Given a writable field, parse the value into the proer field type and assign it
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.Dssp.DSSPHelpers.GetValueFromPropertyOrField(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Retrieves value from member of body or field instance
            </summary>
            <remarks>If member is null we attempt default construction of the field type</remarks>
            <param name="bodyOrField"></param>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Dss.Services.Forwarders.Dssp.DsspForwarder._portForInboundResponses">
            <summary>
            The entry point of the inbound forwarder path. This is where all inbound messages meant for this service and forwarder
            need to come through. When this forwarder sends an outbound envelope, it uses this port as the advertised response port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Forwarders.Dssp.DsspForwarder.DsspReqRspForwarder.Evaluate(Microsoft.Ccr.Core.Arbiters.IPortElement,Microsoft.Ccr.Core.ITask@)">
            <summary>
            Implement a concise version of receive and Choice.
            The first time thsi handler executes it will set _responseBody
            preventing nay more responses of making it out
            </summary>
            <param name="value"></param>
            <param name="Task"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.DsspSecurity">
            <summary>
            Runtime security settings
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.DsspSecurity.IsServicePermitted(System.Reflection.Assembly,System.Type)">
            <summary>
            Checks whether the service, implemented in the supplied assembly 
            is permitted to run given the current security policy.
            </summary>
            <remarks>
            If the OnlySignedServices policy is set, then only services that have
            been authenticode signed by a signing authority recognized by the CLR policy
            installed on the current machine will be permitted.
            </remarks>
            <param name="assembly">The assembly containing the service implentation</param>
            <param name="type">The type of the service implementatio class.</param>
            <returns>True indicates that the service can be loaded.</returns>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.DsspSecurity.AuthenticationRequired">
            <summary>
            Gets a value indicating whether authentication is required for network 
            access to this node.
            </summary>
            <remarks>
            If this property is set to <c>true</c>, then network transports require authenticated
            access.
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.DsspSecurity.OnlySignedServices">
            <summary>
            Gets a value indicated whether the node required service assemblies to be
            authenticode signed.
            </summary>
            <remarks>
            If this propety is set to <c>true</c>, then the DSS runtime will only load
            services implemented in assemblies that have been Authenticode signed.
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.DsspSecurity.AnonymousNetworkIdentity">
            <summary>
            Gets an identity that transports can use to represent users that have
            connected anonymously, this is used when the node requires authentication
            to allow policy to be written that also allows anonymous access.
            </summary>
            <remarks>
            <para>
            If no anonymous network user id is configured then this will return
            <c>null</c>.
            </para>
            <para>
            This capability is only available on computers joined to a Windows Server 2003
            domain. This property will be <c>null</c> otherwise.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.DsspRights">
            <summary>
            Defines the access rights for each DSSP verb.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.None">
            <summary>
            No Access
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Lookup">
            <summary>
            The Lookup Request Action identifies a request to recover metadata about the service instance.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Get">
            <summary>
            The Get Request Action identifies a request to retrieve the entire state of a service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Query">
            <summary>
            Query Request Action identifies a request for a portion of the service state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.ReadState">
            <summary>
            Combines all the actions that read state without modifying it.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Delete">
            <summary>
            The Delete Request Action identifies a request for deleting a part of the current state 
            of a service.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Insert">
            <summary>
            The Insert Request Action identifies a request to insert an additional resource into a service instance, augmenting its state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Replace">
            <summary>
            Replace Request Action identifies a request for updating the entire service state atomically (in one step)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Submit">
            <summary>
            Submit Request Action identifies a request for processing that has no direct state side effects.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Update">
            <summary>
            Update Request Action identifies a request for changing portion of the service state.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Upsert">
            <summary>
            Upsert Request Action identifies a request updating or inserting data into service state.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.ModifyState">
            <summary>
            Combines all the actions that can modify state.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Subscribe">
            <summary>
            Subscribe Request Action identifies a request for listening for state change notifications
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Notify">
            <summary>
            The Notify Request Action identifies a request that has been converted to a notification and contains
            an additional SOAP header with the source Action that caused this notification
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Subscription">
            <summary>
            Combines the two actions associated with subscriptions
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Create">
            <summary>
            The Create Request Action identifies a request for creating a new instance of a service.
            The parameters in the Create request carries the information needed to create a service.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.Drop">
            <summary>
            The Drop Request Action identifies a request for shutting down a service instance
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.ServiceControl">
            <summary>
            Combines the actions associated with service lifecycle.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.DsspRights.All">
            <summary>
            All actions a service can support.
            This is equivalent to GenericAll
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.SecuritySettings">
            <summary>
            Security Settings for the node.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.SecuritySettings.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.SecuritySettings.AuthenticationRequired">
            <summary>
            Does this node required authenticated connections?
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.SecuritySettings.OnlySignedAssemblies">
            <summary>
            Does this node require that assemblies are authenticode signed?
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.SecuritySettings.AnonymousNetworkUser">
            <summary>
            User account to represent anonymous network access to the node.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.SecuritySettings.RestartRequired">
            <summary>
            Does this node need to be restarted for these settings to take effect?
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.SecuritySettings.GetServicePermissions(System.String)">
            <summary>
            Get permissions for a specified service path
            </summary>
            <param name="service">The service path to look up</param>
            <returns>The service permissions defined for this path, or null if no persmissions are
            defined</returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.SecuritySettings.GetServicePermissions(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Get permissions for a specified service path
            </summary>
            <param name="service">The service to look up</param>
            <returns>The service permissions defined for this path, or null if no persmissions are
            defined</returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.SecuritySettings.GetServicePermissions(System.Uri)">
            <summary>
            Get permissions for a specified service path
            </summary>
            <param name="service">The service path to look up</param>
            <returns>The service permissions defined for this path, or null if no persmissions are
            defined</returns>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.SecuritySettings.UpdatePort">
            <summary>
            port on which a message is sent when the service state is updated
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.SecuritySettings.Clone">
            <summary>
            Creates a new SecuritySettings object that is a copy of the current instance.
            </summary>
            <returns>A new SecuritySettings object that is a copy of this instance.</returns>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecuritySettings.Paths">
            <summary>
            Child nodes
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecuritySettings.Contracts">
            <summary>
            Permissions keyed by contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecuritySettings.Roles">
            <summary>
            Security Roles
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.SecuritySettings.ServicePermission">
            <summary>
            Permissions for a service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecuritySettings.ServicePermission.Inherited">
            <summary>
            Permissions inherited from further up the tree
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecuritySettings.ServicePermission.Local">
            <summary>
            Permissions specific to this service
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.SecurityEvent">
            <summary>
            Security Event
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecurityEvent.TimeStamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecurityEvent.Event">
            <summary>
            Event name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecurityEvent.Level">
            <summary>
            Event level
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecurityEvent.User">
            <summary>
            The user associated with this event, if any
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecurityEvent.Service">
            <summary>
            The service associated with this event, if any
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecurityEvent.DssContract">
            <summary>
            The service contract associated with this event, if any
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.SecurityEvent.Action">
            <summary>
            The Dssp Action associated with this event, if any
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.UserPermission">
            <summary>
            User permission
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.UserPermission.FromIdentity(System.Security.Principal.IIdentity)">
            <summary>
            Create a UserPermission object from an IIdentity object
            </summary>
            <remarks>While this method takes an IIdentity as its parameter it always returns null if that
            parameter is not a WindowsIdentity</remarks>
            <param name="identity">The Identity to create the UserPermission from.</param>
            <returns>a new instance of a UserPermission object.</returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.UserPermission.Clone">
            <summary>
            Creates a new UserPermission object that is a copy of the current instance.
            </summary>
            <returns>A new UserPermission object that is a copy of this instance.</returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.UserPermission.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.UserPermission.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.UserPermission.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.UserPermission.Rights">
            <summary>
            Rights
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.UserPermission.Sid">
            <summary>
            User Security Identifier (SID)
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.UserPermission.SddlSid">
            <summary>
            User SID in Security Descriptor Definition Language (SDDL) form
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.UserPermission.UserName">
            <summary>
            User Name for this user.
            This is derived from the SID.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.UserPermission.Deny">
            <summary>
            Is this permission denied
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.UserPermission.Inherit">
            <summary>
            Is this permission inherited
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.UserPermission.Source">
            <summary>
            In diagnostic mode, this is the list of policies that contribute to 
            this permission
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.PolicySource">
            <summary>
            Policy source, used in diagnostic mode.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.PolicySource.Equals(Microsoft.Dss.Runtime.Security.PolicySource)">
            <summary>
            Compare to another PolicySource object for equality
            </summary>
            <param name="other">The object to compare to</param>
            <returns>true if the Type and Reference are the same</returns>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.PolicySource.Type">
            <summary>
            Policy type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.PolicySource.Reference">
            <summary>
            Reference information specific to policy type
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Policy Type</term>
            <description>Reference information</description>
            </listheader>
            <item>
            <term>Path</term>
            <description>The service path of the policy</description>
            </item>
            <item>
            <term>Contract</term>
            <description>The service contract of the policy</description>
            </item>
            <item>
            <term>Role</term>
            <description>The name of the security role contributing to this policy</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.PolicyType">
            <summary>
            Policy Type
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.PolicyType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.PolicyType.Path">
            <summary>
            Policy defined by service path
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.PolicyType.Contract">
            <summary>
            Policy defined by service contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Runtime.Security.PolicyType.Role">
            <summary>
            Policy defined in a security role
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.PathPermission">
            <summary>
            Path permissions
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.PathPermission.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns>deserialized object</returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.PathPermission.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.PathPermission.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.PathPermission.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.PathPermission.PathSegment">
            <summary>
            Current path segment
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.PathPermission.Users">
            <summary>
            List of user permissions at this segment
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.PathPermission.Paths">
            <summary>
            List if paths below this segment
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.ContractPermission">
            <summary>
            Contract permissions
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.ContractPermission.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary deserialize
            </summary>
            <param name="reader"></param>
            <returns>deserialized object</returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.ContractPermission.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.ContractPermission.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.ContractPermission.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.ContractPermission.DssContract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.ContractPermission.Users">
            <summary>
            List of user permissions for this contract
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.RoleUser">
            <summary>
            User identifier used in Roles
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.RoleUser.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.RoleUser.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.RoleUser.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.RoleUser.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            CopyTo
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.RoleUser.Sid">
            <summary>
            User Security Identifier (SID)
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.RoleUser.SddlSid">
            <summary>
            User SID in Security Descriptor Definition Language (SDDL) form
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.RoleUser.UserName">
            <summary>
            User Name for this user.
            This is derived from the SID.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Runtime.Security.Role">
            <summary>
            Security Role definition
            </summary>
            <remarks>
            A security role defines a fixed set of permissions for a set of users that apply to 
            the specified service paths and contracts
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.Role.Permissions(System.Boolean)">
            <summary>
            This role represented as a list of user permissions
            </summary>
            <param name="diagnostic">If true, include diagnostic trace information in result</param>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.Role.Deserialize(System.IO.BinaryReader)">
            <summary>
            Binary Deserialize
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.Role.Serialize(System.IO.BinaryWriter)">
            <summary>
            Binary Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.Role.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Runtime.Security.Role.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.Role.Name">
            <summary>
            Human readable unique name for this Role
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.Role.Description">
            <summary>
            Human readable description for this Role
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.Role.Users">
            <summary>
            Users in this Role
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.Role.Paths">
            <summary>
            Service Paths to which this Role applies
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.Role.Contracts">
            <summary>
            Service Contracts to which this Role applies
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.Role.Allowed">
            <summary>
            Permissions that this Role specifically allows
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Runtime.Security.Role.Denied">
            <summary>
            Permissions that this Role specifically denies
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Diagnostics.DssLogHandler">
            <summary>
            Diagnostic Event Handler
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.OriginTypeName">
            <summary> Origin Type </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.DssLogHandlerMessagesNamespace">
            <summary> Namespace used for messages generated by the log handler </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.DssTraceLevelFilterArgument">
            <summary> Extra Argument name used to contain the traceswitch value </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.dssConsoleMessageSpecifier">
            <summary> specifier value used for unstructured (console) messages </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.initializationLock">
            <summary> lock object used for initializing the log handler </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.initialized">
            <summary> value indicating if the log handler has been initialized </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.consoleOutputPort">
            <summary> console output port to post messages to </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.consoleOutputQueue">
            <summary> queue of events that need to be sent to the console output service </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.traceSwitchMapping">
            <summary> list of category enumeration mapped to trace switches </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.consoleVisibleCategoryTypes">
            <summary> list of category enumerations to make visible to the local console </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.consoleVisibleCategories">
            <summary> list of categories to make visible to the local console </summary>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.#cctor">
            <summary>
            Initializes static members of the DssLogHandler class
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.SetOrigin(Microsoft.Dss.Diagnostics.LogDetails)">
            <summary>
            Set Origin method used for setting the origin values
            </summary>
            <param name="logDetails"> logdetails to update </param>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.Log(Microsoft.Dss.Diagnostics.LogDetails)">
            <summary>
            Log method used for actually posting an event
            </summary>
            <param name="logDetails"> logdetails to handle </param>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.AddTraceSwitchMapping(System.Type,System.Diagnostics.TraceSwitch)">
            <summary>
            Adds mapping between a trace switch and a category enumeration
            </summary>
            <param name="categoryEnum"> Category enumeration to map </param>
            <param name="traceSwitch"> Traceswitch to use </param>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.SetConsoleVisibleLevel(System.Type,System.Diagnostics.TraceLevel)">
            <summary>
            Adds a category enumeration to the list of console visible categories
            </summary>
            <param name="categoryEnum"> Category enumeration to add </param>
            <param name="consoleLevel"> Tracelevel to filter on </param>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.Init">
            <summary>
            Initializes the DSSLogHandler causing it to become the 
            current log handler if no other log handler has been set
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.AddConsoleVisibleCategory(System.Xml.XmlQualifiedName,System.Diagnostics.TraceLevel)">
            <summary>
            Adds a category to the list of console visible namespaces
            </summary>
            <param name="category"> Category to add</param>
            <param name="consoleLevel"> Tracelevel to filter on</param>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.GetConsoleTraceLevel(System.Xml.XmlQualifiedName)">
            <summary>
            Gets the console tracelevel of the specified category
            Used only by the LogToConsole method
            </summary>
            <param name="category"> Category to check </param>
            <returns> Console trace level </returns>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.GetTraceSwitchLevel(Microsoft.Dss.Diagnostics.LogDetails)">
            <summary>
            Gets the trace switch level for the given log details object
            </summary>
            <param name="log"> Logdetails object for which to find the trace switch </param>
            <returns> the trace switch </returns>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandler.GetConsoleTraceLevel(Microsoft.Dss.Diagnostics.LogDetails)">
            <summary>
            Gets the console tracelevel of the specified enumeration type
            </summary>
            <param name="log"> Logdetails object for which to find the console level </param>
            <returns> Console trace level </returns>
        </member>
        <member name="P:Microsoft.Dss.Diagnostics.DssLogHandler.ConsoleOutputPort">
            <summary> Gets or sets the console output port to post messages to </summary>
        </member>
        <member name="T:Microsoft.Dss.Diagnostics.DssLogHandler.DssLogHandlerCategory">
            <summary>
            Dss Log Handler Categories
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.DssLogHandlerCategory.ErrorCreatingFormatString">
            <summary> Error creating the format string </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.DssLogHandlerCategory.ErrorRegisteringTraceListener">
            <summary> Error creating the format string </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandler.DssLogHandlerCategory.InvalidTraceLevelValue">
            <summary>Invalid tracelevel value type.</summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser">
            <summary>
            HTTP Parameter parser (from form body or uri encoded parameters)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.MaxHttpPostLoad">
            <summary>
            Maximum number of bytes a client is allowed to send
            as the content of a HTTP POST request
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser._boundaryIdRegex">
            <summary>
            Regular expression for matching boundary identifier
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser._contentDispositionRegex">
            <summary>
            Regular expression for matching content disposition
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser._contentTypeRegex">
            <summary>
            Regular expression for matching content type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseHttpPostRequest(Microsoft.Dss.Core.DsspHttpUtilities.ReadFormDataBase)">
            <summary>
            Invokes the correct HTTP POST parsing method, depending on what type of data
            is supplied with the HTTP POST request
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseUrlEncodedHttpPost(Microsoft.Dss.Core.DsspHttpUtilities.ReadFormDataBase)">
            <summary>
            Parses an application/x-www-form-urlencoded HTTP POST request and extracts
            parameters contained in it
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseMultipartHttpPost(Microsoft.Dss.Core.DsspHttpUtilities.ReadFormDataBase)">
            <summary>
            Parses a multipart/form-data HTTP POST request and extracts parameters
            as well as uploaded files contained in it
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ExtractBoundaryId(System.String)">
            <summary>
            Extracts the boundary identifier from the content type of the HTTP request
            </summary>
            <param name="contentType"></param>
            <returns>boundary identifier as a byte array</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.AtEndOfData(Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation)">
            <summary>
            Checks whether end of data or closing boundary line was found
            </summary>
            <param name="parseInfo"></param>
            <returns>true if end of data is reached, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.GetNextLine(Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation)">
            <summary>
            Finds start and length of next line and stores this information
            in <paramref name="parseInfo"/>
            </summary>
            <param name="parseInfo"></param>
            <returns>true if a next line was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.AtBoundaryLine(Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation)">
            <summary>
            Checks whether current line is a boundary line
            </summary>
            <param name="parseInfo"></param>
            <returns>true if current line is a boundary line, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParsePartHeader(Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation)">
            <summary>
            Parses a multipart part header and stores this information in <paramref name="parseInfo"/>
            </summary>
            <param name="parseInfo"></param>
            <returns>true if part header was found and successfully parsed,
            false otherwise</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParsePartBody(Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation)">
            <summary>
            Finds start and length of body content of a multipart part and stores
            this information in <paramref name="parseInfo"/>
            </summary>
            <param name="parseInfo"></param>
            <returns>true if body content was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.GetContentEncoding(System.String)">
            <summary>
            Returns the content encoding specified in the content type
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.GetAttributeFromHeader(System.String,System.String)">
            <summary>
            Parses a header value for the value of a certain attribute
            </summary>
            <param name="headerValue"></param>
            <param name="attrName"></param>
            <returns>Attribute value if attribute exists, null otherwise</returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ReadRequestInputStreamIntoByteArray(System.Net.HttpListenerRequest)">
            <summary>
            Reads all data from the request input stream into a byte array
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.PostParsedFormResult(Microsoft.Dss.Core.DsspHttpUtilities.ReadFormDataBase,Microsoft.Dss.Core.DsspHttpUtilities.HttpPostRequestData)">
            <summary>
            Handles ReadForm message specific result posts
            </summary>
            <param name="msg"></param>
            <param name="parsedData"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.HandleException(Microsoft.Dss.Core.DsspHttpUtilities.ReadFormDataBase,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Generates a fault message with a given exception and HTTP status code and does
            some necessary clean-up
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
            <param name="code"></param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.HandleException(Microsoft.Dss.Core.DsspHttpUtilities.ReadFormDataBase,System.Exception)">
            <summary>
            Generates a fault message with a given exception and HTTP status code BadRequest
            and does some necessary clean-up
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation">
            <summary>
            Parsing utility class that contains all data relevant to parsing. An instance
            of it is passed between the different parsing methods.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.Data">
            <summary>
            Array with all the data to parse
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.Position">
            <summary>
            Current parsing position in the data array
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.LineStart">
            <summary>
            Position in the data array where the current line starts
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.LineLength">
            <summary>
            Length of the current line
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.LastBoundaryFound">
            <summary>
            Flag whether last boundary line has been found
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.BoundaryId">
            <summary>
            Multipart boundary identifier
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.Encoding">
            <summary>
            Encoding of the data being parsed
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.PartName">
            <summary>
            Value of name attribute in part content-disposition
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.PartFileName">
            <summary>
            Value of filename attribute in part content-disposition
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.PartContentType">
            <summary>
            Value of part content-type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.PartDataStart">
            <summary>
            Position in the data array where the data body of the current part
            starts
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpFormParser.ParseInformation.PartDataLength">
            <summary>
            Length of the data body of the current part
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.HttpRequestData">
            <summary>
            Contains processed data supplied with a HTTP request by a client, such as url encoded parameters
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpRequestData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpRequestData.Parameters">
            <summary>
            Gets the collection of HTTP POST parameters
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpRequestData.TranslatedOperation">
            <summary>
            Optional. Auto generated Dssp operation instance from post form data with dssp name value pairs
            </summary>
            <remarks>
            The Dssp Operation instance is created from one of the target service dssp operation types and
            populated with the name value pairs found in the post body
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostRequestData">
            <summary>
            Contains data supplied with a HTTP POST request by a client, such as parameters and 
            uploaded binaries.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostRequestData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostRequestData.Files">
            <summary>
            Gets the collection of uploaded files
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFile">
            <summary>
            Representation of a file uploaded through a HTTP POST request
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFile.#ctor(System.String,System.String,System.IO.MemoryStream)">
            <summary>
            Constructor
            </summary>
            <param name="fileName">Filename of the file, including path local to the client who
            uploaded the file</param>
            <param name="contentType">MIME content type of the file</param>
            <param name="inputStream">Stream through which file data can be accessed</param>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFile.FileName">
            <summary>
            Gets the filename of the file, including path local to the client who uploaded
            the file
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFile.ContentType">
            <summary>
            Gets the MIME content type of the file
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFile.ContentLength">
            <summary>
            Gets the length of the file in bytes
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFile.InputStream">
            <summary>
            Gets a stream through which the file can be accessed
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection">
            <summary>
            Represents a name/value collection of files uploaded through a HTTP POST request.
            The collection supports multiple values per name through the GetValues methods.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.Add(System.String,Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFile)">
            <summary>
            Adds a file to the collection under the given key
            </summary>
            <param name="key">Key under which to add the file</param>
            <param name="file">File to add</param>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.GetFiles(System.Int32)">
            <summary>
            Gets all files found under the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.GetFiles(System.String)">
            <summary>
            Gets all files found under the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.Get(System.Int32)">
            <summary>
            Gets the first file found under the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.Get(System.String)">
            <summary>
            Gets the first file found under the given key
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.GetKey(System.Int32)">
            <summary>
            Gets the key of the element at the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.Item(System.Int32)">
            <summary>
            See <see cref="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.Get(System.Int32)"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.Item(System.String)">
            <summary>
            See <see cref="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.Get(System.String)"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostFileCollection.AllKeys">
            <summary>
            Gets a list of all keys in the collection
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostParseException">
            <summary>
            Exception that is thrown if an error occurs during HTTP POST request parsing
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.HttpPostParseException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Constructor.ConstructService.Process">
            <summary>
            Create new instance of specified service type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Constructor.ConstructService.Environment">
            <summary>
            Environment service instance will inherit
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.DsspServiceBase.DssLoggingCategories">
            <summary> Dss Standard Log Categories </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.DssLoggingCategories.ConsoleMessage">
            <summary> log a simple console message </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.DssLoggingCategories.Fault">
            <summary> log a fault </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.DssLoggingCategories.Exception">
            <summary> log an exception </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.DssLoggingCategories.TraceMessage">
            <summary> log a general trace message </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase">
            <summary>
            Logging functions
            </summary>
            <summary>
            Base class for service implementations
            </summary>
            <remarks>All service implementation classes must derive from this class. It provides infrastructure for
            service start, shutdown, configuration and discovery. 
            It maintains state regarding service instance information and the local Dss node environment</remarks>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ConsoleTag">
            <summary> String prefix for Info level output </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ConsoleWarningTag">
            <summary> String prefix for Warning level output </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ConsoleErrorTag">
            <summary> String prefix for Warning level output </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.diagnosticsInstance">
            <summary> DiagnosticsInstance to use </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Log(System.Diagnostics.TraceLevel,System.Diagnostics.TraceLevel,System.Xml.XmlQualifiedName,System.String,System.String,System.String,Microsoft.Dss.Services.ConsoleOutput.ConsoleOutputPort)">
            <summary>
            Logs a string to the OS debug console and if the service which does the logging is started, also sends an
            Insert message to local node ConsoleOutput service.
            </summary>
            <param name="filterLevel">Filter level to apply</param>
            <param name="traceLevel">Current trace level to evaluate against</param>
            <param name="category">Category name for this message</param>
            <param name="source">Service URI</param>
            <param name="message">Message string</param>
            <param name="detail">Detail string or user specified object encoded as xml, providing additional detail for this message</param>
            <param name="consolePort">Operation port bound to local ConsoleOutput service</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogToConsole(System.Diagnostics.TraceLevel,System.Xml.XmlQualifiedName,System.String,System.String,System.DateTime)">
            <summary>
            Logs a string to the OS console 
            </summary>
            <remarks>
            For performance reasons, this method is called from the 
            Console Output Service once it's instantiated (before the console 
            output service is up, the DssLogHandler will call this method).
            Since the console output service doesn't understand logdetail objects,
            this method must take inputs understood by the console output service
            (like log level and category).
            </remarks>
            <param name="traceLevel">Trace level of the message being logged</param>
            <param name="category">Category name for this message</param>
            <param name="instance">Service URI</param>
            <param name="message">Message string</param>
            <param name="timestamp">Timestamp of the log</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SetActivityData(System.Enum,System.String)">
            <summary>
            Sets an activity activity 
            </summary>
            <param name="activity"> the activity activity to set </param>
            <param name="value"> the value to use </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SetActivityData(System.String,System.String)">
            <summary>
            Sets an activity  
            </summary>
            <param name="activity"> the activity to set </param>
            <param name="value"> the value to use </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetActivityData(System.Enum)">
            <summary>
            Gets an activity  
            </summary>
            <param name="activity"> the activity to get </param>
            <returns> the value of the activity data </returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetActivityData(System.String)">
            <summary>
            Gets an activity  
            </summary>
            <param name="activity"> the activity to get </param>
            <returns> the value of the activity data </returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ClearActivityData(System.Enum)">
            <summary>
            Clears an activity 
            </summary>
            <param name="activity"> the activity to clear </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ClearActivityData(System.String)">
            <summary>
            Clears an activity 
            </summary>
            <param name="activity"> the activity to clear </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ClearAllActivityData">
            <summary>
            Clears all activity elements
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.Enum,System.Object[])">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.Diagnostics.TraceLevel,System.Enum,System.Object[])">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="level">TraceLevel to evaluate against rather than the current TraceLevel of the TS.Services TraceSwitch.</param>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.String)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="level">TraceLevel to evaluate against rather than the current TraceLevel of the TS.Services TraceSwitch.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.Xml.XmlQualifiedName,System.String)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(W3C.Soap.Fault)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="fault">SOAP fault to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.String,W3C.Soap.Fault)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="message">A summary which is prefixed to the Reason Text</param>
            <param name="fault">SOAP fault to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.Xml.XmlQualifiedName,System.String,W3C.Soap.Fault)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="message">Message to log.</param>
            <param name="fault">SOAP fault to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.Exception)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.String,System.Exception)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="message">An optional message prefix</param>
            <param name="exception">The exception to log</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.Xml.XmlQualifiedName,System.Exception)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogError(System.Xml.XmlQualifiedName,System.String,System.Exception)">
            <summary>
            Logs message with TraceLevel.Error
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="message">An optional message prefix</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogWarning(System.Enum,System.Object[])">
            <summary>
            Logs message with TraceLevel.Warning
            </summary>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogWarning(System.Diagnostics.TraceLevel,System.Enum,System.Object[])">
            <summary>
            Logs message with TraceLevel.Warning
            </summary>
            <param name="level">TraceLevel to evaluate against rather than the current TraceLevel of the TS.Services TraceSwitch.</param>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogWarning(System.String)">
            <summary>
            Logs message with TraceLevel.Warning
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogWarning(System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Logs message with TraceLevel.Warning
            </summary>
            <param name="level">TraceLevel to evaluate against rather than the current TraceLevel of the TS.Services TraceSwitch.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogWarning(System.Xml.XmlQualifiedName,System.String)">
            <summary>
            Logs message with TraceLevel.Warning
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogWarning(System.Exception)">
            <summary>
            Logs message with TraceLevel.Warning
            </summary>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogWarning(System.Xml.XmlQualifiedName,System.Exception)">
            <summary>
            Logs message with TraceLevel.Warning
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogWarning(System.Xml.XmlQualifiedName,System.String,System.Exception)">
            <summary>
            Logs message with TraceLevel.Warning
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="message">An optional message prefix</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogInfo(System.Enum,System.Object[])">
            <summary>
            Logs message with TraceLevel.Info
            </summary>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogInfo(System.Diagnostics.TraceLevel,System.Enum,System.Object[])">
            <summary>
            Logs message with TraceLevel.Info
            </summary>
            <param name="level">TraceLevel to evaluate against rather than the current TraceLevel of the TS.Services TraceSwitch.</param>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogInfo(System.String)">
            <summary>
            Logs message with TraceLevel.Info
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogInfo(System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Logs message with TraceLevel.Info
            </summary>
            <param name="level">TraceLevel to evaluate against rather than the current TraceLevel of the TS.Services TraceSwitch.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogInfo(System.Xml.XmlQualifiedName,System.String)">
            <summary>
            Logs message with TraceLevel.Info
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogInfo(System.Exception)">
            <summary>
            Logs message with TraceLevel.Info
            </summary>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogInfo(System.Xml.XmlQualifiedName,System.Exception)">
            <summary>
            Logs message with TraceLevel.Info
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogInfo(System.Xml.XmlQualifiedName,System.String,System.Exception)">
            <summary>
            Logs message with TraceLevel.Info
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="message">An optional message prefix</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogVerbose(System.Enum,System.Object[])">
            <summary>
            Logs message with TraceLevel.Verbose
            </summary>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogVerbose(System.Diagnostics.TraceLevel,System.Enum,System.Object[])">
            <summary>
            Logs message with TraceLevel.Verbose
            </summary>
            <param name="level">TraceLevel to evaluate against rather than the current TraceLevel of the TS.Services TraceSwitch.</param>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogVerbose(System.String)">
            <summary>
            Logs message with TraceLevel.Verbose
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogVerbose(System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Logs message with TraceLevel.Verbose
            </summary>
            <param name="level">TraceLevel to evaluate against rather than the current TraceLevel of the TS.Services TraceSwitch.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogVerbose(System.Xml.XmlQualifiedName,System.String)">
            <summary>
            Logs message with TraceLevel.Verbose
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogVerbose(System.Exception)">
            <summary>
            Logs message with TraceLevel.Verbose
            </summary>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogVerbose(System.String,System.Exception)">
            <summary>
            Logs message with TraceLevel.Verbose
            </summary>
            <param name="message">An optional message prefix</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogVerbose(System.Xml.XmlQualifiedName,System.Exception)">
            <summary>
            Logs message with TraceLevel.Verbose using the current TraceLevel of the TS.Services TraceSwitch
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogVerbose(System.Xml.XmlQualifiedName,System.String,System.Exception)">
            <summary>
            Logs message with TraceLevel.Verbose using the current TraceLevel of the TS.Services TraceSwitch
            </summary>
            <param name="category">Classify log message with an XML Qualified Name.</param>
            <param name="message">an optional message prefix</param>
            <param name="exception">Exception to log.</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Log(System.Enum,System.Object[])">
            <summary>
            Logs a message using the default trace level for the message
            </summary>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Log(System.Diagnostics.TraceLevel,System.Enum,System.Object[])">
            <summary>
            Log a message
            </summary>
            <param name="level"> trace level </param>
            <param name="category"> category enum </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Log(Microsoft.Dss.Diagnostics.LogDetails,System.Object[])">
            <summary>
            Log a message
            </summary>
            <param name="logDetails"> logdetails object </param>
            <param name="args"> category arguments </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Log(System.Boolean,System.Boolean,Microsoft.Dss.Diagnostics.LogDetails)">
            <summary>
            Log a message
            </summary>
            <param name="addTimeStamp"> Add a timestamp to the log object </param>
            <param name="populateOrigin"> Populate the origin on the log object </param>
            <param name="logDetails"> logdetails object </param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogDssMessage(System.String,Microsoft.Dss.ServiceModel.DsspServiceBase.DssLoggingCategories,System.Nullable{System.Diagnostics.TraceLevel},System.Diagnostics.TraceLevel,Microsoft.Dss.Diagnostics.DiagnosticsInstance,System.String,System.Xml.XmlQualifiedName,System.Object[])">
            <summary> Logs a dss message </summary>
            <param name="loggingNamespace">Namespace to use when logging</param>
            <param name="logCategory">Structured logging category</param>
            <param name="filterLevel">Filter level to apply, or null to use the trace switch mapping</param>
            <param name="traceLevel">Current trace level to evaluate against</param>
            <param name="loggingInstance">Diagnostics logging instance to use</param>
            <param name="source">Source service</param>
            <param name="category">Category name for this message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogStructuredMessage(System.Nullable{System.Diagnostics.TraceLevel},Microsoft.Dss.Diagnostics.DiagnosticsInstance,System.String,Microsoft.Dss.Diagnostics.LogDetails,System.Object[])">
            <summary> Logs a structured message </summary>
            <param name="filterLevel">Filter level to apply, or null to use the trace switch mapping</param>
            <param name="loggingInstance">Diagnostics logging instance to use</param>
            <param name="source">Source service</param>
            <param name="logDetails">LogDetails object</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogStructuredMessage(System.Nullable{System.Diagnostics.TraceLevel},Microsoft.Dss.Diagnostics.DiagnosticsInstance,System.String,System.Boolean,System.Boolean,Microsoft.Dss.Diagnostics.LogDetails)">
            <summary> Logs a structured message </summary>
            <param name="filterLevel">Filter level to apply, or null to use the trace switch mapping</param>
            <param name="loggingInstance">Diagnostics logging instance to use</param>
            <param name="source">Source service</param>
            <param name="addTimeStamp"> Add a timestamp to the log object </param>
            <param name="populateOrigin"> Populate the origin on the log object </param>
            <param name="logDetails">LogDetails object</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SelectCategoryTypeFromTraceLevel(System.Diagnostics.TraceLevel)">
            <summary> selects a default category type from a trace level </summary>
            <param name="level">Tracelevel to evaluate</param>
            <returns>a selected category type</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogExceptionMessage(System.Nullable{System.Diagnostics.TraceLevel},System.Diagnostics.TraceLevel,System.Xml.XmlQualifiedName,System.String,System.Exception)">
            <summary> Logs an exception message </summary>
            <param name="filterLevel">Filter level to apply, or null to use the trace switch mapping</param>
            <param name="traceLevel">Current trace level to evaluate against</param>
            <param name="category">Category name for this message</param>
            <param name="message">Message string</param>
            <param name="exception">Exception object</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogFaultMessage(System.Nullable{System.Diagnostics.TraceLevel},System.Diagnostics.TraceLevel,System.Xml.XmlQualifiedName,System.String,W3C.Soap.Fault)">
            <summary> Logs a fault message </summary>
            <param name="filterLevel">Filter level to apply, or null to use the trace switch mapping</param>
            <param name="traceLevel">Current trace level to evaluate against</param>
            <param name="category">Category name for this message</param>
            <param name="message">Message string</param>
            <param name="fault">Fault object</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogConsoleMessage(System.Nullable{System.Diagnostics.TraceLevel},System.Diagnostics.TraceLevel,System.Xml.XmlQualifiedName,System.String)">
            <summary> Logs a console message </summary>
            <param name="filterLevel">Filter level to apply, or null to use the trace switch mapping</param>
            <param name="traceLevel">Current trace level to evaluate against</param>
            <param name="category">Category name for this message</param>
            <param name="message">Message string</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogDssMessage(Microsoft.Dss.ServiceModel.DsspServiceBase.DssLoggingCategories,System.Nullable{System.Diagnostics.TraceLevel},System.Diagnostics.TraceLevel,System.Xml.XmlQualifiedName,System.Object[])">
            <summary> Logs a dss message </summary>
            <param name="logCategory">Structured logging category</param>
            <param name="filterLevel">Filter level to apply, or null to use the trace switch mapping</param>
            <param name="traceLevel">Current trace level to evaluate against</param>
            <param name="category">Category name for this message</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogStructuredMessage(System.Nullable{System.Diagnostics.TraceLevel},System.Diagnostics.TraceLevel,System.Enum,System.Object[])">
            <summary> Logs the given category </summary>
            <param name="filterLevel">Filter level to apply, or null to use the trace switch mapping</param>
            <param name="traceLevel">Current trace level to evaluate against</param>
            <param name="category">log category</param>
            <param name="args">log arguments</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LogStructuredMessage(System.Nullable{System.Diagnostics.TraceLevel},System.Enum,System.Object[])">
            <summary> Logs the given category using the default tracelevel </summary>
            <param name="filterLevel">Filter level to apply, or null to use the trace switch mapping</param>
            <param name="category">log category</param>
            <param name="args">log arguments</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetServiceURI">
            <summary>
            Retrieves the service URI used as the log source
            </summary>
            <returns> service uri </returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.FindPartners(Microsoft.Ccr.Core.Port{System.Boolean})">
            <summary>
            For each partner attribute in the service class implementation, find or create the
            partner service specified in the attribute. 
            </summary>
            <remarks>
            The logic below is non trivial. Because you can specify one of 4 different types of partner
            enumeration, and in order to re-use as much code as possible, the routine does several multi stage
            asynchronous operations. It however unifies and handles errors all in one place making it more robust
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LoadState">
            <summary>
            Asynchronously reads from the location indicated in InitialStatePartner attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LoadState(System.String)">
            <summary>
            Asynchronously reads from the supplied file and on successs sets the field annotated with the State and InitialStatePartner attribute
            </summary>
            <param name="stateResourcePath">Location of state resource. If its a file path, the file must be under the mountpoint file folder</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.InitialStateUri(System.String)">
            <summary>
            Returns a fully qualified Uri to the persisted xml 
            of the InitialState, based on the ServiceInfo.Service
            of the current service.
            </summary>
            <param name="initialStateString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Timeout(System.Double)">
            <summary>
            Wait for ms
            </summary>
            <example>yield return Timeout(15.0);</example>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Timeout(System.TimeSpan)">
            <summary>
            Wait for TimeSpan
            </summary>
            <example>
            TimeSpan ts = DateTime.Now.Subtract(timestamp);
            yield return Timeout(ts);</example>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.FindPartner(System.String)">
            <summary>
            Find a partner from in this service instance ServiceInfo, given an un-qualified name
            </summary>
            <param name="localName">Local name (not fully qualified)</param>
            <returns>Instance of PartnerType</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SaveState(System.Object)">
            <summary>
            Post state back to the InitialStatePartner.
            </summary>
            <param name="state">The state to be persisted</param>
            <returns>The response port from the Mount Service</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SaveState(Microsoft.Dss.ServiceModel.Dssp.PartnerType,System.Object)">
            <summary>
            Sends state as a serialized XML document to the specified mountpoint accessible service Uri
            </summary>
            <param name="partner">Partner entry with Service field set to the mountpoint accesible resource URI</param>
            <param name="state">Service state</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.FindPartner(System.Xml.XmlQualifiedName,System.Collections.Generic.ICollection{Microsoft.Dss.ServiceModel.Dssp.PartnerType})">
            <summary>
            Find a partner given a qualified name, from a collection of PartnerType instances
            </summary>
            <param name="qualifiedName"></param>
            <param name="partnerList"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.UpdatePartner(System.Xml.XmlQualifiedName,Microsoft.Dss.ServiceModel.Dssp.PartnerType,System.Collections.Generic.List{Microsoft.Dss.ServiceModel.Dssp.PartnerType})">
            <summary>
            Update partner information that matches the qualified name
            </summary>
            <param name="qualifiedName">Partner name</param>
            <param name="newPartner">PartnerType instance to update partner list</param>
            <param name="partnerList">List of PartnerType instances</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.AddPartner(Microsoft.Dss.ServiceModel.Dssp.PartnerType,System.Collections.Generic.List{Microsoft.Dss.ServiceModel.Dssp.PartnerType})">
            <summary>
            Add a new PartnerType instance.
            </summary>
            <param name="partner">PartnerType instance</param>
            <param name="partnerList">PartnerType list</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.HasPartnerService">
            <summary>
            Returns true of this service instance has a Partner List Manager service
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.IssuePartnerSubscribe(System.Xml.XmlQualifiedName[])">
            <summary>
            Subscribes to the PartnerManager service for this service instance
            looking for the specified named partners
            </summary>
            <param name="names">Qualified names of partner services</param>
            <returns>PortSet where subscription results will be posted</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.#ctor(Microsoft.Dss.Core.ServiceEnvironment)">
            <summary>
            Initialization Constructor
            </summary>
            <param name="environment">Dss environment</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspServiceCreationPort)">
            <summary>
            Initilization constructor used by Dss to create a service instance
            </summary>
            <param name="creationPort">PortSet instance used to communicate creation status</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.#ctor(Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase)">
            <summary>
            Cloning constructor. Used to initialize an instance of a derived class given another instance
            </summary>
            <param name="source">Source service</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.PathCreated(Microsoft.Dss.Services.Forwarders.PathCreationPhaseTwo)">
            <summary>
            Called during second phase of service creation, during the forwarder path binding
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.StartFailed">
            <summary>
            Default implementation of start failure
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Start">
            <summary>
            Start method is called when service initialization is complete
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.AttachPortToServiceRelativePath(System.String,Microsoft.Ccr.Core.IPort,Microsoft.Dss.ServiceModel.Dssp.DsspOperationPortConfiguration)">
            <summary>
            Enables dispatching of inbound DSSP operations to user specified port for a specific 
            relative URI path (relative to the service URI)
            </summary>
            <param name="relativePath">Relative URI path</param>
            <param name="targetPort">DsspOperation port that will receive inbound operations</param>
            <param name="portConfig">Port configuration</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DetachPortFromServiceRelativePath(System.String)">
            <summary>
            Detaches a port from a service relative path disabling inbound operation dispatching to a previously attached
            DsspOperation port
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.AttachAlternateServicePorts">
            <summary>
            Uses ServiceMetadata to match ServiceMetadata.AlternateContracts[] 
            with alt ports.
            Issues AttachRelativePath to DsspForwarderControlPort 
                (see PartnerManagerService in DsspPartnerManagement.cs)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Stop">
            <summary>
            First phase of service shutdown. Disconnects service from network transports
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.Shutdown">
            <summary>
            Manages service shutdown state machine. Should be called once from a derived class to initiate shutdown
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServiceForwarderUnknownType(System.Uri)">
            <summary>
            Untyped resolution of a URI to a port that handles any type instance deriving from DsspOperation
            </summary>
            <param name="uri">A valid service URI</param>
            <returns>Port bound to service URI</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServiceForwarderUnknownTypeInternal(System.Uri)">
            <summary>
            Untyped resolution of a URI to a port that handles any type instance deriving from DsspOperation
            </summary>
            <param name="uri">A valid service URI</param>
            <returns>Port bound to service URI</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServiceForwarder``1(System.String)">
            <summary>
            Creates a strongly typed PortSet for communicating with a service.
            </summary>
            <typeparam name="T">Service operation port type</typeparam>
            <param name="uri">Service instance URI</param>
            <returns>PortSet for delivering outbound messages to service instance</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServiceForwarder``1(System.Uri)">
            <summary>
            Creates a strongly typed PortSet for communicating with a service.
            </summary>
            <typeparam name="T">Service operation port type</typeparam>
            <param name="uri">Service instance URI</param>
            <returns>PortSet for delivering outbound messages to service instance</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServiceForwarderCombinedOperations``1(System.String)">
            <summary>
            Creates a strongly typed CombinedOperationsPort for communicating with a service.
            </summary>
            <typeparam name="T">CombinedOperationsPort type</typeparam>
            <param name="uri">Service instance URI</param>
            <returns>A CombinedOperationsPort for delivering outbound messages to service instance</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServiceForwarderCombinedOperations``1(System.Uri)">
            <summary>
            Creates a strongly typed CombinedOperationsPort for communicating with a service.
            </summary>
            <typeparam name="T">CombinedOperationsPort type</typeparam>
            <param name="uri">Service instance URI</param>
            <returns>A CombinedOperationsPort for delivering outbound messages to service instance</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DirectoryInsert">
            <summary>
            Inserts information about this service instance in the local service directory, making the
            service discoverable by other services. 
            Calling this method is equivalent to constructing a directory Insert using the ServiceInfo instance from
            this service instance
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DirectoryInsert(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Constructs a directory Insert request, using the specified values
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DirectoryDelete">
            <summary>
            Deletes the service record for this service from the local directory. 
            Calling this method is equivalent to constructing a directory Delete request using the
            ServiceInfo instance from this service instance
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DirectoryQuery(System.String,System.TimeSpan)">
            <summary>
            Searches the local directory for service instances with the specified contract identifier.
            It only returns the first instance found.
            </summary>
            <param name="contract">Service contract identifier</param>
            <param name="expiration">Timeout for query results</param>
            <returns>PortSet for collecting service information</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DirectoryQuery(System.String,System.TimeSpan,Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort{Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType})">
            <summary>
            Searches the local directory for service instances with the specified contract identifier.
            It only returns the first instance found.
            </summary>
            <param name="contract">Service contract identifier</param>
            <param name="expiration">Timeout for query results</param>
            <param name="result">Result port to use for query results</param>
            <returns>PortSet for collecting service information</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DirectoryQuery(Microsoft.Dss.Services.Directory.DirectoryPort,System.String,System.TimeSpan,Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort{Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType})">
            <summary>
            Searches the local directory for service instances with the specified contract identifier.
            It only returns the first instance found.
            </summary>
            <param name="directoryPort">Directory service to query</param>
            <param name="contract">Service contract identifier</param>
            <param name="expiration">Timeout for query results</param>
            <param name="result">Result port to use for query results</param>
            <returns>PortSet for collecting service information</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.MountEmbeddedResources(System.String)">
            <summary>
            Searches local assembly for embedded resources and makes them publicly available as URIs
            through the AssemblyEmbeddedResource service
            </summary>
            <param name="prefix">URI prefix to use when mounting local resource</param>
            <returns>Success failure port that can be activated on to detect when resources have been mounted.</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.UnmountEmbeddedResources">
            <summary>
            Removes URI access to assembly resources
            </summary>
            <returns>Success failure port that can be activated on to detect when resources have been unmounted.</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.CreateService(System.String)">
            <summary>
            Issues a Create operation to the local Constructor service
            </summary>
            <param name="contract">Service contract identifier</param>
            <returns>Result port</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.CreateService(System.String,Microsoft.Dss.ServiceModel.Dssp.PartnerType[])">
            <summary>
            Issues a Create operation to the local Constructor service
            </summary>
            <param name="contract">Service contract identifier</param>
            <param name="partners">Service partners</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.CreateService(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Issues a Create operation to the local Constructor service
            </summary>
            <param name="serviceInformation">Service creation parameters</param>
            <returns>Result port</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.CreateService(Microsoft.Dss.Services.Constructor.ConstructorPort,Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Issues a Create operation to a Constructor service (local or remote)
            </summary>
            <param name="constructorPort">Constructor service operations port</param>
            <param name="serviceInformation">Service creation parameters</param>
            <returns>Result port</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DefaultDropHandler(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop)">
            <summary>
            Default implementation will send Delete to local directory and shutdown the service
            using the Shutdown() routine.
            </summary>
            <param name="drop"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DefaultLookupHandler(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup)">
            <summary>
            Default implementation uses the Partner Manager helper service to manage metadata information
            for this service instance
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DefaultHttpGetHandler(Microsoft.Dss.Core.DsspHttp.HttpGet)">
            <summary>
            Default implementation creates an HttpResponseType supplying a state transform if available
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DefaultGetHandler(Microsoft.Dss.ServiceModel.Dssp.DsspOperation)">
            <summary>
            Default implementation returns instance of the service state using the field annotated with <see cref="T:Microsoft.Dss.Core.Attributes.InitialStatePartnerAttribute"/>
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.FindServiceAliasFromScheme(System.String)">
            <summary>
            Searches the ServiceInfo.AliasList of this service for a URI with the supplied scheme
            </summary>
            <param name="scheme">URI scheme</param>
            <returns>Service URI with the specified scheme if scheme was found, otherwise ServiceInfo.Service is returned</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.FindServiceAliasFromScheme(System.String,Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Finds the service URI for the given scheme from the serviceInfo Alias list
            </summary>
            <param name="scheme">URI scheme</param>
            <param name="serviceInfo">Service instance information</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ActivateDsspOperationHandlers">
            <summary>
            Activates an Interleave arbiter using the ServiceHandler attributes on service methods.
            </summary>
            <remarks>This should be called in the service Start() method, and should be called only once.
            Service handlers must be annotated with the ServiceHandler attribute</remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ActivateDsspOperationHandlers(Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase,Microsoft.Ccr.Core.IPortSet)">
            <summary>
            Constructs and activates an Interleave arbiter using the ServiceHandler attributes on service methods of the supplied service instance
            </summary>
            <param name="service">Service instance</param>
            <param name="portSet">Service operation port instance</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.CreateInterleaveFromDsspOperationHandlers(Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase,Microsoft.Ccr.Core.IPortSet,System.String,System.Collections.Generic.List{Microsoft.Ccr.Core.Port{System.DateTime}}@)">
            <summary>
            Creates an Interleave arbiter using the ServiceHandler attributes on service methods of the supplied service instance
            </summary>
            <param name="service">Service instance</param>
            <param name="portSet">Service operation port instance</param>
            <param name="portFieldName">Field name on the service class, for operations port instance</param>
            <param name="periodicHandlerEventPorts">
            List of port instances used to trigger periodic handlers. A DateTime instance should be posted after the resulting Interleave is activated to trigger the periodic behavior</param>
            <returns></returns>
            <remarks>This method does not activate the interleave. You must explicitly activate the interleave context </remarks>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.TransformToProxy(System.Object)">
            <summary>
            Transforms a service type into an instance of the corresponding proxy type, 
            cloning each field using pre-compiled transform code
            </summary>
            <param name="dataContractInstance">Instance of a DataContractAttribute annotated type</param>
            <returns>Cloned and transformed version of the input type</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.TransformFromProxy(System.Object)">
            <summary>
            Transforms a proxy type into an instance of a user defined DataContractAttribute annotated type
            </summary>
            <param name="proxyInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.RegisterTypeForSerialization(System.Xml.XmlQualifiedName,System.Type)">
            <summary>
            Registers a type with the runtime so it can properly be serialized on the network
            </summary>
            <remarks>Use only for types that implement IDssSerializable directly and are not annotated with the DataContract attribute</remarks>
            <param name="qualifiedName">Xml qualified name of the type</param>
            <param name="serializableType">Type that needs to be serialized/deserialized and implements IDssSerializable</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription``1">
            <summary>
            Returns a type filter description string suitable for use by the subscription manager.
            </summary>
            <typeparam name="T">The type to generate the filter string for.</typeparam>
            <returns>type filter</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(System.Type)">
            <summary>
            Returns a type filter description string suitable for use by the subscription manager.
            </summary>
            <param name="type">The type to generate the filter string for.</param>
            <returns>type filter</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SubscribeHelper(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault})">
            <summary>
            <para>Passes a subscription request to the SubscriptionManager.</para>
            <para>This helper function posts responses to the subscribing service.</para>
            </summary>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner.</param>
            <param name="request">Subscription request body.</param>
            <param name="responsePort">Subscription request response port.</param>
            <returns>In the success case the SuccessResult will be posted to this port, 
            otherwise an exception will be posted.</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SubscribeHelper(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault})">
            <summary>
            <para>Passes a Reliable subscription request to the SubscriptionManager.</para>
            <para>This helper function posts responses to the subscribing service.</para>
            </summary>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner.</param>
            <param name="request">Subscription request body.</param>
            <param name="responsePort">Subscription request response port.</param>
            <returns>In the success case the SuccessResult will be posted to this port, 
            otherwise an exception will be posted.</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SubscribeHelper(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,Microsoft.Dss.ServiceModel.Dssp.IDsspSubscribeOperation,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault})">
            <summary>
            <para>Passes a subscription operation, preserving any SOAP headers (such as a LINQ query) to the SubscriptionManager.</para>
            <para>This helper function posts responses to the subscribing service.</para>
            </summary>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner.</param>
            <param name="subscribeOperation">Subscription operation</param>
            <param name="responsePort">Subscription request response port.</param>
            <returns>In the success case the SuccessResult will be posted to this port, 
            otherwise an exception will be posted.</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotification``1(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,System.Object)">
            <summary>
            Sends a message to the subscription manager to send a notification to all susbscribers
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="notificationBody">Message body to send in the notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotification``1(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,System.Object,System.String[])">
            <summary>
            Sends a message to the subscription manager to send a notification to all susbscribers
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="notificationBody">Message body to send in the notification</param>
            <param name="filter">Filter string to be sent to the subscription manager for this notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotification``1(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,System.String,System.Object)">
            <summary>
            Sends a message to the subscription manager to send a notification.
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="subscriber">Address of a subscriber to notify. If this is null or Empty then all subscribers are notified</param>
            <param name="notificationBody">Message body to send in the notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotificationToTarget``1(System.String,Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,System.Object)">
            <summary>
            Sends a message to the subscription manager to send a notification to a single subscriber
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subscriber">Address of a subscriber to notify.</param>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="notificationBody">Message body to send in the notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotification``1(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,System.String,System.Object,System.String[])">
            <summary>
            Sends a message to the subscription manager to send a notification.
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="subscriber">Address of a subscriber to notify. If this is null or Empty then all subscribers are notified</param>
            <param name="notificationBody">Message body to send in the notification</param>
            <param name="filter">Filter string to be sent to the subscription manager for this notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotificationToTarget``1(System.String,Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,System.Object,System.String[])">
            <summary>
            Sends a message to the subscription manager to send a notification to a single subscriber
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subscriber">Address of a subscriber to notify.</param>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="notificationBody">Message body to send in the notification</param>
            <param name="filter">Filter string to be sent to the subscription manager for this notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotification``1(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,``0)">
            <summary>
            Sends a message to the subscription manager to send a notification to all susbscribers
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="message">Message to send as a notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotification``1(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,``0,System.String[])">
            <summary>
            Sends a message to the subscription manager to send a notification to all susbscribers
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="message">Message to send as a notification</param>
            <param name="filter">Filter string to be sent to the subscription manager for this notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotification``1(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,System.String,``0)">
            <summary>
            Sends a message to the subscription manager to send a notification.
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="subscriber">Address of a subscriber to notify. If this is null or Empty then all subscribers are notified</param>
            <param name="message">Message to send as a notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotificationToTarget``1(System.String,Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,``0)">
            <summary>
            Sends a message to the subscription manager to send a notification to a specific subscriber
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subscriber">Address of a subscriber to notify.</param>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="message">Message to send as a notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotification``1(Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,System.String,``0,System.String[])">
            <summary>
            Sends a message to the subscription manager to send a notification.
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="subscriber">Address of a subscriber to notify. If this is null or Empty then all subscribers are notified</param>
            <param name="message">Message to send as a notification</param>
            <param name="filter">Filter string to be sent to the subscription manager for this notification</param>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.SendNotificationToTarget``1(System.String,Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort,``0,System.String[])">
            <summary>
            Sends a message to the subscription manager to send a notification to a specific target.
            </summary>
            <typeparam name="T">The message type to send as a notification</typeparam>
            <param name="subscriber">Address of a subscriber to notify.</param>
            <param name="subMgrPort">Operations port of the service's Subscription Manager partner</param>
            <param name="message">Message to send as a notification</param>
            <param name="filter">Filter string to be sent to the subscription manager for this notification</param>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.LoggingInstance">
            <summary> Gets or sets the DiagnosticsInstance to use </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.PartnerEnumerationTimeout">
            <summary>
            Timeout value for service partner enumeration
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.PartnerUseExistingOrCreateTimeout">
            <summary>
            Timeout value for finding a partner in the local service directory before attempting partner creation
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServicePhase">
            <summary>
            Current service phase
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.MainPortInterleave">
            <summary>
            Interleave arbiter instance that has been activated to manage concurrent access
            for the main operation port handlers
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServiceMetadata">
            <summary>
            Service implementation metadata reflected from attributes during service construction
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServiceInfo">
            <summary>
            Service instance information. Contains the service URI
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.AlternateContractServiceInfo">
            <summary>
            List of <see cref="T:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType"/> 
            instances for each alternate contract this service implements
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ServiceCreationPort">
            <summary>
            PortSet used for communicating service creation results. Not used beyond the service start phase
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.StateTransformPath">
            <summary>
            Path to XML transform on serialized service state. Applied on HTTP Get response. Set if the StateTransform field is specified on the
            InitialStatePartner attribute
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.PartnerListManagerPort">
            <summary>
            Access to the Partner List Manager instance for this service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ControlPanelPort">
            <summary>
            Control panel service instance forwarder port
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.DirectoryPort">
            <summary>
            Service port to local node Root Service directory
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ConstructorPort">
            <summary>
            Service port bound to local node Service constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ConsoleOutputPort">
            <summary>
            Service port bound to Console Output Service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.ContractToHttpUri">
            <summary>
            Dictionary of service uris for every alternate contract implementation
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.DsspHttpUtilitiesPort">
            <summary>
            Dss Http utilities port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.DsspHttpUtilitiesBase">
            <summary>
            Common implementation for Dss Http utility requests
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.DsspHttpUtilitiesBase.#ctor(System.Net.HttpListenerContext)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.DsspHttpUtilitiesBase.#ctor(Microsoft.Dss.Core.DsspHttp.HttpPost)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.DsspHttpUtilitiesBase.Context">
            <summary>
            HttpListener context
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.DsspHttpUtilitiesBase.PostOperation">
            <summary>
            HttpPost instance associated with the Http Listener context
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.ReadFormDataBase">
            <summary>
            Common ReadFormData class for form data parsing
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.ReadFormDataBase.#ctor(Microsoft.Dss.Core.DsspHttp.HttpPost)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.ReadFormDataBase.#ctor(System.Net.HttpListenerContext)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.ReadFormData">
            <summary>
            Extracts HTML form data from a HTTP POST request stream. Multipart forms
            (which are needed for file uploads) are not supported, for this purpose use
            <see cref="T:Microsoft.Dss.Core.DsspHttpUtilities.ReadAllFormData"/> instead
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.ReadFormData.#ctor(Microsoft.Dss.Core.DsspHttp.HttpPost)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.ReadFormData.ResultPort">
            <summary>
            Result PortSet
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.ReadAllFormData">
            <summary>
            Extracts all HTML form data from an HTTP POST request stream. Supports both
            multipart and standard forms, as well as file uploads.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.ReadAllFormData.#ctor(Microsoft.Dss.Core.DsspHttp.HttpPost)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.ReadAllFormData.#ctor(System.Net.HttpListenerContext)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.ReadAllFormData.ResultPort">
            <summary>
            Result PortSet
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.ReadRequestToStream">
            <summary>
            Reads from an http request stream and writes the data to a supplied output stream
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.ReadRequestToStream.#ctor(System.Net.HttpListenerContext,System.IO.Stream)">
            <summary>
            Initialization constructor
            </summary>
            <param name="context"></param>
            <param name="outputStream"></param>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.ReadRequestToStream.ResultPort">
            <summary>
            Result PortSet
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.ReadRequestToStream.OutputStream">
            <summary>
            Output stream for data read from http request
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.WriteResponseFromStream">
            <summary>
            Reads the data from a supplied source stream and writes them to an HTTP response stream
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.WriteResponseFromStream.#ctor(System.Net.HttpListenerContext,System.IO.Stream,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="context"></param>
            <param name="inputStream"></param>
            <param name="mediaType"></param>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.WriteResponseFromStream.ResultPort">
            <summary>
            Result PortSet
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.WriteResponseFromStream.InputStream">
            <summary>
            Source data stream
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Core.DsspHttpUtilities.WriteResponseFromStream.MediaType">
            <summary>
            HTTP MediaType identifier to set in the HTTP response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.DsspHttpUtilitiesService">
            <summary>
            Internal utility service that helps with HTTP request/response handling
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.DsspHttpUtilitiesService.Create(Microsoft.Dss.Core.ServiceEnvironment)">
            <summary>
            Creates an instance of this utility class
            </summary>
            <param name="environment"><see cref="T:Microsoft.Dss.Core.ServiceEnvironment"/>  to use</param>
            <returns>Operations port for interacting with this service</returns>
        </member>
        <member name="T:Microsoft.Dss.Core.DsspHttpUtilities.Utilities">
            <summary>
            Http utilities for handling HttpListener request/response
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Core.DsspHttpUtilities.Utilities.HttpClose(System.Net.HttpListenerContext)">
            <summary>
            Properly closes an HttpListener request/response context
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.PartnerSubscribeResultsPort">
            <summary>
            Used for getting partner subscription results
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.Contract">
            <summary>
            Contract class
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.PartnerListManager.Contract.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.Subscribe">
            <summary>
            Subscribe operation
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.GetOperation">
            <summary>
            Get operation
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.Upsert">
            <summary>
            Upsert of a single partner
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.Upsert.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.Upsert.#ctor(Microsoft.Dss.ServiceModel.Dssp.PartnerType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.UpsertMultiple">
            <summary>
            Upsert of multiple partners
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.UpsertMultiple.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.UpsertMultiple.#ctor(Microsoft.Dss.ServiceModel.Dssp.PartnerListType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.Query">
            <summary>
            Query of partners by name
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.QueryServiceInfoRequest">
            <summary>
            Query request body
            </summary>   
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.QueryServiceSummaryRequest">
            <summary>
            Query request body
            </summary>   
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.QueryServiceSummaryResponse">
            <summary>
            Query Response with service summary for service instance
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.PartnerListManager.QueryServiceSummaryResponse.ServiceSummaries">
            <summary>
            List of service summaries
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.QueryServiceInfo">
            <summary>
            Query runtime service information
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.QueryServiceSummary">
            <summary>
            Query service summary for this service (equivalent to a targetted query to the contract directory)
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort">
            <summary>
            Operation port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.#ctor">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.Services.PartnerListManager.GetOperation)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.Core.DsspHttp.HttpGet)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.Services.PartnerListManager.Upsert)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.Services.PartnerListManager.UpsertMultiple)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.Services.PartnerListManager.Query)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.Services.PartnerListManager.QueryServiceInfo)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.Services.PartnerListManager.QueryServiceSummary)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.Post(Microsoft.Dss.Services.PartnerListManager.Subscribe)">
            <summary>
            Post method
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort.op_Implicit(Microsoft.Dss.Services.PartnerListManager.PartnerListManagerPort)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.PartnerListManager.Upsert}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.PartnerListManager.ServiceMetadataManager">
            <summary>
            Service metadata manager serves three functions:
            1) respond to partner list requests and manage the services partners
            2) respond to service summary requests and return the service summary from the contract directory
            3) Respond to ServiceInfo requests and return the ServiceInfo for this service
            items 2 and 3 are in their own namespace and are only accessible through GET
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.DsspServiceBase.ServiceRuntimePhase">
            <summary>
            Service runtime phases
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.ServiceRuntimePhase.Created">
            <summary>
            Service class constructor called
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.ServiceRuntimePhase.Initialized">
            <summary>
            Service environment initialized
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.ServiceRuntimePhase.PartnerEnumeration">
            <summary>
            Partner enumeration in progress
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.ServiceRuntimePhase.Started">
            <summary>
            Service second phase complete. Bound to transports, Start method called
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.ServiceRuntimePhase.Stopped">
            <summary>
            Service stopped, not listening to inbound messages
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.ServiceRuntimePhase.Shutdown">
            <summary>
            Service resources freed, decoupled from transports
            </summary>
        </member>
        <member name="F:Microsoft.Dss.ServiceModel.DsspServiceBase.ServiceRuntimePhase.ShutdownDueToFailure">
            <summary>
            Service shutdown due to falure during the startup phases
            </summary>
        </member>
        <member name="T:Microsoft.Dss.ServiceModel.DsspServiceBase.DssTypeHelper">
            <summary>
            Helper functions for working with Proxy types and Dss serialization
            </summary>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DssTypeHelper.TransformToProxy(System.Object)">
            <summary>
            Transforms a service type into an instance of the corresponding proxy type, 
            cloning each field using pre-compiled transform code
            </summary>
            <param name="dataContractInstance">Instance of a DataContractAttribute annotated type</param>
            <returns>Cloned and transformed version of the input type</returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DssTypeHelper.TransformFromProxy(System.Object)">
            <summary>
            Transforms a proxy type into an instance of a user defined DataContractAttribute annotated type
            </summary>
            <param name="proxyInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.ServiceModel.DsspServiceBase.DssTypeHelper.RegisterTypeForSerialization(System.Xml.XmlQualifiedName,System.Type)">
            <summary>
            Registers a type with the runtime so it can properly be serialized on the network
            </summary>
            <remarks>Use only for types that implement IDssSerializable directly and are not annotated with the DataContract attribute</remarks>
            <param name="qualifiedName">Xml qualified name of the type</param>
            <param name="serializableType">Type that needs to be serialized/deserialized and implements IDssSerializable</param>
        </member>
        <member name="T:Microsoft.Dss.Diagnostics.DssLogHandlerTraceListener">
            <summary>Implementation of TraceListener class so that we can intercept all messages sent to 
            the trace listener and pipe them to the Console Output service as well./// </summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandlerTraceListener.TagLength">
            <summary>Tag length.</summary>
        </member>
        <member name="F:Microsoft.Dss.Diagnostics.DssLogHandlerTraceListener.tag">
            <summary>String tag.</summary>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandlerTraceListener.#ctor(System.String)">
            <summary>Initializes a new instance of the DssLogHandlerTraceListener class.</summary>
            <param name="tag">Four characters long string tag.</param>
        </member>
        <member name="M:Microsoft.Dss.Diagnostics.DssLogHandlerTraceListener.WriteInternal(System.String,System.String)">
            <summary>Writes message and category.</summary>
            <param name="message">Message to trace.</param>
            <param name="category">Category to trace.</param>
        </member>
        <member name="T:Microsoft.Dss.Services.Constructor.Contract">
            <summary>
            Contract class
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Constructor.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Constructor.CreateWithRuntimeConfigRequest">
            <summary>
            Advanced service create request with runtime configuration options
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Constructor.CreateWithRuntimeConfigRequest.RuntimeConfiguration">
            <summary>
            Runtime configuration options used to override service implementation attributes
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Constructor.ConstructorPort">
            <summary>
            Constructor Service Operations Port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Constructor.CreateWithRuntimeConfiguration">
            <summary>
            Create service operation
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Constructor.CreateWithRuntimeConfiguration.#ctor(Microsoft.Dss.Services.Constructor.CreateWithRuntimeConfigRequest,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.CreateResponse,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Constructor.CreateWithRuntimeConfiguration.#ctor(Microsoft.Dss.Services.Constructor.CreateWithRuntimeConfigRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Constructor.CreateWithRuntimeConfiguration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Constructor.Create">
            <summary>
            Create service operation
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Constructor.Create.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.CreateResponse,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Constructor.Create.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Constructor.Create.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ManifestLoaderClient.ManifestLoaderClientService.FindAndStartClientService(Microsoft.Dss.ServiceModel.Dssp.PartnerType)">
            <summary>
            Find a client service by assembly or contract
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ManifestLoaderClient.ManifestLoaderClientService.StartClientManifest(System.String)">
            <summary>
            Start a client service by retrieving the manifest
            </summary>
            <param name="manifest"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.Contract">
            <summary>
            Contract class
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.ManifestResultType">
            <summary>
            Result of manifest load
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.ManifestResultType.ManifestIdentifier">
            <summary>
            Manifest identifier (URI)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.ManifestResultType.Manifest">
            <summary>
            Deserialized and validated manifest contents
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.ManifestResultType.ManifestResult">
            <summary>
            Result of manifest load, from manifest loader service
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.State">
            <summary>
            Manifest loader client state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.State.ManifestResultList">
            <summary>
            Manifest loading results
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.InsertRequestType">
            <summary>
            Insert request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.InsertRequestType.Manifest">
            <summary>
            Manifest to deserializem validate and load through the ManifestLoader
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.InsertResponseType">
            <summary>
            Response to Insert
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.InsertResponseType.ManifestResult">
            <summary>
            Manifest loading result
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.Partners">
            <summary>
            Qualified names for Manifest Loader Client partner services
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.Partners.InitialManifestString">
            <summary>
            URI of manifest to load on Dss Node startup
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.Partners.InitialContractString">
            <summary>
            Contract identifier of service to load on node startup
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.Partners.InitialAssemblyString">
            <summary>
            Assembly location (URI) of service to load on node startup
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.Partners.InitialManifest">
            <summary>
            URI of manifest to load on Dss Node startup
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.Partners.InitialContract">
            <summary>
            Contract identifier of service to load on startup
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoaderClient.Partners.InitialAssembly">
            <summary>
            Assembly location (URI) of service to load on node startup
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.ManifestLoaderClientPort">
            <summary>
            Manifest loader client operations port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoaderClient.ValidateManifest">
            <summary>
            Submit for manifest validation only, no loading
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoader.Contract">
            <summary>
            Contract class
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoader.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoader.ManifestLoaderPort">
            <summary>
            Manifest Loader operations port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoader.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ManifestLoader.Insert.#ctor(Microsoft.Dss.Services.ManifestLoader.InsertRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Services.ManifestLoader.InsertResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ManifestLoader.Insert.#ctor(Microsoft.Dss.Services.ManifestLoader.InsertRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ManifestLoader.Insert.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoader.CreateResultType">
            <summary>
            Individual service create result
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoader.CreateResultType.Contract">
            <summary>
            Service contract identifier
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoader.CreateResultType.Result">
            <summary>
            Result status (true for success)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoader.CreateResultType.Info">
            <summary>
            Create Response from Service Constructor
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoader.CreateResultType.Name">
            <summary>
            Name as specified in the manifest
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ManifestLoader.CreateResultType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ManifestLoader.CreateResultType.#ctor(System.Boolean,System.String,Microsoft.Dss.ServiceModel.Dssp.CreateResponse,System.Xml.XmlQualifiedName)">
            <summary>
            Initialization constructor
            </summary>
            <param name="success"></param>
            <param name="contract"></param>
            <param name="info"></param>
            <param name="name"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoader.InsertRequestType">
            <summary>
            Insert request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ManifestLoader.InsertRequestType.Manifest">
            <summary>
            Manifest to process
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ManifestLoader.InsertResponseType">
            <summary>
            Response for Insert
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ManifestLoader.InsertResponseType.CopyTo(Microsoft.Dss.Services.ManifestLoader.InsertResponseType)">
            <summary>
            Copy
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ManifestLoader.InsertResponseType.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Services.ManifestLoader.InsertResponseType.CreateResultList">
            <summary>
            List of create results
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.ControlPanel.NodeShutdownAndExitHandler(System.Boolean)">
            <summary>
            Shuts down the entire node. Either initiated from a call on BootLoader.Dispose() or a Drop or DropProcess
            on the control panel service
            </summary>
            <param name="exitProcess">a value that indicates whether to kill the process</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.ControlPanelState">
            <summary>
            State
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.ControlPanelState.Node">
            <summary>
            Root uri for the current node.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.ControlPanelState.InstalledServices">
            <summary>
            List of installed services
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.ControlPanelState.Manifests">
            <summary>
            List of manifests enumerated in local installation directory
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.ControlPanelState.LastError">
            <summary>
            Last fault recorded
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.ControlPanelState.Timescale">
            <summary>
            Time dilation factor, multiplied by all timespans specified to calculate absolute
            time duration for time-outs and other time dependent operations
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.ManifestRecord">
            <summary>
            Description of manifest file for a particular service contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.ManifestRecord.Contract">
            <summary>
            Contract identifier for service referenced in manifest list
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.ManifestRecord.Manifests">
            <summary>
            List of manifests referencing the service contract
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.TypeDescription">
            <summary>
            Description of a Dss service type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.TypeDescription.FromType(System.Type)">
            <summary>
            Generates a type description given a type from a Dss service
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeDescription.Name">
            <summary>
            Type name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeDescription.FullName">
            <summary>
            Full type name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeDescription.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeDescription.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeDescription.Members">
            <summary>
            Members
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeDescription.Proxy">
            <summary>
            Proxy assembly for type
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.TypeMember">
            <summary>
            Description of a member field or property in a Dss service type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.TypeMember.FromPropertyInfo(System.Reflection.PropertyInfo)">
            <summary>
            Creates instance of this class from a property
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.TypeMember.GetTypeName(System.Type)">
            <summary>
            Extract type names
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.TypeMember.SetType(System.Type)">
            <summary>
            Sets the type for this instance
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.TypeMember.FromFieldInfo(System.Reflection.FieldInfo)">
            <summary>
            Creates an instance of this class from reflection information on a type field
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeMember.Name">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeMember.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeMember.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeMember.Type">
            <summary>
            Type name this instance is describing
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeMember.Proxy">
            <summary>
            Proxy assembly
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeMember.InnerTypes">
            <summary>
            Inner types
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.TypeFinder">
            <summary>
            Information on type name and host assembly
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.TypeFinder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.TypeFinder.#ctor(System.Type)">
            <summary>
            Initialization constructor
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeFinder.Type">
            <summary>
            Type name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.TypeFinder.Assembly">
            <summary>
            Host assembly
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.InstalledService">
            <summary>
            Minimal description of an installed service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.InstalledService.Name">
            <summary>
            Service name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.InstalledService.DisplayName">
            <summary>
            Service Display Name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.InstalledService.Description">
            <summary>
            Service Description
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.InstalledService.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.InstalledService.CanCreate">
            <summary>
            Can a new instance of the service be created
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.InstalledService.CanDrop">
            <summary>
            Does the service support the DROP operation
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.InstalledService.RunningInstances">
            <summary>
            Running instances of this service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.InstalledService.Manifests">
            <summary>
            Manifests referencing this service
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.Contract">
            <summary>
            Contract definition
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ControlPanel.Contract.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.ControlPanelOperations">
            <summary>
            Control Panel service operations port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.ControlPanelOperations.Shutdown">
            <summary>
            Shut down the Node
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.UpdateRuntimeConfigurationRequest">
            <summary>
            Updates DSS runtime configuration
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ControlPanel.UpdateRuntimeConfigurationRequest.TimeScale">
            <summary>
            Factor multiplied by all timespan values used as timeouts in Dssp operations
            and ServiceBase timeout calculations.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.UpdateRuntimeConfiguration">
            <summary>
            Updates runtime configuration
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.DropProcess">
            <summary>
            DropProcess
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ControlPanel.DropProcessBody">
            <summary>
            Drops the control panel (node shutdown) and optionally kills the hosting process.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.DropProcessBody.#ctor">
            <summary>
            Creates a new DropProcessBody.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ControlPanel.DropProcessBody.#ctor(System.Boolean)">
            <summary>
            Creates a new DropProcessBody.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ControlPanel.DropProcessBody.ExitProcess">
            <summary>
            Gets or sets a values that indicates whether to exit the hosting process after the node was shut down.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.DefaultTarget.DefaultTarget.HandleHttpRequest``1(``0)">
            <summary>
            Handles any Http request, either to the default target or to any unassigned URI.
            </summary>
            <remarks>
            Returns a data structure containing information regarding all
            currently running services.
            </remarks>
            <param name="msg">Request</param>
            <returns>Running service information</returns>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.State">
            <summary>
            Default Target state, contains information about currently running services.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.DefaultTarget.State.LocationToString(Microsoft.Dss.Services.ContractDirectory.AssemblyLocations)">
            <summary>
            Converts AssemblyLocations to a string.
            Used for ConvertAll
            </summary>
            <param name="loc">AssemblyLocation</param>
            <returns>ImplementationFullName</returns>
        </member>
        <member name="M:Microsoft.Dss.Services.DefaultTarget.State.ParseAssemblyName(System.String)">
            <summary>
            Parses an assembly name out of the assembly information provided by AsselblyLocations
            </summary>
            <param name="assembly">Assembly information from AssemblyLocations</param>
            <returns>string of assembly name</returns>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.State.ServiceData">
            <summary>
            Gets or sets the list containing running service information.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.State.ContractData">
            <summary>
            Gets or sets the list containing contract information for running services.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.DefaultTarget.LocalContractCache.SanitizeStringForScript(System.String)">
            <summary>
            Prepares a string for use by javascript by doing the following...
                Removes all control characters
                Replaces all whitespace characters with the space character
                Escapes single quote, double quote and backslash characters ' -> \'  " -> \"  \ -> \\
            </summary>
            <param name="text">The input string to sanitize</param>
            <returns>The sanitized output string</returns>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.ContractData">
            <summary>
            Contains information about a Contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ContractData.Description">
            <summary>
            Gets or sets the description of contract data
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ContractData.Contract">
            <summary>
            Gets or sets the contract of contract data
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ContractData.Name">
            <summary>
            Gets or sets the name of contract data
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ContractData.DisplayName">
            <summary>
            Gets or sets the display name of contract data
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ContractData.IconPath">
            <summary>
            Gets or sets the icon path of contract data
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ContractData.SupportedOperations">
            <summary>
            Gets or sets the supported operations of contract data
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ContractData.HttpGetSupport">
            <summary>
            Gets or sets if the contract supports HttpGet
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ContractData.IsSystemService">
            <summary>
            Gets or sets if the contract is a system service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ContractData.AssemblyLocations">
            <summary>
            Gets or sets the description of contract data
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.ServiceData">
            <summary>
            Contains information about a running service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ServiceData.Uri">
            <summary>
            Gets or sets the uri for a running service.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ServiceData.UriPath">
            <summary>
            Gets or sets the UriPath for a running service.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ServiceData.Contract">
            <summary>
            Gets or sets the contract for a running service.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ServiceData.Aliases">
            <summary>
            Gets or sets the aliases for a running service.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ServiceData.Service">
            <summary>
            Gets or sets the service for a running service.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.DefaultTarget.ServiceData.Count">
            <summary>
            Gets or sets the number of instances of this service
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.HttpFaultResponse">
            <summary>
            Fault response on HTTP requests
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.DefaultTarget.HttpFaultResponse.InstanceDirectory">
            <summary>
            Service instance directory URI
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.DefaultTarget.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Lookup">
            <summary>
            Lookup with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Insert">
            <summary>
            Insert with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Delete">
            <summary>
            Delete with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Subscribe">
            <summary>
            Subscribe with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Get">
            <summary>
            Get with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Update">
            <summary>
            Update with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Query">
            <summary>
            Query with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Upsert">
            <summary>
            Upsert with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Replace">
            <summary>
            Replace with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Drop">
            <summary>
            Drop with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.Submit">
            <summary>
            Submit with untyped body and response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.DefaultTarget.DefaultTargetPort">
            <summary>
            Default Target service operations port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.DefaultTarget.DefaultTargetPort.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.SubscriptionRecord">
            <summary>
                The SubscriptionRecord represents the tuple of resources 
                relevant to servicing a subscription. 
                 - the original subscription record
                 - a cached forwarder for notifications
                 - the message index after which to start sending notifications
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionLookup._all">
            <summary>
            The set of all subscriptions
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionLookup._unconstrained">
            <summary>
            The set of all unconstrained subscriptions (i.e. no type filter, no text/regex filter)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionLookup._keyLookupList">
            <summary>
            Lookup tables for text filtes
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionLookup._regex">
            <summary>
            The set of subscriptions with regex filters
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionLookup._unfiltered">
            <summary>
            The set of subscriptions without a text/regex filter
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionLookup._typeIndex">
            <summary>
            Dictionary of subscriptions by type
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.SubscriptionLookup.KeyLookup">
            <summary>
                Friendly name for a hash we use to keep a unique list of subscriptions. 
            </summary>
            <summary>
                The KeyLookup contains the datstructures necessary to process matches 
                against subscriptions for a single key index.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionLookup.KeyLookup.Add(Microsoft.Dss.Services.SubscriptionManager.SubscriptionRecord)">
            <summary>
                The items in _matchAlways and _keyHash must be kept mutually Exclusive
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerCommon._parentService">
            <summary>
            service we are managing subscriptions for
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerCommon._parentServiceState">
            <summary>
            reference to in memory service state (not a copy!)
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerCommon.InsertHelper(Microsoft.Dss.Services.SubscriptionManager.SubscriptionType,System.String,Microsoft.Dss.Services.SubscriptionManager.MessageIndex)">
            <summary>
            simplified, synchronous version of InsertHelper used for re-nstating subscriptions
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerInternal">
            <summary>
            Internal only version that tightly couples with service instances
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerInternal._mainPortFromOwnerService">
            <summary>
            Used only when subscription manager instance is tightly coupled with another service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerInternal.#ctor(Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase)">
            <summary>
            Initialization constructor for a user-service owned subMgr instance
            </summary>
            <param name="parentService">Owner user service of this subscription manager instance</param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerInternal.Initialize(Microsoft.Ccr.Core.SuccessFailurePort)">
            <summary>
            Initializes the subscription manager when started as part of a user service
            </summary>
            <param name="resultPort"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.ReinstatedSubscriptionHeader">
            <summary>
            SOAP Header indicating notifications might have been missed.
            </summary>
            <remarks>present on the first notification successfully sent to a subscriber, after the subscription was activated again, after failure</remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.KeyListType">
            <summary>
            List of subscription keys
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.KeyListType.Key">
            <summary>
            Keys
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.QueryType">
            <summary>
            Qeury request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.QueryType.KeyList">
            <summary>
            Keys
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.QueryType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.QueryType.#ctor(System.String[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="KeyList"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.FilterType">
            <summary>
            Filter method used for filtered subscriptions
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.FilterType.Default">
            <summary>
            Use default string matching
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.FilterType.Regex">
            <summary>
            Use regular expressions
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.SubscriptionType">
            <summary>
            Subscription request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionType.QueryList">
            <summary>
            List of query filters
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionType.FilterType">
            <summary>
            Flag to indicate if the query filters are regular expression patterns.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionType.#ctor(System.String,System.DateTime,Microsoft.Dss.Services.SubscriptionManager.FilterType,Microsoft.Dss.Services.SubscriptionManager.QueryType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="expiration"></param>
            <param name="filterType"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionType.#ctor(System.String,System.DateTime,Microsoft.Dss.Services.SubscriptionManager.QueryType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="expiration"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionType.#ctor(System.String,System.DateTime,Microsoft.Dss.Services.SubscriptionManager.FilterType,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="expiration"></param>
            <param name="filterType"></param>
            <param name="queryListSize"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionType.#ctor(System.String,System.DateTime,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="expiration"></param>
            <param name="queryListSize"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage">
            <summary>
            Insert request body. Request to add a reliable subscription
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage.#ctor(System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="suspensionInterval"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage.#ctor(Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage.#ctor(System.String,System.Int32,System.DateTime,Microsoft.Dss.Services.SubscriptionManager.QueryType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="suspensionInterval"></param>
            <param name="expiration"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage.#ctor(System.String,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber">URI for Target of notifications</param>
            <param name="suspensionInterval">Interval to wait before retrying notifications to subscriber that could not be reached</param>
            <param name="expiration">Subscription expiration</param>
            <param name="queryListSize"></param>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage.SuspensionInterval">
            <summary>
            Interval to wait before retrying notifications to subscriber that could not be reached
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.SubscriptionListType">
            <summary>
            Subscription manager state. List of active subscriptions
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionListType.Subscription">
            <summary>
            Active Subscriptions
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.SubscriptionManager.SubscriptionListType.Suspended">
            <summary>
            Suspended subscriptions
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionListType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionListType.#ctor(System.Collections.Generic.List{Microsoft.Dss.Services.SubscriptionManager.SubscriptionType},System.Collections.Generic.List{Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage})">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriptions"></param>
            <param name="suspended"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage">
            <summary>
            Insert request body. Adds a standard subscription
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage.#ctor(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage.#ctor(System.String,System.DateTime,Microsoft.Dss.Services.SubscriptionManager.FilterType,Microsoft.Dss.Services.SubscriptionManager.QueryType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="expiration"></param>
            <param name="filterType"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage.#ctor(System.String,System.DateTime,Microsoft.Dss.Services.SubscriptionManager.QueryType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="expiration"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage.#ctor(System.String,System.DateTime,Microsoft.Dss.Services.SubscriptionManager.FilterType,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="expiration"></param>
            <param name="filterType"></param>
            <param name="queryListSize"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage.#ctor(System.String,System.DateTime,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="expiration"></param>
            <param name="queryListSize"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.DeleteSubscriptionMessage">
            <summary>
            Delete subscription request
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.DeleteSubscriptionMessage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.DeleteSubscriptionMessage.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.DeleteSubscriptionMessage.#ctor(System.String,System.DateTime,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="subscriber"></param>
            <param name="expiration"></param>
            <param name="queryListSize"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.DeleteSubscriptionMessage.#ctor(Microsoft.Dss.Services.SubscriptionManager.SubscriptionType)">
            <summary>
            Copy constructor
            </summary>
            <param name="copyFrom"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort">
            <summary>
            Subscription manager operations port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.Post(Microsoft.Dss.Services.SubscriptionManager.Submit)">
            <summary>
            Untyped post to the underlying PortSet
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.Post(Microsoft.Dss.Services.SubscriptionManager.Get)">
            <summary>
            Untyped post to the underlying PortSet
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop)">
            <summary>
            Untyped post to the underlying PortSet
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup)">
            <summary>
            Untyped post to the underlying PortSet
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.Post(Microsoft.Dss.Services.SubscriptionManager.InsertSubscription)">
            <summary>
            Untyped post to the underlying PortSet
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.Post(Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscription)">
            <summary>
            Untyped post to the underlying PortSet
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.Post(Microsoft.Dss.Services.SubscriptionManager.UpsertSubscription)">
            <summary>
            Untyped post to the underlying PortSet
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.Post(Microsoft.Dss.Services.SubscriptionManager.UpsertReliableSubscription)">
            <summary>
            Untyped post to the underlying PortSet
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.SubscriptionManagerPort.Post(Microsoft.Dss.Services.SubscriptionManager.DeleteSubscription)">
            <summary>
            Untyped post to the underlying PortSet
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.Submit">
            <summary>
            Submit. Used to deliver operations that need to be forwarded as notifications to subscribers
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.Submit.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.Submit.#ctor(System.Object,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.Submit.#ctor(System.Object,System.String,System.String[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="action"></param>
            <param name="keyList"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.Submit.#ctor(System.String,System.String,System.Object,System.String[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="client">URI of service issuing forwarding the notification source/cause</param>
            <param name="action">DSSP action URI</param>
            <param name="body">Operation body</param>
            <param name="keyList">Keys tagging this request used to filter notification</param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.Get.#ctor(Microsoft.Dss.ServiceModel.Dssp.GetRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Services.SubscriptionManager.SubscriptionListType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.Get.#ctor(Microsoft.Dss.ServiceModel.Dssp.GetRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.Get.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.InsertSubscription">
            <summary>
            Insert. Adds subscription
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscription.#ctor(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="requestBody"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertSubscription.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscription">
            <summary>
            Insert. Adds reliable subscription
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscription.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscription.#ctor(Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="requestBody"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.UpsertSubscription">
            <summary>
            Upsert. Adds new subscription or modifies existing one
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.UpsertSubscription.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.UpsertSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.UpsertSubscription.#ctor(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.UpsertSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.InsertSubscriptionMessage,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.UpsertReliableSubscription">
            <summary>
            Upsert. Adds a new subscription if one with the same properties is not present. Modifies existing one otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.UpsertReliableSubscription.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.UpsertReliableSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.UpsertReliableSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.InsertReliableSubscriptionMessage,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.SubscriptionManager.DeleteSubscription">
            <summary>
            Delete. Removes subscription
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.DeleteSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.DeleteSubscriptionMessage,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.DeleteSubscription.#ctor(Microsoft.Dss.Services.SubscriptionManager.DeleteSubscriptionMessage)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.SubscriptionManager.DeleteSubscription.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.UriLauncher.UriLauncherService.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspServiceCreationPort)">
            <summary>
            Default Service Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.UriLauncher.UriLauncherService.Start">
            <summary>
            Service Start
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.UriLauncher.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.UriLauncher.Contract.Identifier">
            The Unique Contract Identifier for the UrlLauncher service
        </member>
        <member name="T:Microsoft.Dss.Services.UriLauncher.UriLauncherOperations">
            <summary>
            UrlLauncher operations port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.UriLauncher.LaunchUri">
            <summary>
            Request to launch the defaul web browser with the specific URI
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.UriLauncher.LaunchUriRequest">
            <summary>
            LaunchUri request body
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.UriLauncher.LaunchUriRequest.Uri">
            <summary>
            Specifies URI to open
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.ContractDirectory">
            <summary>
            ContractDirectory Service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ContractDirectory.ContractDirectory._state">
            <summary>
            State
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ContractDirectory.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspServiceCreationPort)">
            <summary>
            ContractDirectory Default DSS Constuctor 
            </summary>
            <param name="pCreate"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ContractDirectory.Start">
            <summary>
            Entry Point for the ContractDirectory Service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ContractDirectory.SearchForRunningContracts(Microsoft.Dss.Services.Directory.DirectoryPort,System.String,Microsoft.Ccr.Core.Port{Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType[]})">
            <summary>
            Search for Running Contracts
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ContractDirectory.GetHandler(Microsoft.Dss.Services.ContractDirectory.Get)">
            <summary>
            Get Handler returns ContractDirectory State
            </summary>
            <param name="get"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ContractDirectory.QueryAssemblyLocationsHandler(Microsoft.Dss.Services.ContractDirectory.QueryAssemblyLocations)">
            <summary>
            Search for assemblies based on contract
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ContractDirectory.QueryByContractHandler(Microsoft.Dss.Services.ContractDirectory.QueryByContract)">
            <summary>
            Search for a contract
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ContractDirectory.SearchForReferencedContracts(System.Collections.Generic.List{System.String},Microsoft.Dss.Services.ContractDirectory.ContractResults)">
            <summary>
            Search for referenced contracts and add them to the results.
            Only valid to be called when query.Body.IncludeReferencedContracts
            </summary>
            <param name="referencedContracts"></param>
            <param name="results"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ContractDirectory.SearchForContract(System.String,Microsoft.Dss.Services.ContractDirectory.ContractResults,System.Func{Microsoft.Dss.Core.ContractModel.ServiceSummary,System.Boolean},System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Ccr.Core.Port{Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType[]})">
            <summary>
            Search our contract list for the specified contracts
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.ContractDirectory._interleaveContext">
            <summary>
            Coordination pattern for service handlers
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.ContractDirectory.RetryHeader">
            <summary>
            purely a marker indicating retry has occured
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.State">
            <summary>
            ContractDirectory State
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ContractDirectory.State.LocalServicePaths">
            <summary>
            The local directory paths where Dss services are located.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.RequestAssemblyLocations">
            <summary>
            Qeury request for assembly locations
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.RequestAssemblyLocations.Contract">
            <summary>
            Find a specific Contract
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.ServiceUri">
            <summary>
            A Dss Service Uri
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ServiceUri.#ctor">
            <summary>
            Default ServiceUri constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ServiceUri.#ctor(System.String)">
            <summary>
            ServiceUri string constructor
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.ServiceUri.#ctor(System.Uri)">
            <summary>
            Construct a ServiceUri from an existing Uri.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.ServiceUri.AbsoluteUri">
            <summary>
            Dss Runtime Service Uri
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.ServiceUri.Uri">
            <summary>
            Dss Runtime Service Uri
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations">
            <summary>
            Assembly locations
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.#ctor">
            <summary>
            Default AssemblyLocations constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.#ctor(System.String)">
            <summary>
            Contruct AssemblyLocations with a base path
            </summary>
            <param name="uriBase"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.RelativeLocationUri(System.String)">
            <summary>
            Return the location relative to UriBase
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.stringToUri(System.String)">
            <summary>
            Convert location to Uri
            Uses UriBase if it is set to resolve relative uri's
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.UriBase">
            <summary>
            The Uri Base for producing relative locations
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.Contract">
            <summary>
            Service contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.ImplementationRelativePath">
            <summary>
            Location of the Implementation Dll
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.ProxyRelativePath">
            <summary>
            Location of the Proxy Dll
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.TransformRelativePath">
            <summary>
            Location of the Transform Dll
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.ImplementationLocalPath">
            <summary>
            Local file system path for service implementation assembly
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.ProxyLocalPath">
            <summary>
            Local file system path for proxy assembly
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.TransformLocalPath">
            <summary>
            Local file system path for transform assembly
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.ImplementationUri">
            <summary>
            Service implementation assembly URI
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.TransformUri">
            <summary>
            Transform assembly URI
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.AssemblyLocations.ProxyUri">
            <summary>
            Proxy assembly URI
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.QueryRequest">
            <summary>
            Common query request body
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.QueryRequest.IncludeRunningServices">
            <summary>
            Include results from query to the local directory for running instances of the specified contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.QueryRequest.LoadProxies">
            <summary>
            Load proxies on the results of this query
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.QueryRequest.LoadTransforms">
            <summary>
            Load transforms on the results of this query
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.QueryRequest.IncludeReferencedContracts">
            <summary>
            Include referenced contracts in the search results
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.QueryByAssemblyNameRequest">
            <summary>
            Query request body for querying using an assembly name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.QueryByAssemblyNameRequest.AssemblyLocation">
            <summary>
            Find all services in the specified assembly
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.QueryByContractRequest">
            <summary>
            Query request body for queries using a contract identifier
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.QueryByContractRequest.Contract">
            <summary>
            Find the service that implements this contract identifier
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.ContractDirectory.QueryByContractRequest.SearchAlternateContracts">
            <summary>
            Include services that implement the contract as an alternate
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.QueryByCategoriesRequest">
            <summary>
            Query assemblies for services annotated with a given list of Dss categories
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ContractDirectory.QueryByCategoriesRequest.Categories">
            <summary>
            Match all provided categories
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.ContractResults">
            <summary>
            Full query results
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ContractDirectory.ContractResults.ContractDirectoryUri">
            <summary>
            Contract directory Uri that serviced this query
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ContractDirectory.ContractResults.ServiceSummaries">
            <summary>
            List of service summaries
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ContractDirectory.ContractResults.AssemblyLocationsList">
            <summary>
            Assembly locations list
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ContractDirectory.ContractResults.ServiceInstances">
            <summary>
            List of service instance directory records
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.Contract">
            <summary>
            DSS Contract for ContractDirectory
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ContractDirectory.Contract.Identifier">
            <summary>
            The DSS Namespace for ContractDirectory
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.ContractDirectoryPort">
            <summary>
            The ContractDirectory Operations Port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.Get">
            <summary>
            DSS Get Definition for ContractDirectory 
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.QueryByContract">
            <summary>
            Query for service information using a contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.QueryByCategories">
            <summary>
            Query for service information using a list of categories
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.QueryByAssemblyName">
            <summary>
            Query for service information using a list of categories
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ContractDirectory.QueryAssemblyLocations">
            <summary>
            Find the location of a DssContract
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.RecordListType">
            <summary>
            Service record list
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.RecordListType.Record">
            <summary>
            Service records
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.RecordListType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.RecordListType.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="eRecord"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.QueryRecordListType">
            <summary>
            Query record list
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.QueryRecordListType.QueryRecord">
            <summary>
            Service query records
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.QueryRecordListType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.QueryRecordListType.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="queryRecord"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.DeleteRequestType">
            <summary>
            Delete request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.DeleteRequestType.Record">
            <summary>
            Service record to delete
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DeleteRequestType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DeleteRequestType.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="eRecord"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.GetResponseType">
            <summary>
            Response for Get. This is the directory state
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.GetResponseType.RecordList">
            <summary>
            List of service records
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.GetResponseType.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.GetResponseType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.GetResponseType.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="eRecordList"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.InsertRequestType">
            <summary>
            Insert request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.InsertRequestType.Record">
            <summary>
            Service record
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.InsertRequestType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.InsertRequestType.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="eRecord"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.InsertRequestType.System#ICloneable#Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.UpsertRequestType">
            <summary>
            Insert request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.UpsertRequestType.Record">
            <summary>
            Service record
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.UpsertRequestType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.UpsertRequestType.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="eRecord"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.UpsertRequestType.System#ICloneable#Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.QueryRequestType">
            <summary>
            Query request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.QueryRequestType.QueryRecord">
            <summary>
            <see cref="T:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType"/> used as query filter for finding a service
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.QueryRequestType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.QueryRequestType.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="eQueryRecord"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.QueryResponseType">
            <summary>
            Response to Query
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.QueryResponseType.RecordList">
            <summary>
            Service records that matched query criteria
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.QueryResponseType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.QueryResponseType.#ctor(Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="eRecordList"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.SubscribeRequestType">
            <summary>
            Subscribe request body
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Directory.SubscribeRequestType.QueryRecordList">
            <summary>
            List of <see cref="T:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType"/> instances used to filter notifications. If list is empty, all service records will be published
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.SubscribeRequestType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To Subscribe Request Type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.SubscribeRequestType.Clone">
            <summary>
            Clone Subscribe Request Type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.SubscribeRequestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize Serialize
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.SubscribeRequestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize Deserialize
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.SubscribeRequestType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.SubscribeRequestType.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="eSubscriber"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.SubscribeRequestType.#ctor(System.String,Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType[])">
            <summary>
            Initialization constructor
            </summary>
            <param name="eSubscriber"></param>
            <param name="queryRecordList"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.DirectoryPort">
            <summary>
            Service Instance Directory operations port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.#ctor">
            <summary>
            Initialization Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup)">
            <summary>
            Post of DsspDefaultLookup instances
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop)">
            <summary>
            Post of DsspDefaultDrop instances
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.Post(Microsoft.Dss.Services.Directory.Insert)">
            <summary>
            Post of Insert instances
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.Post(Microsoft.Dss.Services.Directory.Delete)">
            <summary>
            Post of Delete instances
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.Post(Microsoft.Dss.Services.Directory.Get)">
            <summary>
            Post of Get instances
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.Post(Microsoft.Dss.Core.DsspHttp.HttpGet)">
            <summary>
            Post of HttpGet instances
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.Post(Microsoft.Dss.Services.Directory.Query)">
            <summary>
            Post of Query instances
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.Post(Microsoft.Dss.Services.Directory.Subscribe)">
            <summary>
            Post of Subscribe instances
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.Post(Microsoft.Dss.Services.Directory.Upsert)">
            <summary>
            Post of Upsert instances
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.op_Implicit(Microsoft.Dss.Services.Directory.DirectoryPort)~Microsoft.Ccr.Core.Port{Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.op_Implicit(Microsoft.Dss.Services.Directory.DirectoryPort)~Microsoft.Ccr.Core.Port{Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.op_Implicit(Microsoft.Dss.Services.Directory.DirectoryPort)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.Directory.Insert}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.op_Implicit(Microsoft.Dss.Services.Directory.DirectoryPort)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.Directory.Delete}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.DirectoryPort.op_Implicit(Microsoft.Dss.Services.Directory.DirectoryPort)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.Directory.Upsert}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.Upsert">
            <summary>
            Insert
            </summary>
            <remarks>Adds <see cref="T:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType"/> record in the directory</remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Upsert.#ctor(Microsoft.Dss.Services.Directory.UpsertRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Upsert.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.Insert">
            <summary>
            Insert
            </summary>
            <remarks>Adds <see cref="T:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType"/> record in the directory</remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Insert.#ctor(Microsoft.Dss.Services.Directory.InsertRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Insert.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.Delete">
            <summary>
            Delete
            </summary>
            <remarks>Removes a <see cref="T:Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType"/> record from the directory</remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Delete.#ctor(Microsoft.Dss.Services.Directory.DeleteRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Delete.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Get.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.Query">
            <summary>
            Query
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Query.#ctor(Microsoft.Dss.Services.Directory.QueryRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Services.Directory.QueryResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Query.#ctor(Microsoft.Dss.Services.Directory.QueryRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Query.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Directory.Subscribe">
            <summary>
            Subscribe
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Subscribe.#ctor(Microsoft.Dss.Services.Directory.SubscribeRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Subscribe.#ctor(Microsoft.Dss.Services.Directory.SubscribeRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Directory.Subscribe.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.MountService.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.MountService.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.MountService.QueryBytesRequest">
            <summary>
            Query for binary resource data
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.MountService.QueryBytesRequest.Offset">
            <summary>
            Offset into the resource
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.MountService.QueryBytesRequest.Length">
            <summary>
            Number of bytes to return in the response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.MountService.QueryBytesResponse">
            <summary>
            Response with binary resource data
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.MountService.QueryBytesResponse.Data">
            <summary>
            Bytes from the resource
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.MountService.QueryBytes">
            <summary>
            Query for raw bytes from a mountpoint resource
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.MountService.QueryBytes.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.MountService.QueryBytes.#ctor(Microsoft.Dss.Services.MountService.QueryBytesRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.MountService.QueryBytes.#ctor(Microsoft.Dss.Services.MountService.QueryBytesRequest,Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort{Microsoft.Dss.Services.MountService.QueryBytesResponse})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.MountService.UpdateBytesRequest">
            <summary>
            Request to update raw bytes
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.MountService.UpdateBytesRequest.Offset">
            <summary>
            Offset into resource
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.MountService.UpdateBytesRequest.Data">
            <summary>
            Data to update
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.MountService.UpdateBytesRequest.Truncate">
            <summary>
            Indicates whether the resource should be truncated after writing the Data
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.MountService.UpdateBytes">
            <summary>
            Request to update raw bytes in a mountpoint resource
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.MountService.UpdateBytes.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.MountService.UpdateBytes.#ctor(Microsoft.Dss.Services.MountService.UpdateBytesRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">request body</param>
        </member>
        <member name="M:Microsoft.Dss.Services.MountService.UpdateBytes.#ctor(Microsoft.Dss.Services.MountService.UpdateBytesRequest,Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort{Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">request body</param>
            <param name="responsePort">response port</param>
        </member>
        <member name="T:Microsoft.Dss.Services.MountService.MountServiceOperations">
            <summary>
            Mount service operations port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.MountService.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.MountService.State.LocalDirectory">
            <summary>
            Local file system directory path exposed through HTTP
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.MountService.MountService.MapToLocalAddr(System.String,System.Boolean@)">
            <summary>
            Find file name as delta between URI of this service and requested service URI mapped
            as relative to mount point
            </summary>
            <param name="origPath">Absolute URI Path component</param>
            <param name="thisService">Out parameter indicating whether the URI is exactly that of THIS service</param>
            <returns>URI of local file</returns>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceDirectory">
            <summary>
            A representation of the /resources/ directory
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceDirectory.Name">
            <summary>
            Gets or sets the name of the directory
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceDirectory.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceDirectory.Items">
            <summary>
            Gets or sets the items contained in the directory
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.DirectoryItem">
            <summary>
            A representation of an item contained in a prefix directory.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.DirectoryItem.Description">
            <summary>
            Value displayed as mouseover of item.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.DirectoryItem.DisplayName">
            <summary>
            Get or sets the name of the item.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.DirectoryItem.Uri">
            <summary>
            Get or sets the link Uri for the item.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations">
            <summary>
            Assembly Resource Service operations port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.Post(System.Object)">
            <summary>
            Untyped post
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.op_Implicit(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations)~Microsoft.Ccr.Core.Port{Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.op_Implicit(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations)~Microsoft.Ccr.Core.Port{Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.op_Implicit(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.AssemblyEmbeddedResourceService.Insert}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.op_Implicit(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.AssemblyEmbeddedResourceService.Delete}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.op_Implicit(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Core.DsspHttp.HttpGet}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.op_Implicit(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations)~Microsoft.Ccr.Core.Port{Microsoft.Dss.ServiceModel.Dssp.DsspDefaultGet}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.op_Implicit(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceQuery}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.op_Implicit(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.AssemblyEmbeddedResourceService.Subscribe}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations.op_Implicit(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyResourceServiceOperations)~Microsoft.Ccr.Core.Port{Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytes}">
            <summary>
            Implicit conversion
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceQuery">
            <summary>
            A resource query
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.Insert">
            <summary>
            Insert. Request to expose through HTTP embedded resources for a given assembly
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.Delete">
            <summary>
            Delete. Request to remove HTTP access to assembly embedded resources
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.SubscribeFilter">
            <summary>
            Filter keywords for a filtered subscribe request
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.SubscribeFilter.Type">
            <summary>
            The type of the request, either "Contract" or "Resource"
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.SubscribeFilter.Identifier">
            <summary>
            The identifier.  A regular expression that matches the Prefix or Resource name
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.SubscribeFilter.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.SubscribeFilter.#ctor(System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="type"></param>
            <param name="identifier"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.SubscribeRequest">
            <summary>
            SubscribeRequest.  Request notifications when an assembly or resource is inserted or deleted
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.SubscribeRequest.Filters">
            <summary>
            An array of filters
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.Subscribe">
            <summary>
            Subscribe operation.  Request notifications when an assembly or resource is inserted or deleted
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytesRequest">
            <summary>
            Query for binary resource data
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytesRequest.Offset">
            <summary>
            Offset into the resource
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytesRequest.Length">
            <summary>
            Number of bytes to return in the response
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytesResponse">
            <summary>
            Response with binary resource data
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytesResponse.Data">
            <summary>
            Bytes from the resource
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytes">
            <summary>
            Query for raw bytes from a mountpoint resource
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytes.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytes.#ctor(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytesRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytes.#ctor(Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytesRequest,Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort{Microsoft.Dss.Services.AssemblyEmbeddedResourceService.QueryBytesResponse})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.StateType">
            <summary>
            Service State
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.StateType.ContractList">
            <summary>
            Dictionary of mounted resource assembly contracts
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.StateType.ResourceList">
            <summary>
            List of all mounted resources
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceQueryRequest">
            <summary>
            Description
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceQueryRequest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceQueryRequest.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="P:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.ResourceQueryRequest.Prefix">
            <summary>
            Prefix of query
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertType">
            <summary>
            Insert request body
            If the contract is not specified, the AssemblyLocation must be.
            The prefix must not be an absolute URI.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertType.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="dssContract"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertType.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="dssContract"></param>
            <param name="prefix"></param>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertType.DssContract">
            <summary>
            Contract for service implementation that contains embedded resources
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertType.Prefix">
            <summary>
            URI prefix to use for HTTP URI of mounted resources
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertType.AssemblyLocation">
            <summary>
            Location of assembly to load resources from.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertResponse">
            <summary>
            Insert response body
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertResponse.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertResponse.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="absolutePath">The absolute URI path generated by the insert operation.</param>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.InsertResponse.AbsolutePath">
            <summary>
            Absolute URI path generated by the insert operation.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.DeleteType">
            <summary>
            Delete request body
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.DeleteType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.DeleteType.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="dssContract"></param>
        </member>
        <member name="F:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.DeleteType.DssContract">
            <summary>
            Contract for service implementation that contains embedded resources
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyEmbeddedResourceService.GenerateDirectoryTree(System.String)">
            <summary>
            Generates a representation of the /resources "directory"
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dss.Services.AssemblyEmbeddedResourceService.AssemblyEmbeddedResourceService.GetResourceList(System.String)">
            <summary>
            Returns an array of assembly names contained under a prefix
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.Contract">
            <summary>
            Security Manager Contract Class
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Security.Manager.Contract.Identifier">
            <summary>
            Security Manager Contract Identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations">
            <summary>
            Security Manager Operations Port
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.#ctor">
            <summary>
            Security Manager Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.Get)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.Replace)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Core.DsspHttp.HttpGet)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Core.DsspHttp.HttpQuery)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Core.DsspHttp.HttpPost)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.QueryService)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.AddRole)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.ModifyRole)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.RemoveRole)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.QueryRole)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.GetLog)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.AddPathPolicy)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.ModifyPathPolicy)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.RemovePathPolicy)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.QueryPathPolicy)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.AddContractPolicy)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.ModifyContractPolicy)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.RemoveContractPolicy)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityManagerOperations.Post(Microsoft.Dss.Services.Security.Manager.QueryContractPolicy)">
            <summary>
            Post message
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.Get">
            <summary>
            Get Security Settings
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.Replace">
            <summary>
            Set Security Settings
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.QueryService">
            <summary>
            Lookup permissions for a service
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.QueryRole">
            <summary>
            Find a role in the policy
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.AddRole">
            <summary>
            Add a new role to the policy
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.ModifyRole">
            <summary>
            Modify an existing role in the policy
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.RemoveRole">
            <summary>
            Remove an existing role from the policy
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.GetLog">
            <summary>
            Get the current state of the security log
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.AddPathPolicy">
            <summary>
            Add permissions for a service path
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.ModifyPathPolicy">
            <summary>
            modify permissions for a service path
            </summary>
            <remarks>
            This only modifies permissions specified directly by path. It
            does not change permissions granted through security roles, or permissions
            inherited from the parent path
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.RemovePathPolicy">
            <summary>
            Remove permissions for a service path
            </summary>
            <remarks>
            This only removes permissions specified directly by path. It
            does not change permissions granted through security roles, or permissions
            inherited from the parent path
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.QueryPathPolicy">
            <summary>
            Query permissions for a service path
            </summary>
            <remarks>
            This only find permissions specified directly by path. It
            does not find permissions granted through security roles, or permissions
            inherited from the parent path
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.AddContractPolicy">
            <summary>
            Add permissions for a specific contract
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.ModifyContractPolicy">
            <summary>
            Modify permissions for a specific contract
            </summary>
            <remarks>
            This only modifies permissions specified directly by contract. It
            does not change permissions granted through security roles
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.RemoveContractPolicy">
            <summary>
            Remove permissions for a specific contract
            </summary>
            <remarks>
            This only removes permissions specified directly by contract. It
            does not change permissions granted through security roles
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.QueryContractPolicy">
            <summary>
            Find permissions for a specific contract.
            </summary>
            <remarks>
            This only finds permisisons that were specified directly by contract.
            It does not find permissions granted through security roles.
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.SecurityManagerState">
            <summary>
            Key Manager State
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityManagerState.Local">
            <summary>
            Was this state retrieved on a local connection.
            </summary>
            <remarks>This field is only used by the HTML UI.</remarks>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityManagerState.Editing">
            <summary>
            Is this data being edited.
            </summary>
            <remarks>This field is only used by the HTML UI.</remarks>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityManagerState.AuthenticationRequired">
            <summary>
            Does this node required authenticated connections?
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityManagerState.OnlySignedAssemblies">
            <summary>
            Does this node require that assemblies are authenticode signed?
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityManagerState.AnonymousNetworkUser">
            <summary>
            User account to represent anonymous network access to the node.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityManagerState.RestartRequired">
            <summary>
            Does this node need to be restarted?
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityManagerState.Paths">
            <summary>
            Permissions of paths below the root
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityManagerState.Contracts">
            <summary>
            Permissions of services defined by contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityManagerState.Roles">
            <summary>
            Security Roles
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.UserPermission">
            <summary>
            User permissions
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.UserPermission.Rights">
            <summary>
            Rights
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.UserPermission.User">
            <summary>
            User
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.UserPermission.Deny">
            <summary>
            Is this permission being granted or denied
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.UserPermission.Inherit">
            <summary>
            Is this permission inherited by children
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.UserPermission.Source">
            <summary>
            sources for permission
            </summary>
            <remarks>
            Used for diagnostics.
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.PolicySource">
            <summary>
            Policy source, used in diagnostic mode.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.PolicySource.Type">
            <summary>
            Policy type
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.PolicySource.Reference">
            <summary>
            Reference information specific to policy type
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Policy Type</term>
            <description>Reference information</description>
            </listheader>
            <item>
            <term>Path</term>
            <description>The service path of the policy</description>
            </item>
            <item>
            <term>Contract</term>
            <description>The service contract of the policy</description>
            </item>
            <item>
            <term>Role</term>
            <description>The name of the security role contributing to this policy</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.PolicyType">
            <summary>
            Policy Type
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Security.Manager.PolicyType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Security.Manager.PolicyType.Path">
            <summary>
            Policy defined by service path
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Security.Manager.PolicyType.Contract">
            <summary>
            Policy defined by service contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Security.Manager.PolicyType.Role">
            <summary>
            Policy defined in a security role
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.PathPermission">
            <summary>
            Path permissions
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.PathPermission.PathSegment">
            <summary>
            Current path segment
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.PathPermission.Users">
            <summary>
            List of user permissions at this segment
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.PathPermission.Paths">
            <summary>
            List if paths below this segment
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.ContractPermission">
            <summary>
            Contract permissions
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.ContractPermission.DssContract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.ContractPermission.Users">
            <summary>
            List of user permissions for this contract
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.ServicePermission">
            <summary>
            Service permissions
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.ServicePermission.Service">
            <summary>
            Service path
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.ServicePermission.Inherited">
            <summary>
            Permissions inherited from up the tree
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.ServicePermission.Local">
            <summary>
            Permissions specific to this service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.ServicePermission.ServiceSummary">
            <summary>
            Service summary information for this service
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.ServicePermission.Mutable">
            <summary>
            Is this service permission editable
            </summary>
            <remarks>Used by the html interface to determine
            whether to show an editing or viewing page for 
            this object</remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.Role">
            <summary>
            Security Role Definition
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.Role.Name">
            <summary>
            Unique human readable role name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.Role.Description">
            <summary>
            Human readable description of the role
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.Role.Users">
            <summary>
            Users in the Role.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.Role.Paths">
            <summary>
            Service paths to which this Role applies
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.Role.Contracts">
            <summary>
            Service Contracts to which this Role applies
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.Role.Allowed">
            <summary>
            Permissions allowed by this Role
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.Role.Denied">
            <summary>
            Permissions denied by this Role
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.Role.Mutable">
            <summary>
            Is this role mutable.
            </summary>
            <remarks>This is a context dependant property, used by the HTML interface</remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.RoleQuery">
            <summary>
            Query response class used for Role queries
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.RoleQuery.Services">
            <summary>
            basic summary information of services available on the node
            </summary>
            <remarks>This is used by the HTML display page for editing roles</remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.RoleQueryService">
            <summary>
            Bare minimum service summary information
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.RoleQueryService.Prefix">
            <summary>
            Path prefix
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.RoleQueryService.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.RoleQueryService.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.RoleQueryService.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.SecurityEvents">
            <summary>
            Latest security events
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Security.Manager.SecurityEvents.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityEvents.Log">
            <summary>
            Security Events
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.SecurityEvent">
            <summary>
            Security Event
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityEvent.TimeStamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityEvent.Event">
            <summary>
            The event identifier
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityEvent.Level">
            <summary>
            The event level
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityEvent.User">
            <summary>
            The user associated with this event, if any
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityEvent.Sid">
            <summary>
            The user associated with this event, if any
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityEvent.Service">
            <summary>
            The service path associated with this event, if any
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityEvent.Contract">
            <summary>
            The service contract associated with this event, if any
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.SecurityEvent.Action">
            <summary>
            The Dssp action associated with this event, if any
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Security.Manager.DiagnosticQuery">
            <summary>
            Result of a diagnostic query
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.DiagnosticQuery.Contract">
            <summary>
            Service contract being queried
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.DiagnosticQuery.Service">
            <summary>
            Service being queried
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.DiagnosticQuery.Action">
            <summary>
            Action being queried
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.DiagnosticQuery.User">
            <summary>
            User being queried
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.DiagnosticQuery.Applied">
            <summary>
            List of applied permissions
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Security.Manager.DiagnosticQuery.Permissions">
            <summary>
            List of relevant permissions
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.ConsoleOutputService.EncodedString(System.String@)">
            <summary>
            ensure the string is encoded as UTF8, so it can be properly serialized
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.ConsoleOutputPort">
            <summary>
            Console Output service operations port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Insert.#ctor(Microsoft.Dss.Services.ConsoleOutput.MessageType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Insert.#ctor(Microsoft.Dss.Services.ConsoleOutput.MessageType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Insert.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Get.#ctor(Microsoft.Dss.ServiceModel.Dssp.GetRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Services.ConsoleOutput.QueueType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Get.#ctor(Microsoft.Dss.ServiceModel.Dssp.GetRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Get.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.Replace">
            <summary>
            Replace
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Replace.#ctor(Microsoft.Dss.Services.ConsoleOutput.QueueType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Replace.#ctor(Microsoft.Dss.Services.ConsoleOutput.QueueType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Replace.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.Subscribe">
            <summary>
            Subscribe
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Subscribe.#ctor(Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
            <param name="responsePort"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Subscribe.#ctor(Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.Subscribe.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.MessageType">
            <summary>
            Insert request body. 
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.MessageType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.MessageType.#ctor(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName,System.DateTime,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="eCategory"></param>
            <param name="eLevel"></param>
            <param name="eTime"></param>
            <param name="eSubject"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.MessageType.#ctor(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName,System.DateTime,System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="eCategory"></param>
            <param name="eLevel"></param>
            <param name="eTime"></param>
            <param name="eSubject"></param>
            <param name="eSource"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.MessageType.#ctor(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName,System.DateTime,System.String,System.String,System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="eCategory"></param>
            <param name="eLevel"></param>
            <param name="eTime"></param>
            <param name="eSubject"></param>
            <param name="eSource"></param>
            <param name="eCodeSite"></param>
            <param name="eDetail"></param>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.MessageType.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.MessageType.Level">
            <summary>
            Output level
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.MessageType.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.MessageType.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.MessageType.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.MessageType.CodeSite">
            <summary>
            Code site (stack capture)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.MessageType.Detail">
            <summary>
            Optional detail. Complex types should be encoded as xml strings and manualy deserialized
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType">
            <summary>
            Subscribe request type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType.#ctor(System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
            <summary>
            Initialization constructor
            </summary>
            <param name="eSubscriber"></param>
            <param name="eCategory"></param>
            <param name="eLevel"></param>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType.Category">
            <summary>
            Filter on log category
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType.Level">
            <summary>
            Filter on output level
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType.CopyTo(Microsoft.Dss.Core.IDssSerializable)">
            <summary>
            Copy To Subscribe Request Type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType.Clone">
            <summary>
            Clone Subscribe Request Type
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serialize Serialize
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.ConsoleOutput.SubscribeRequestType.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize Deserialize
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.CategoryType">
            <summary>
            Console log categories, for grouping enties
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.CategoryType.StdOutString">
            <summary>
            Standard output
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.CategoryType.StdErrorString">
            <summary>
            Standard error
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.CategoryType.StdOut">
            <summary>
            Standard output
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.CategoryType.StdError">
            <summary>
            Standard error
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.LevelType">
            <summary>
            Output filter level
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.NoneString">
            <summary>
            No level specified
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.ErrorString">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.WarningString">
            <summary>
            Warning level
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.InfoString">
            <summary>
            Informational level
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.VerboseString">
            <summary>
            Verbose level
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.None">
            <summary>
            No level specified
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.Error">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.Warning">
            <summary>
            Warning level
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.Info">
            <summary>
            Informational level
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.LevelType.Verbose">
            <summary>
            Verbose level
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.ConsoleOutput.QueueType">
            <summary>
            Console output state. Queue of insert requests (log messages)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.ConsoleOutput.QueueType.MessageList">
            <summary>
            List of log messages
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.TestAggregator.State">
            <summary>
            Service State
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.TestAggregator.State.TestList">
            <summary>
            List of test cases active
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.TestAggregator.State.FaultList">
            <summary>
            List of faults in retrieving results
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.TestAggregator.TestAggregatorOperations">
            <summary>
            Test aggregator operations port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.TestAggregator.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestBase">
            <summary>
            Abstract base class for DSS Test Services.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestBase.TestDirectory">
            <summary>
            Directory partner for reporting this test service
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestBase.TestProgressCategory">
            <summary>
            Test logging category for all progress messages and intermediate results.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestBase.TestResultCategory">
            <summary>
            Test logging category for final results.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestBase._declaredTestCaseList">
            <summary>
            List of declared (static) test cases to be executed, with items arranged by ExecutionOrder.
            </summary> 
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspServiceCreationPort)">
            <summary>
            Initializes basic test service state, excluding the test case list.
            </summary>
            <param name="createPort">DsspServiceCreationPort port</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspServiceCreationPort,System.String,Microsoft.Dss.Services.Test.TestCaseState[])">
            <summary>
            Initializes basic test service state, and stores the passed description and test case state list.
            </summary>
            <param name="createPort">DsspServiceCreationPort port</param>
            <param name="description">Description of test service</param>
            <param name="testCaseList">List of test cases</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspServiceCreationPort,System.String,System.String[])">
            <summary>
            Initializes basic test service state, stores the passed description, and creates a test case list
            from the passed test case names.
            </summary>
            <param name="createPort">DsspServiceCreationPort port</param>
            <param name="description">Description of test service</param>
            <param name="testCaseNames">One or more strings denoting test case names</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.InitializeTestState(System.String)">
            <summary>
            Creates and initializes the test state with the passed description, and the rest of
            the members set to starting values.
            </summary>
            <param name="testDescription">Description of test service</param>
            <remarks>
            If the passed test description is null or empty, the description from the 
            <see cref="T:System.ComponentModel.DisplayNameAttribute"/> attribute applied to the test class. If the attribute is not
            applied or its value is null or empty, the class name is used.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.RegisterTestService">
            <summary>
            Registers the test service with the directory, and sets up the forwarder for communicating
            the the test aggregator.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.RegisterDeclaredTestCases">
            <summary>
            Enumerates methods tagged with the <see cref="T:Microsoft.Dss.Services.Test.DssTestCaseAttribute"/> attribute or the 
            <see cref="T:Microsoft.Dss.Services.Test.DssTestSuiteInitializerAttribute"/>, and registers a test case for each method
            for execution and reporting purposes.
            </summary>
            <remarks>
            Test case methods must be declared as instance methods on the test class, and cannot be
            inherited across a chain of TestBase descendants. A test case must not be tagged as both
            a test case and initializer. If it is, an exception is thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.EnumerateDeclaredTestCases(System.Collections.Generic.SortedList{System.Int32,System.Reflection.MethodInfo},System.Collections.Generic.List{System.Reflection.MethodInfo})">
            <summary>
            Enumerates the methods in this class, and saves each test method to the ordered test case
            list, the unordered test case list, or the single suite initializer.
            </summary>
            <param name="orderedTCs">List of ordered test cases to populate</param>
            <param name="unorderedTCs">List of unordered test cases to populate</param>
            <remarks>
            A test case must not be tagged as both a test case and a suite initializer. If it is, an
            exception is thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.SaveDeclaredTestCases(System.Collections.Generic.SortedList{System.Int32,System.Reflection.MethodInfo},System.Collections.Generic.List{System.Reflection.MethodInfo})">
            <summary>
            Saves the passed test case lists, creating and storing <see cref="T:Microsoft.Dss.Services.Test.TestCase"/> objects to
            hold test case execution info, and <see cref="T:Microsoft.Dss.Services.Test.TestCaseState"/> objects to house state 
            information for each case as part of the test service state.
            </summary>
            <param name="orderedTCs">List of ordered test cases to store</param>
            <param name="unorderedTCs">List of unordered test cases to store</param>
            <remarks>
            Note that the suite initializer, if any, is handled uniformly for state storage purposes, but
            differently for execution purposes. Thus, it is added to the test case state list but not the
            test case list.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.SaveTestCaseFromMethod(System.Reflection.MethodInfo)">
            <summary>
            Extracts test case data from the passed <paramref name="testCaseMethod"/>, and uses it
            to create and store <see cref="T:Microsoft.Dss.Services.Test.TestCase"/> and <see cref="T:Microsoft.Dss.Services.Test.TestCaseState"/> objects to hold
            test case execution and state information.
            </summary>
            <param name="testCaseMethod"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.RunTestSuite">
            <summary>
            Runs all registered test cases in the suite by posting TestCase objects to the coordinator
            port and then posting a <see cref="T:Microsoft.Dss.Services.Test.StartSuite"/> message. It then waits for the suite to 
            complete, and posts an overall status message at the end.
            </summary>
            <remarks>
            Internally, the method creates a suite coordinator with just one "test case" in it:
            the suite initializer. If that succeeds, it creates a suite coordinator with the rest
            of the cases and starts it. If not, the method aborts the test, logging the suite initialization 
            failure.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.RunSuiteInitializer">
            <summary>
            Runs the test suite initializer, if any, and logs results.
            </summary>
            <remarks>
            The suite initializer is always run with implicit test case completion enabled.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.RunRegisteredTestCases">
            <summary>
            Runs all registered test cases in the suite by creating a coordinator configured
            as specified in the <see cref="T:Microsoft.Dss.Services.Test.DssTestSuiteAttribute"/>, posting <see cref="T:Microsoft.Dss.Services.Test.TestCase"/> 
            objects to it, and then posting a <see cref="T:Microsoft.Dss.Services.Test.StartSuite"/> message.
            </summary>
            <remarks>
            The method waits for the suite to complete, and logs the success/failure message it receives.
            </remarks>            
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.Start">
            <summary>
            Starts the test service. This includes enumerating and registering test methods, and then
            kicking off test execution.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.StartTests">
            <summary>
            Starts the execution of test cases. Default implementation executes registered test cases.
            Subclasses can override this method to implement custom test case registration and execution
            logic (e.g., dynamic tet cases).
            </summary>
            TODO (IhabA #2073): This method and related ones should be revisited as part of API cleanup.
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.LogResult(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Logs test case progress, intermediate results, or a final result.
            </summary>
            <param name="tcName">Name of test case</param>
            <param name="message">Log message</param>
            <param name="passIncrement">Number of succesful test iterations</param>
            <param name="failIncrement">Number of failed test iterations</param>
            <param name="complete">True if the test case is complete and this is the final log result</param>
            <remarks>
            <para>
            The message log level and category are determined automatically. For category, if the 
            case is complete, the Result category is used; otherwise, Progress is used. For the 
            level, a positive fail increment indicates a test case failure, which is logged as
            a Warning. Otherwise, Info is used. Note that the Error trace level is reserved for 
            the test suite scope because a single case failure is not considered critical enough
            to be an error. Only the test suite can determine if and when it has a critical error
            (e.g., failure to initialize). 
            </para>
            <para>
            While this method is called automatically to log results for registered cases, it
            can also be called from a "dynamic" test suite that creates test cases on the fly.
            Calling it with a <paramref name="tcName"/> that does not correspond to registered
            case causes it to add the case and log the result.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.GetHandler(Microsoft.Dss.Services.Test.Get)">
            <summary>
            Test base Get handler
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.UpdateTestHandler(Microsoft.Dss.Services.Test.UpdateTest)">
            <summary>
            Handles requests for updating test state.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestBase.UpsertTestCaseHandler(Microsoft.Dss.Services.Test.UpsertTestCase)">
            <summary>
            Handles requests for updating case state or adding a new case. Marks the test as complete
            if this update completes the last outstanding test case.
            </summary>
            <param name="upsert">Test case to update or insert</param>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestBase.TestOperations">
            <summary>
            Test base operations port. The creation of this port is left up to subclasses so they can
            set the service prefix to align with their test service name.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.StartSuite">
            <summary>
            When this message is received, it starts the execution of the test suite
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestCheckStyle">
            <summary>
            Style of test check to perform: critical or non-critical
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCheckStyle.Verify">
            <summary>
            Evaluate condition, and log a test failure if it is false
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCheckStyle.Assert">
            <summary>
            Evaluate condition, log a test failure if is false, and abort the test case
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.IntermediateResult">
            <summary>
            Represents an intermediate test case result (pass/fail status and a message). Used
            internally to track and log verification (Verify()) failures without aborting
            test cases.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.IntermediateResult.#ctor(System.Boolean,System.String)">
            <summary>
            Convenience constructor for initializing an intermediate result
            </summary>
            <param name="passed">Whether or not the result is a pass</param>
            <param name="resultMessage">Message associated with result</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.IntermediateResult.ToString">
            <summary>
            Returns a string representation of intermediate result for debugging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.IntermediateResult.Passed">
            <summary>
            True if the intermediate result is a PASS
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.IntermediateResult.ResultMessage">
            <summary>
            Message associated with intermediate result.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestCaseResult">
            <summary>
            Holds the intermediate and final results of a test case as it executes, automatically
            updating them as the case makes assertions and checks on expected results.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.RecordProgress(System.String,System.Object[])">
            <summary>
            Records the test case's progress message, formatted with the passed arguments (optional).
            </summary>
            <param name="messageFormat">Message to log, with optional format specifiers</param>
            <param name="messageArguments">Optional formatting arguments</param>
            <remarks>
            Progress messages should be used for diagnostic information only. For logging the 
            results of test checks, use Assert() or Verify() instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.CheckIntermediateResult(Microsoft.Dss.Services.Test.TestCheckStyle,System.Boolean,W3C.Soap.Fault,System.String,System.Object[])">
            <summary>
            Evaluates the passed condition, and passes/fails the test case based on the outcome.
            Failure behavior is determined by the specified TestCheckStyle.
            </summary>
            <param name="checkStyle">Style of check to perform (assertion or verification)</param>
            <param name="condition">Condition to evaluate</param>
            <param name="fault">A Fault to include in the message in case of failure</param>
            <param name="messageFormat">Message to log, with optional format specifiers</param>
            <param name="messageArguments">Optional formatting arguments</param>
            <remarks>
            If the condition is true, a PASS intermediate result is posted to the intermediate
            result port, along with the formatted message. If the condition is false, a FAIL
            intermediate result is posted, along with a formatted message that includes the fault
            (if any). Further, if the checkStyle is Assert, a <see cref="T:Microsoft.Dss.Services.Test.TestAssertFailedException"/>
            is thrown to abort the calling test case.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.Assert(System.Boolean,W3C.Soap.Fault,System.String,System.Object[])">
            <summary>
            Asserts that the passed condition is true, failing and ending the test case if it is not.
            The passed message and arguments are logged as part of the success or failure message.
            </summary>
            <param name="condition">Condition to evaluate</param>
            <param name="fault">A Fault to include in the message in case of failure</param>
            <param name="messageFormat">Message to log, with optional format specifiers</param>
            <param name="messageArguments">Optional formatting arguments</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that the passed condition is true, failing and ending the test case if it is not.
            The passed message and arguments are logged as part of the success or failure message.
            </summary>
            <param name="condition">Condition to evaluate</param>
            <param name="messageFormat">Message to log, with optional format specifiers</param>
            <param name="messageArguments">Optional formatting arguments</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.AssertFail(System.String,System.Object[])">
            <summary>
            Fails and ends the test case. The passed message and arguments are logged as part of the
            failure message.
            </summary>
            <param name="messageFormat">Message to log, with optional format specifiers</param>
            <param name="messageArguments">Optional formatting arguments</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.AssertFail(W3C.Soap.Fault,System.String,System.Object[])">
            <summary>
            Fails and ends the test case. The passed message and arguments are logged as part of the
            failure message.
            </summary>
            <param name="fault">A Fault to include in the failure message</param>
            <param name="messageFormat">Message to log, with optional format specifiers</param>
            <param name="messageArguments">Optional formatting arguments</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.Verify(System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies that the passed condition is true, logging a failure if it is not, and lets
            the test case continue normally. The passed message and arguments are logged as part of
            the success or failure message.
            </summary>
            <param name="condition">Condition to evaluate</param>
            <param name="messageFormat">Message to log, with optional format specifiers</param>
            <param name="messageArguments">Optional formatting arguments</param>
            <remarks>
            This method is intended as a convenience method for logging non-critical successes or 
            failures and moving on to other checks. For instance, when an operation returns 
            a result that requires multiple checks against expected results, it is common to use
            Verify() for each so that a full set of successes and failures is available for result
            analysis. For critical checks whose failure should block the test case from continuing,
            use Assert() instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.VerifyFail(System.String,System.Object[])">
            <summary>
            Logs a verification failure and lets the case continue. The passed message and arguments 
            are logged as part of the failure message.
            </summary>
            <param name="messageFormat">Message to log, with optional format specifiers</param>
            <param name="messageArguments">Optional formatting arguments</param>
            <remarks>
            This method is intended as a convenience method for logging non-critical failures. For
            critical errors that should block the test case from continuing, use AssertFail() instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseResult.CompleteTestCase">
            <summary>
            Explicitly signals the end of the test case associated with this result. Only needed if the test suite
            is configured to require explicit test case completion.
            </summary>
            <remarks>
            For test suites configured to implicitly complete test cases, this method is not needed. For more information
            on test case completion control, see <see cref="T:Microsoft.Dss.Services.Test.DssTestSuiteAttribute"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCaseResult.ParentTestCase">
            <summary>
            The test case this result belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCaseResult.ResultPort">
            <summary>
            PortSet for final test result.
            </summary>
            <remarks>
            Posting a SuccessResult or an Exception to this port signals the end of the test case.
            Legacy test cases use this approach.
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCaseResult.ProgressPort">
            <summary>
            Progress report Port
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCaseResult.IntermediateResultPort">
            <summary>
            Port for intermediate test results, or an EmptyValue that signals the completion of the test case.
            </summary>
            <remarks>
            As an optional aid for test authoring, the test framework now provides helpers that
            validate specified conditions and post intermediate results. When the test case
            completes, the framework automatically posts the final result. The final result is
            success by default, and failure if any intermediate result was a failure. We implement
            this behavior via this internal port rather than the existing ResultPort so we can 
            maintain compatibility with existing tests. IntermediateResult objects received on this
            port represent intermediate results, and cause the overall running result to be updated.
            If an EmptyValue is received, that signals the end of the test case, and the running result
            becomes the final test case result.
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCaseResult.TestCasePassed">
            <summary>
            Indicates overall pass/fail status of test case. Status automatically updates based on the results
            of Assert() and Verify() calls made by the test case code.
            </summary>
            <remarks>
            By default, a test case starts out in a passed state. If the test case encounters
            an intermediate failure, it is considered failed regardless of the success of future
            intermediate results. 
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.ITestCase">
            <summary>
            Holds the information needed to execute a test case as part of a test suite.
            </summary>
            <remarks>
            The runtime state and results of the case are stored separately.
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.ITestCase.Name">
            <summary>
            Test case name.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.ITestCase.Timeout">
            <summary>
            Test case timeout value. If a test case does not complete within this period, it is 
            aborted and considered to have failed.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.ITestCase.ExecutionOrder">
            <summary>
            Execution order for test case (in a sequential test suite). Default is 0 (unspecified).
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.ITestCase.Handler">
            <summary>
            The method that implements the test case.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.ITestCase.ControlPort">
            <summary>
            A portset that enables the test case to receive startup (result) and shutdown requests.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestCase">
            <summary>
            Holds the information needed to execute at test case as part of a test suite. Concrete implementation
            of <see cref="T:Microsoft.Dss.Services.Test.ITestCase"/>.
            </summary>
            <remarks>
            The runtime state and results of the case are stored separately.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCase.#ctor(System.String)">
            <summary>
            Creates a test case with the passed name, default timeout, unspecified execution order, and
            no handler. These properties may be set later.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCase.#ctor(System.String,Microsoft.Ccr.Core.IteratorHandler{Microsoft.Dss.Services.Test.TestCaseResult})">
            <summary>
            Creates a test case with the passed name and handler, a default timeout, and an unspecified 
            execution order.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCase.#ctor(System.String,System.TimeSpan,Microsoft.Ccr.Core.IteratorHandler{Microsoft.Dss.Services.Test.TestCaseResult})">
            <summary>
            Creates a test case with the passed name, timeout, handler, and an unspecified execution 
            order.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCase.#ctor(System.String,System.TimeSpan,System.Int32,Microsoft.Ccr.Core.IteratorHandler{Microsoft.Dss.Services.Test.TestCaseResult})">
            <summary>
            Creates a test case with the passed name, timeout, execution order, and handler.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCase.Name">
            <summary>
            Test case name.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCase.Timeout">
            <summary>
            Test case timeout value. If a test case does not complete within this period, it is 
            aborted and considered to have failed.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCase.ExecutionOrder">
            <summary>
            Execution order for test case (in a sequential test suite). Default is 0 (unspecified).
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCase.Handler">
            <summary>
            The method containing the test case code to execute.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestCase.ControlPort">
            <summary>
            A portset that enables the test case to receive startup (result) and shutdown requests.
            </summary>
            <remarks>
            The control port is created automatically. It can be modified if needed.
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestCaseControlPort">
            <summary>
            A portset through which the test case receives startup (result) and shutdown requests.
            <remarks>
            Each TestCase supplies a control port so the coordinator can issue Start and Shutdown
            messages. The coordination uses the ResultPort associated with each TestCaseResult message to
            determine when the testCase is complete. It also has a timeout associated with each test
            so it can report failure if the test case does not complete in time.
            </remarks>
            </summary>    
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestSuiteCoordinationPort">
            <summary>
            Port for communicating with the test suite coordinator
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestSuiteCoordinator">
            <summary>
            Helper process for scheduling and orchestrating test cases
            </summary>
            <remarks>
            Test Services create instances of TestSuiteCoordinator and communicate with it using the 
            testSuiteCoordinationPort.
            They can add test cases to the suite by creating an instance of the TestCase class
            and then posting it on this port. To retrieve the results of the entire suite the test service
            has to supply a result port when creating the coordinator. Using the result test services
            can nest Suite Coordinators and schedule their execution in cascade or in parallel creating
            arbitrary orchestration of test suites
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.CreateSequential(Microsoft.Dss.Services.Test.TestBase,Microsoft.Ccr.Core.SuccessFailurePort)">
            <summary>
            Creates a sequential test suite coordinator: executes one test case at a time. The
            suite will execute to completion, regardless of test case failures. A test case will be 
            considered complete as soon as its handler completes.
            </summary>
            <param name="parent">Test service reference</param>
            <param name="suiteResult">Port for posting suite result (success/failure)</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.CreateSequential(Microsoft.Dss.Services.Test.TestBase,Microsoft.Ccr.Core.SuccessFailurePort,System.Boolean,System.Boolean)">
            <summary>
            Creates a sequential test suite coordinator: executes one test case at a time.
            </summary>
            <param name="parent">Test service reference</param>
            <param name="suiteResult">Port for posting suite result (success/failure)</param>
            <param name="abortOnFirstFailure">If true, a test case failure will abort all subsequent cases</param>
            <param name="implicitTestCaseCompletion">If true, a test case is considered complete when its handler ends</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.CreateConcurrent(Microsoft.Dss.Services.Test.TestBase,Microsoft.Ccr.Core.SuccessFailurePort)">
            <summary>
            Creates a concurrent test suite coordinator: executes all queued test cases in parallel
            The suite will execute to completion, regardless of test case failures. A test case will
            be considered complete as soon as its handler completes.
            </summary>
            <param name="parent">Test service reference</param>
            <param name="suiteResult">Port for posting suite result (success/failure)</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.CreateConcurrent(Microsoft.Dss.Services.Test.TestBase,Microsoft.Ccr.Core.SuccessFailurePort,System.Boolean,System.Boolean)">
            <summary>
            Creates a concurrent test suite coordinator: executes all queued test cases in parallel.
            </summary>
            <param name="parent">Test service reference</param>
            <param name="suiteResult">Port for posting suite result (success/failure)</param>
            <param name="abortOnFirstFailure">If true, a test case failure will abort the suite</param>
            <param name="implicitTestCaseCompletion">If true, a test case is considered complete when its handler ends</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.#ctor(Microsoft.Dss.Services.Test.TestBase)">
            <summary>
            Initialization constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.Init(System.Boolean,Microsoft.Ccr.Core.SuccessFailurePort,System.Boolean,System.Boolean)">
            <summary>
            Initializes the test case coordinator with the specified configuration.
            </summary>
            <param name="sequential">If true, the coordinator runs test cases sequentially</param>
            <param name="suiteResult">Port for posting suite result (success/failure)</param>
            <param name="abortOnFirstFailure">If true, a test case failure will abort the suite</param>
            <param name="implicitTestCaseCompletion">If true, a test case is considered complete when its handler ends</param>
            <returns>The coordination port for the test suite coordinator</returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.AbortIncompleteTestCases(System.String)">
            <summary>
            Aborts all incomplete (pending/running) test cases, marking them as failures with the 
            specified abort reason.
            </summary>
            <param name="abortReason">Reason for aborting cases.</param>
            <remarks>
            The abort covers all pending (queued) cases as well as those currently executing. Cases that
            completed (no outstanding tasks) before the abort are unaffected. Note the abort process involves
            posting a shutdown message to the control port of each active/pending test case. It is up to the
            test to decide how to handle test case shutdown requests by setting up shutdown receivers on the 
            control ports.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.ExternalShutdownHandler(Microsoft.Ccr.Core.Shutdown)">
            <summary>
            Handler for suite shutdown message. Posts the received shutdown message to the service's
            internal cleanup port, which causes the default cleanup handler (DefaultCleanup()) to be run.
            </summary>
            <param name="shutdown">Default shutdown message</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.ProcessTestCase(Microsoft.Dss.Services.Test.TestCase)">
            <summary>
            Executes the passed test case to completion, supporting logging of intermediate and
            final results, test timeouts, and test suite shutdown.
            </summary>
            <param name="testCase">Test case to process</param>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.RunSingleTestCase(Microsoft.Dss.Services.Test.TestCaseResult)">
            <summary>
            Runs the test case to completion, taking care of the tasks of posting the final result
            and handling any unexpected exceptions.
            </summary>
            <param name="tcResult">Stores the results of the running case</param>
            <returns>A CCR task enumerator</returns>
            <remarks>
            The framework expects test cases to handle failures such that the only type of exception
            thrown from a case is <see cref="T:Microsoft.Dss.Services.Test.TestAssertFailedException"/>, thrown when an assertion
            fails. This method sets up a causality that intercepts any exceptions unhandled by the
            case, and if it catches an exception other than assertion failure exception, it flags
            it as an unexpected exception and fails the case. Note that the exception handling
            is done here rather than propagating it to the result port so we can differentiate between
            expected and unexpected exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.TestCaseProgressHandler(Microsoft.Dss.Services.Test.TestCaseResult,System.String)">
            <summary>
            Called when a progress message is received on the test case result's progress port,
            this method calls into the test service to log the message.
            </summary>
            <param name="tcResult">TestCaseResult to log progress for</param>
            <param name="progressMessage">Progress message</param>
            <remarks>
            We want the messages to be logged in the order they were received. If we were to 
            use a persistent receiver on the progress port, this handler could be invoked for
            multiple messages in parallel, resulting in out-of-sequence progress messages. To avoid
            that, we keep creating a one-time receiver, processing the message it gets, then creating
            another. So simple test cases will get ordered messages, and "concurrent" test cases
            (multiple simultaneous cases or multiple tasks within a case) will get interleaved log
            messages, but the messages of each case or task will be ordered.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.TestCaseIntermediateResultHandler(Microsoft.Dss.Services.Test.TestCaseResult,Microsoft.Dss.Services.Test.IntermediateResult,System.Boolean)">
            <summary>
            Called when a result is received on the test case result's intermediate result port, this
            method logs the intermediate result and updates the overall running result of the test case.
            </summary>
            <param name="tcResult">TestCaseResult to update</param>
            <param name="intermediateResult">Intermediate result to record</param>
            <param name="tcComplete">True if the test case is complete</param>
            <remarks>
            We have two potential concurrency issues with intermediate results: multiple intermediate results
            being handled at the same time, and a final and intermediate result being handled at the same time.
            We solve the the first problem by running this handler from one-time receivers on the intermediate
            result port so only one message can be processed at a time. When that's done, we activate replacement
            one-time receivers. We solve the second problem by making sure that, for test cases that use the new
            helpers to post intermediate results, the final result is also signaled on the intermediate result port.
            Of course, if more intermediate results are posted after a final result, they will be ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.TestCaseCompletionHandler(System.String,System.String,System.Boolean)">
            <summary>
            Called when a test case is completed (received success, exception or timeout) or when
            test abort has been requested, this method logs the completion/abortion of the case.
            </summary>
            <param name="tcName">Name of test case</param>
            <param name="finalMessage">Final status message</param>
            <param name="tcHasFailed">True if the case has failed</param>
            <remarks>
            In addition to handling the completion of a test case, this method also updates the pass/fail
            status of the test suite. If the suite is set to abort on first failure, it is aborted if
            this test case failed. Also, if this is the final test case in the suite, the final suite
            result is posted. A suite is considered Passing only if all test cases passed.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestSuiteCoordinator.Shutdown(Microsoft.Ccr.Core.Shutdown)">
            <summary>
            Default cleanup
            </summary>
            <param name="shutdown">Shutdown message</param>
            TODO (IhabA #2062): Question: How is this invoked?
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestSuiteCoordinator.DefaultTestCaseTimeSpan">
            <summary>
            Default expected time span to be used if test case doesn't specify one. The starting default is 1 minute,
            and is modifiable by setting this attribute after creating the coordinator.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestSuiteCoordinator.SequentialProcessing">
            <summary>
            coordination context for sequential processing of test cases
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestSuiteCoordinator.ConcurrentProcessing">
            <summary>
            coordination context for concurrent processing of test cases
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.TestSuiteCoordinator.ProcessingType">
            <summary>
            Active coordination context
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestBaseOperations">
            <summary>
            Test base service operations port
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.Get.#ctor(Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Services.Test.TestServiceState,W3C.Soap.Fault})">
            <summary>
            Initialization constructor
            </summary>
            <param name="pRsp">Response port</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.Get.#ctor">
            <summary>
            Default
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.UpdateTest">
            <summary>
            Request for updated test service state.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.UpdateTest.#ctor(Microsoft.Dss.Services.Test.UpdateTestRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.UpdateTest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.UpsertTestCase">
            <summary>
            Request for updating or adding a test case.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.UpsertTestCase.#ctor(Microsoft.Dss.Services.Test.UpsertTestCaseRequest)">
            <summary>
            Initialization constructor
            </summary>
            <param name="body">Request body</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.UpsertTestCase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.Subscribe">
            <summary>
            Subscribe
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.Contract">
            <summary>
            Contract class
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestServicePartners">
            <summary>
            Qualified names for test service partners
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServicePartners.DirectoryString">
            <summary>
            Qualified name for test service instance directory
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServicePartners.Directory">
            <summary>
            Test service instance directory
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestCaseState">
            <summary>
            Holds the state of a test case as it executes.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCaseState.Name">
            <summary>
            Test case name.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCaseState.StateDescription">
            <summary>
            Description of current test case state.
            </summary>
            <remarks>
            Note that this is a description of the current state of the test case, not of the
            test case itself. As the test case executes, its state changes, and so does the
            description of that state.
            </remarks>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCaseState.PassCount">
            <summary>
            Pass count for test case.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCaseState.FailCount">
            <summary>
            Fail count for test case.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCaseState.StartTime">
            <summary>
            Test case start time.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCaseState.StartTimeSpecified">
            <summary>
            True if a start time was specified.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCaseState.EndTime">
            <summary>
            Test case End time.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestCaseState.EndTimeSpecified">
            <summary>
            True if an end time was specified on test case completion.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseState.#ctor">
            <summary>
            Creates an empty test case state.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseState.#ctor(System.String)">
            <summary>
            Creates a test case state with the passed test case name and an empty state description.
            </summary>
            <param name="tcName">Name of test case that owns this state.</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestCaseState.#ctor(System.String,System.String)">
            <summary>
            Creates a test case state with the passed test case name and state description.
            </summary>
            <param name="tcName">Name of test case that owns this state.</param>
            <param name="stateDescription">Description of current test case state</param>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestServiceState">
            <summary>
            Holds state information for a test service.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.Contract">
            <summary>
            Service contract for test service instance (duplicate of ServiceInfo.Contract)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.Service">
            <summary>
            Service Uri for test service instance (duplicate of ServiceInfo.Service)
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.Description">
            <summary>
            Test service description.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.CompletedTestCaseCount">
            <summary>
            Number of test cases completed so far.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.AllTestCasesPassed">
            <summary>
            Indicates whether or not all test cases in the test service have passed.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.StartTime">
            <summary>
            Test suite start time
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.StartTimeSpecified">
            <summary>
            True if a start time was specified
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.EndTimeSpecified">
            <summary>
            True if end time was specified
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServiceState.TestCaseList">
            <summary>
            List of test cases the comprise this test suite
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestServiceState.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.UpdateTestRequest">
            <summary>
            Update request body for entire test service state. Used for updating overall test progress.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.UpdateTestRequest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.UpsertTestCaseRequest">
            <summary>
            Upsert test case request body. Used for adding or updating test case state.
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.UpsertTestCaseRequest.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.UpsertTestCaseRequest.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.UpsertTestCaseRequest.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.DssTestCaseAttribute">
            <summary>
            Declaratively registers a method as a test case in the test suite, and allows the 
            specification of execution parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestCaseAttribute.Name">
            <summary>
            Test Case display name. Default is the method name.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestCaseAttribute.Timeout">
            <summary>
            Test Case timeout in minutes. Default 1 minute.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestCaseAttribute.ExecutionOrder">
            <summary>
            Test Case execution order in a sequential suite. Default is 0 unspecified.
            </summary>
            <remarks>
            This value is ignored if the suite is set to run test cases concurrently.
            </remarks>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.DssTestSuiteInitializerAttribute">
            <summary>
            Declaratively registers a method as the initialization method for a test suite, and allows the 
            specification of execution parameters. 
            </summary>
            <remarks>
            A suite initializer is similar to a test case method, but has slightly different semantics. A suite can
            have no more than one initializer, and it runs first by definition. Also, because an initializer is expected
            to complete rather than stay running in the background, it is considered implicitly complete when the method
            is complete, even if a test suite is configured to require explicit test case completion.
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteInitializerAttribute.Timeout">
            <summary>
            Suite Initializer timeout in minutes. Default 1 minute.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.DssTestSuiteAttribute">
            <summary>
            Declaratively registers a class as a test suite, and allows the specification of execution
            parameters. A test class may be instantiated as multiple suites with different properties,
            but the most common scenario is running each suite with a different manifest list (e.g.,
            in simulation or on hardware).
            </summary>
            TODO (IhabA 2074): "Multiple suites per test" does not fully work at this point. Attribute
            parameters other than manifests (used by DssTestDriver) get queried from the first instance only.
            And there is no way to indicate the cases/initializer for a specific suite. So, truly, only the
            manifests can vary.
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.Name">
            <summary>
            Test Suite name. Default is class name.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.Timeout">
            <summary>
            Test suite timeout in minutes. Default is 5 minutes.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.TestActive">
            <summary>
            Whether or not the test is active (enabled). Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.Host">
            <summary>
            Host to be used in run. Default is DssHost.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.Serialization">
            <summary>
            Serialization type to be used. Default is InboundOutbound.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.TestType">
            <summary>
            Classification of test. Default is Unit.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.RunFrequency">
            <summary>
            Frequency at which test should be run. Default is Daily.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.Manifests">
            <summary>
            A comma-separated list of test manifests to use for running the suite. If not specified, the
            default is to load a single manifest with a name that matches the pattern 
            test.name.manifest.xml from the test\manifests folder.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.SuiteCoordinator">
            <summary>
            The type of test suite coordinator to use for running the test suite. Default is Sequential.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.AbortOnFirstFailure">
            <summary>
            Determines test suite behavior when a case fails. "True" aborts all test cases after 
            first failure. Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.ImplicitTestCaseCompletion">
            <summary>
            Determines whether or not the framework automatically marks each test case in this suite as complete
            when the test case method ends (i.e., an implicit end). Default is true.
            </summary>
            <remarks>
            A test case may spawn other tasks, and choose not to wait for their completion. It might expect one
            of those tasks to signal the completion of the test case. To enable this type of explicit control over 
            test case end, set this property to false. Then the test case can be explicitly completed by calling 
            <see cref="M:Microsoft.Dss.Services.Test.TestCaseResult.CompleteTestCase"/> or by posting a result directly to 
            <see cref="P:Microsoft.Dss.Services.Test.TestCaseResult.ResultPort"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.Owner">
            <summary>
            Test Suite Owner. The default denotes an unspecified owner.
            </summary>
        </member>
        <member name="P:Microsoft.Dss.Services.Test.DssTestSuiteAttribute.TestEnvironments">
            <summary>
            Environments the test suite can run in
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.DssTestException">
            <summary>
            Internal exception thrown when the framework detects a violation of test suite rules 
            (e.g., more than one initializer per suite).
            </summary>
            <remarks>
            This exception is internal since it should not be used or caught outside the DSS
            test framework.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.DssTestException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.DssTestException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.DssTestException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.DssTestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestAssertFailedException">
            <summary>
            An exception that is thrown internally to signal a test case Assertion failure.
            </summary>
            <remarks>
            This exception is internal since it should not be used or caught outside the DSS
            test framework.
            </remarks>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestAssertFailedException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestAssertFailedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestAssertFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:Microsoft.Dss.Services.Test.TestAssertFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.Configuration.Host">
            <summary>
            Host type
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.Host.DssHost">
            <summary>
            DssHost
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.Host.LiveHost">
            <summary>
            LiveHost
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.Configuration.Serialization">
            <summary>
            Serialization type
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.Serialization.All">
            <summary>
            InboundOutbound
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.Serialization.OptIn">
            <summary>
            OptIn
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.Serialization.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.Configuration.TestType">
            <summary>
            Classification of test based on its scope/target.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.TestType.Unit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.TestType.Functional">
            <summary>
            Functional
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.TestType.Scenario">
            <summary>
            Scenario
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.TestType.QualityFundamentals">
            <summary>
            QualityFundamentals
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.TestType.Simulation">
            <summary>
            Simulation
            TODO (IhabA #1974): Remove this interim hack and replace with proper "requirements" support
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.Configuration.RunFrequency">
            <summary>
            Test execution frequency. Each frequency is a superset of the previous frequency. 
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.RunFrequency.Rolling">
            <summary>
            Rolling test: runs for every checkin.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.RunFrequency.Daily">
            <summary>
            Daily test: runs for every build/day.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.RunFrequency.Full">
            <summary>
            Full test: runs in full (exhaustive) test runs only.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.Configuration.SuiteCoordinator">
            <summary>
            The type of test suite coordinator to use for running the test suite.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.SuiteCoordinator.Sequential">
            <summary>
            Sequential coordinator: test cases run one at a time, optionally aborting if a test
            case fails.
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.SuiteCoordinator.Concurrent">
            <summary>
            Concurrent coordinator: all test cases run at the same time, optionally aborting if a 
            test case fails.
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.Configuration.TestEnvironments">
            <summary>
            Environments where test suite can be run
            </summary>    
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.TestEnvironments.None">
            <summary>
            Indicates no environment supported
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.TestEnvironments.SimulationEnvironment">
            <summary>
            Sim environment
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.TestEnvironments.DesktopMockHardware">
            <summary>
            Desktop using mock inputs for hardware
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.Configuration.TestEnvironments.PhysicalRobot">
            <summary>
            Robot physical environment
            </summary>
        </member>
        <member name="T:Microsoft.Dss.Services.Test.TestServicePaths">
            <summary>
            Test specific constants
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServicePaths.TestDirectory">
            <summary>
            Default TestDirectory service on port 19050
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServicePaths.TestAggregatorNodeHttpPort">
            <summary>
            Default HTTP port for test aggregator node
            </summary>
        </member>
        <member name="F:Microsoft.Dss.Services.Test.TestServicePaths.TestAggregatorNodeTcpPort">
            <summary>
            Default DSSP.TCP port for test aggregator node
            </summary>
        </member>
    </members>
</doc>
